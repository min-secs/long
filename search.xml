<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>my new post</title>
    <url>/2021/02/05/my-new-post/</url>
    <content><![CDATA[<p>我是一个兵,来自老本性</p>
<h2 id="哈哈哈"><a href="#哈哈哈" class="headerlink" title="哈哈哈"></a>哈哈哈</h2>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>photo</title>
    <url>/2021/02/20/photo/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Activity-finish之后,onDestoy并不会马上执行</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Activity-finish-%E5%90%8E-onDestroy-()%E5%B9%B6%E4%B8%8D%E4%BC%9A%E7%AB%8B%E9%A9%AC%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity finish 后 onDestroy ()并不会立马执行</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Activity finish 后 onDestroy ()并不会立马执行</h1>
        <div class="show-content">
          <p>只看标题就好</p><p>所以两个Activity在用到生命周期的时候,不要再onDestroy中做，控制不了</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Activity%E5%AE%98%E6%96%B9%E7%9B%B4%E8%AF%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%EF%BC%88%E5%AE%8C%E7%BB%93%EF%BC%89-1/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity官方直译深入理解（完结）</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Activity官方直译深入理解（完结）</h1>
        <div class="show-content">
          <hr id="null"><blockquote>Activity</blockquote><p>一个Activity是用户可以直观交互的东西。所有的activity都聚焦于创建一个窗口，可以通过setcontentview(view)的方式。通常情况下一个activity是全屏显示的，当然也可以设置不同的theme来显示不同的风格，例如windowIsFloating来设置浮动窗口。以下是每个activity必须回调的方法：</p><h4> Oncreate 在此你可以初始化你的activity。通常情况下你会用布局文件setcontentview的方式来定义此activity。在程序中通过findViewById(int)来和布局中的控件进行交互。</h4><h4> Onpause 当用户离开你的activity时会回调此方法，通常情况下之前用户做的改变行为需在此提交。</h4><p>在用Context.startActivity()启动之前，需要在AndroidManifest.xml通过&lt;activity&gt;声明。</p><p><i>Activity的生命周期</i></p><p>﻿</p><div class="image-package">
<img name="1639224201-1493335611311" src="http://upload-images.jianshu.io/upload_images/2226681-0da4a89ed2cc5f87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50"><br><div class="image-caption">图片发自简书App</div>
</div><p>整个过程从Oncreate开始，ondestroy结束。用户可以见到activity时刻从onstart开始到onstop之前。我们可以在onstart里面注册BroadcastReceiver，以便收到广播后修改我们的ui, 在onstop里面取消我们的BroadcastReceiver。用户可以和activity交互的时候从onresume开始直到onpause，一个activity会经常在这两个生命周期切换，所以最好在这两个方法里做轻量级的操作。</p><p>你应该在你的子类中回调如下方法，以便在不同的时候处理不同的逻辑。</p><blockquote>public class Activity extends ApplicationContext {﻿</blockquote><blockquote> protected void onCreate(Bundle savedInstanceState);﻿﻿</blockquote><blockquote> protected void onStart();﻿﻿</blockquote><blockquote> protected void onRestart();﻿﻿</blockquote><blockquote> protected void onResume();﻿﻿</blockquote><blockquote> protected void onPause();﻿﻿</blockquote><blockquote> protected void onStop();﻿﻿</blockquote><blockquote> protected void onDestroy();﻿</blockquote><blockquote> }</blockquote><p>Note：如果一个activity的onpause方法不结束的话，当前的或另一个activity的onresume方法不会执行。</p><hr id="null"><h3>Configuration Changes</h3><p>屏幕翻转，改变语言或者输入设备的改变，都会导致activity销毁。当然，我们可以在manifest.xml里面声明android:configChanges属性，在上述配置改变的时候交给我们自己的activity处理.将回调在这个方法里onConfigurationChanged(Configuration)，如果在此方法中有些屏幕配置的改变没有处理到，那么activity还是会被销毁，如果是当前在栈顶的activity则会重建。</p><hr id="null"><h3>Starting Activities and Getting Results</h3><p>通常情况下我们用startActivity(Intent)来启动一个新的activity，但有时我们想从新的activity结束的时候获取某些数据。比如微信打开相册选择某个图片发给联系人。此时就要用到startActivityForResult(Intent, int)，int为请求码，将在稍后介绍。返回的结果将回调在原activity的onActivityResult(int, int, Intent)方法里。不同的int表示不同的情况，如结果返回成功与否。Android系统已帮我们做了定义（RESULT_CANCELED, RESULT_OK）。下面请看示例：见谅，实在不知道怎么在手机上调代码的格式</p><p>﻿</p><blockquote> public boolean onKeyDown(int keyCode, KeyEvent event) {﻿</blockquote><blockquote> if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {﻿</blockquote><blockquote> // When the user center presses, let them pick a contact.﻿</blockquote><blockquote> startActivityForResult(﻿</blockquote><blockquote> new Intent(Intent.ACTION_PICK,﻿</blockquote><blockquote> new Uri("content://contacts")),﻿</blockquote><blockquote> PICK_CONTACT_REQUEST);﻿</blockquote><blockquote> return true;﻿</blockquote><blockquote> }﻿</blockquote><blockquote> return false;﻿</blockquote><blockquote> }﻿﻿</blockquote><blockquote> protected void onActivityResult(int requestCode, int resultCode,﻿</blockquote><blockquote> Intent data) {﻿</blockquote><blockquote> if (requestCode == PICK_CONTACT_REQUEST) {﻿</blockquote><blockquote> if (resultCode == RESULT_OK) {﻿</blockquote><blockquote> // A contact was picked. Here we will just display it﻿</blockquote><blockquote> // to the user.﻿</blockquote><blockquote> startActivity(new Intent(Intent.ACTION_VIEW, data));﻿</blockquote><blockquote> }﻿</blockquote><blockquote> }﻿</blockquote><blockquote> }</blockquote><blockquote><br></blockquote><hr id="null"><h3>Permissions</h3><p>启动一个Activity可能被拒绝，当在manifest里面没声明对应权限的时候。任何一个权限的生命周期（6.0需要特别的权限处理，百度android6.0权限封装）将持续到整个activity结束。</p><h3><hr id="null"></h3><p>Process Lifecycle<br></p><p>Android系统会尽可能长的保留我们的应用进程，但是当内存不足的时候会移除最老的进程。通常情况下移除进程会和用户交互的activity类型有很大相关，以下列出了四种activity的类型（重要性从高到低）：</p><h4>1.foreground activity</h4><p>用户正在交互的Activity,如你现在正在浏览的简书。它的进程只有在内存超出预期（由手机设备分配）才会被杀掉，通常来讲设备有责任保留它的进程。</p><h4>2.visible activity</h4><p>用户可见但不是foreground activity,比如此时弹出了一个对话框，一般来说不会被杀掉，除非为了保证foreground activity运行。</p><h4>3.background activity</h4><p>系统为前两种Activity预留内存会将此activity安全的杀掉。当用户重新返回这个activity时，oncreate方法会被回调，并会在onSaveInstanceState(Bundle)方法保存退出前的状态。</p><h4>4.empty process</h4><p>不再持有Activity或者是一个Service or BroadcastReceiver，系统在内存不足时有极大的可能性杀掉，所以我们在用service这种后台服务的时候，需要告诉系统我们的进程需要保留（通常做法是设置前台进程，弹出notification）。</p><hr id="null"><h3>Public method</h3><p>1.addContentView(View view, ViewGroup.LayoutParams param)</p><p>添加一个可添加的布局</p><p>2.createPendingResult(int requestCode, Intent data, int flags)</p><p>创建一个PendingIntent的对象，并将处理结果返回到onActivityResult(int, int, Intent)。</p><p>3.dispatchTouchEvent(MotionEvent ev)</p><p>此方法在处理滑动冲突时极为有用，还有一个在子类中常用的方法view.getparent.requestdisallow（true）谁用谁知道。事件分发在很多大牛的文章已经有讲述了，小弟就不献丑了。</p><p>4.dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)</p><p>打印Activity的状态到指定流</p><p>5.enterPictureInPictureMode（）</p><p>让此Activity进入画中画模式，如果系统允许的话。现在主流直播可能就是此方法的衍生。</p><p>6.findViewById(int id)</p><p>从XML中解析出view对象</p><p>7.finish()</p><p>结束当前Activity,有人说此方法是不正常的结束方式，但看官方并无特别说明。</p><p>8.finishActivity(int requestCode)</p><p>强制关闭通过startActivityForResult(Intent, int)启动的activity。</p><p>9.finishAndRemoveTask()</p><p>结束一个Task里所有的activity。哟，难道能在主页调这个方法？</p><p>10.getApplication()</p><p>获取Activity唯一的application。如果是组件化项目不知道这个方式可不可用？</p><p>11.getCallingActivity()</p><p>超级有用的方法，通常我们做开发的，不知道当前页面是哪个activity,我们可以继承一个baseactivity,然后再回调oncreate的时候打印出当前的类名，这样我们就可以知道哪个页面对应哪个activity了。关于这个郭大神有一篇这个文章，后面我会贴出代码。</p><p>12.getCurrentFocus()﻿<br></p><p>﻿</p><p>获得当前Window聚焦的具体view﻿﻿</p><p>13.getFragmentManager()﻿﻿</p><p>返回和当前Activity绑定的fragment的fragment manager﻿﻿</p><p>14.getIntent()﻿﻿</p><p>获得启动此Activity的intent﻿﻿</p><p>15.getLayoutInflater()﻿﻿</p><p>通过此方法直接解析一个布局成View﻿﻿</p><p>16.getReferrer()﻿﻿</p><p>谁启动了我？﻿﻿</p><p>17.getParentActivityIntent()﻿﻿</p><p>18.getRequestedOrientation()﻿﻿</p><p>当前请求的屏幕方向，注意用词，请求的，可能没请求成功﻿﻿</p><p>19.getSystemService(String name)﻿﻿</p><p>根据名字获得不同系统级的服务﻿﻿</p><p>20.isDestroyed()﻿﻿</p><p>回调的Ondestroy执行了，表示当前activity的实例已经死了﻿﻿</p><p>21.isFinishing()﻿﻿</p><p>调用Finish（）后﻿﻿</p><p>22.isImmersive()﻿﻿</p><p>是否为沉侵模式，并且不能被通知打断﻿﻿</p><p>23.isInMultiWindowMode()﻿﻿</p><p>是否为多窗口模式﻿﻿</p><p>24.isInPictureInPictureMode()﻿﻿</p><p>是否为画中画模式﻿﻿</p><p>25.onAttachFragment(Fragment fragment)﻿﻿</p><p>回调此方法在Fragment.onAttach()后﻿﻿</p><p>26.onAttachedToWindow()﻿﻿</p><p>当前Activity的主window是否关联上了windowmanager﻿﻿</p><p>27.onBackPressed()﻿﻿</p><p>用户按了返回键﻿﻿</p><p>28.onKeyDown(int keyCode, KeyEvent event)﻿﻿</p><p>当有键被按下的时候，同时所有的子view没有处理的情况会回调﻿﻿</p><p>29.onLowMemory()﻿﻿</p><p>内存不足时回调，可在此释放一些资源，降低被系统回收的概率﻿﻿</p><p>30.onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)﻿﻿</p><p>请求的所有权限回调﻿﻿</p><p>31.onTouchEvent(MotionEvent event)﻿﻿</p><p>触摸事件，当子view没做处理的时候﻿﻿</p><p>32.overridePendingTransition(int enterAnim, int exitAnim)﻿﻿</p><p>在startActivity(Intent) or finish()后执行activity的切换动画。</p><p>33.recreate()﻿<br></p><p>﻿</p><p>重新创建一个新实例﻿﻿</p><p>34.releaseInstance()﻿﻿</p><p>通知本地App叫它释放内存﻿﻿</p><p>35.runOnUiThread(Runnable action)﻿﻿</p><p>运行在UI线程，可在此更新一些界面显示﻿﻿</p><p>36.setIntent(Intent newIntent)﻿﻿</p><p>更新回调的getintent（）﻿﻿</p><p>37.setVisible(boolean visible)﻿﻿</p><p>当前主Window是否可见﻿﻿﻿﻿</p><p>Protected methods﻿</p><p>1.onActivityResult(int requestCode, int resultCode, Intent data)﻿﻿</p><p>接收启动的Activity结束时返回给它的一系列参数﻿﻿</p><p>2.onCreate(Bundle savedInstanceState)﻿﻿</p><p>3.onDestroy()﻿﻿</p><p>4.onNewIntent(Intent intent)﻿﻿</p><p>当启动模式为singleTop，在调用startActivity(Intent)时回调此方法﻿﻿</p><p>5.onpaues()﻿﻿</p><p>6.onPostCreate(Bundle savedInstanceState)﻿﻿</p><p>在onStart() and onRestoreInstanceState(Bundle)后调用，此方法用的少，但存在基友它的道理﻿﻿</p><p>7.﻿onPostResume()﻿﻿</p><p>在Onresume后调用﻿﻿</p><p>8.onUserLeaveHint()﻿﻿</p><p>当用户选择进入后台时回调</p><hr id="null"><p>Activity完结，以后将开始service的直译</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
  </entry>
  <entry>
    <title>Activity官方直译深入理解(完结)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Activity%E5%AE%98%E6%96%B9%E7%9B%B4%E8%AF%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%EF%BC%88%E5%AE%8C%E7%BB%93%EF%BC%89/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activity官方直译深入理解（完结）</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Activity官方直译深入理解（完结）</h1>
        <div class="show-content">
          <hr id="null"><blockquote>Activity</blockquote><p>一个Activity是用户可以直观交互的东西。所有的activity都聚焦于创建一个窗口，可以通过setcontentview(view)的方式。通常情况下一个activity是全屏显示的，当然也可以设置不同的theme来显示不同的风格，例如windowIsFloating来设置浮动窗口。以下是每个activity必须回调的方法：</p><h4> Oncreate 在此你可以初始化你的activity。通常情况下你会用布局文件setcontentview的方式来定义此activity。在程序中通过findViewById(int)来和布局中的控件进行交互。</h4><h4> Onpause 当用户离开你的activity时会回调此方法，通常情况下之前用户做的改变行为需在此提交。</h4><p>在用Context.startActivity()启动之前，需要在AndroidManifest.xml通过&lt;activity&gt;声明。</p><p><i>Activity的生命周期</i></p><p>﻿</p><div class="image-package">
<img name="1639224201-1493335611311" src="http://upload-images.jianshu.io/upload_images/2226681-0da4a89ed2cc5f87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50"><br><div class="image-caption">图片发自简书App</div>
</div><p>整个过程从Oncreate开始，ondestroy结束。用户可以见到activity时刻从onstart开始到onstop之前。我们可以在onstart里面注册BroadcastReceiver，以便收到广播后修改我们的ui, 在onstop里面取消我们的BroadcastReceiver。用户可以和activity交互的时候从onresume开始直到onpause，一个activity会经常在这两个生命周期切换，所以最好在这两个方法里做轻量级的操作。</p><p>你应该在你的子类中回调如下方法，以便在不同的时候处理不同的逻辑。</p><blockquote>public class Activity extends ApplicationContext {﻿</blockquote><blockquote> protected void onCreate(Bundle savedInstanceState);﻿﻿</blockquote><blockquote> protected void onStart();﻿﻿</blockquote><blockquote> protected void onRestart();﻿﻿</blockquote><blockquote> protected void onResume();﻿﻿</blockquote><blockquote> protected void onPause();﻿﻿</blockquote><blockquote> protected void onStop();﻿﻿</blockquote><blockquote> protected void onDestroy();﻿</blockquote><blockquote> }</blockquote><p>Note：如果一个activity的onpause方法不结束的话，当前的或另一个activity的onresume方法不会执行。</p><hr id="null"><h3>Configuration Changes</h3><p>屏幕翻转，改变语言或者输入设备的改变，都会导致activity销毁。当然，我们可以在manifest.xml里面声明android:configChanges属性，在上述配置改变的时候交给我们自己的activity处理.将回调在这个方法里onConfigurationChanged(Configuration)，如果在此方法中有些屏幕配置的改变没有处理到，那么activity还是会被销毁，如果是当前在栈顶的activity则会重建。</p><hr id="null"><h3>Starting Activities and Getting Results</h3><p>通常情况下我们用startActivity(Intent)来启动一个新的activity，但有时我们想从新的activity结束的时候获取某些数据。比如微信打开相册选择某个图片发给联系人。此时就要用到startActivityForResult(Intent, int)，int为请求码，将在稍后介绍。返回的结果将回调在原activity的onActivityResult(int, int, Intent)方法里。不同的int表示不同的情况，如结果返回成功与否。Android系统已帮我们做了定义（RESULT_CANCELED, RESULT_OK）。下面请看示例：见谅，实在不知道怎么在手机上调代码的格式</p><p>﻿</p><blockquote> public boolean onKeyDown(int keyCode, KeyEvent event) {﻿</blockquote><blockquote> if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {﻿</blockquote><blockquote> // When the user center presses, let them pick a contact.﻿</blockquote><blockquote> startActivityForResult(﻿</blockquote><blockquote> new Intent(Intent.ACTION_PICK,﻿</blockquote><blockquote> new Uri("content://contacts")),﻿</blockquote><blockquote> PICK_CONTACT_REQUEST);﻿</blockquote><blockquote> return true;﻿</blockquote><blockquote> }﻿</blockquote><blockquote> return false;﻿</blockquote><blockquote> }﻿﻿</blockquote><blockquote> protected void onActivityResult(int requestCode, int resultCode,﻿</blockquote><blockquote> Intent data) {﻿</blockquote><blockquote> if (requestCode == PICK_CONTACT_REQUEST) {﻿</blockquote><blockquote> if (resultCode == RESULT_OK) {﻿</blockquote><blockquote> // A contact was picked. Here we will just display it﻿</blockquote><blockquote> // to the user.﻿</blockquote><blockquote> startActivity(new Intent(Intent.ACTION_VIEW, data));﻿</blockquote><blockquote> }﻿</blockquote><blockquote> }﻿</blockquote><blockquote> }</blockquote><blockquote><br></blockquote><hr id="null"><h3>Permissions</h3><p>启动一个Activity可能被拒绝，当在manifest里面没声明对应权限的时候。任何一个权限的生命周期（6.0需要特别的权限处理，百度android6.0权限封装）将持续到整个activity结束。</p><h3><hr id="null"></h3><p>Process Lifecycle<br></p><p>Android系统会尽可能长的保留我们的应用进程，但是当内存不足的时候会移除最老的进程。通常情况下移除进程会和用户交互的activity类型有很大相关，以下列出了四种activity的类型（重要性从高到低）：</p><h4>1.foreground activity</h4><p>用户正在交互的Activity,如你现在正在浏览的简书。它的进程只有在内存超出预期（由手机设备分配）才会被杀掉，通常来讲设备有责任保留它的进程。</p><h4>2.visible activity</h4><p>用户可见但不是foreground activity,比如此时弹出了一个对话框，一般来说不会被杀掉，除非为了保证foreground activity运行。</p><h4>3.background activity</h4><p>系统为前两种Activity预留内存会将此activity安全的杀掉。当用户重新返回这个activity时，oncreate方法会被回调，并会在onSaveInstanceState(Bundle)方法保存退出前的状态。</p><h4>4.empty process</h4><p>不再持有Activity或者是一个Service or BroadcastReceiver，系统在内存不足时有极大的可能性杀掉，所以我们在用service这种后台服务的时候，需要告诉系统我们的进程需要保留（通常做法是设置前台进程，弹出notification）。</p><hr id="null"><h3>Public method</h3><p>1.addContentView(View view, ViewGroup.LayoutParams param)</p><p>添加一个可添加的布局</p><p>2.createPendingResult(int requestCode, Intent data, int flags)</p><p>创建一个PendingIntent的对象，并将处理结果返回到onActivityResult(int, int, Intent)。</p><p>3.dispatchTouchEvent(MotionEvent ev)</p><p>此方法在处理滑动冲突时极为有用，还有一个在子类中常用的方法view.getparent.requestdisallow（true）谁用谁知道。事件分发在很多大牛的文章已经有讲述了，小弟就不献丑了。</p><p>4.dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)﻿﻿</p><p>打印Activity的状态到指定流﻿﻿</p><p>5.enterPictureInPictureMode（）﻿﻿</p><p>让此Activity进入画中画模式，如果系统允许的话。现在主流直播可能就是此方法的衍生。﻿﻿</p><p>6.findViewById(int id)﻿﻿</p><p>从XML中解析出view对象﻿﻿</p><p>7.finish()﻿﻿</p><p>结束当前Activity,有人说此方法是不正常的结束方式，但看官方并无特别说明。﻿﻿</p><p>8.finishActivity(int requestCode)﻿﻿</p><p>强制关闭通过startActivityForResult(Intent, int)启动的activity。﻿﻿</p><p>9.finishAndRemoveTask()﻿﻿</p><p>结束一个Task里所有的activity。哟，难道能在主页调这个方法？﻿﻿</p><p>10.getApplication()﻿﻿</p><p>获取Activity唯一的application。如果是组件化项目不知道这个方式可不可用？﻿﻿</p><p>11.getCallingActivity()﻿﻿</p><p>超级有用的方法，通常我们做开发的，不知道当前页面是哪个activity,我们可以继承一个baseactivity,然后再回调oncreate的时候打印出当前的类名，这样我们就可以知道哪个页面对应哪个activity了。关于这个郭大神有一篇这个文章，后面我会贴出代码。</p><p>12.getCurrentFocus()</p><p>获得当前Window聚焦的具体view</p><p>13.getFragmentManager()</p><p>返回和当前Activity绑定的fragment的fragment manager</p><p>14.getIntent()</p><p>获得启动此Activity的intent</p><p>15.getLayoutInflater()</p><p>通过此方法直接解析一个布局成View</p><p>16.getReferrer()</p><p>谁启动了我？</p><p>17.getParentActivityIntent()</p><p>18.getRequestedOrientation()</p><p>当前请求的屏幕方向，注意用词，请求的，可能没请求成功</p><p>19.getSystemService(String name)</p><p>根据名字获得不同系统级的服务</p><p>20.isDestroyed()</p><p>回调的Ondestroy执行了，表示当前activity的实例已经死了</p><p>21.isFinishing()</p><p>调用Finish（）后</p><p>22.isImmersive()</p><p>是否为沉侵模式，并且不能被通知打断</p><p>23.isInMultiWindowMode()</p><p>是否为多窗口模式</p><p>24.isInPictureInPictureMode()</p><p>是否为画中画模式</p><p>25.onAttachFragment(Fragment fragment)</p><p>回调此方法在Fragment.onAttach()后</p><p>26.onAttachedToWindow()</p><p>当前Activity的主window是否关联上了windowmanager</p><p>27.onBackPressed()</p><p>用户按了返回键</p><p>28.onKeyDown(int keyCode, KeyEvent event)</p><p>当有键被按下的时候，同时所有的子view没有处理的情况会回调</p><p>29.onLowMemory()</p><p>内存不足时回调，可在此释放一些资源，降低被系统回收的概率</p><p>30.onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)</p><p>请求的所有权限回调</p><p>31.onTouchEvent(MotionEvent event)</p><p>触摸事件，当子view没做处理的时候</p><p>32.overridePendingTransition(int enterAnim, int exitAnim)</p><p>在startActivity(Intent) or finish()后执行activity的切换动画。</p><p>33.recreate()</p><p>重新创建一个新实例</p><p>34.releaseInstance()</p><p>通知本地App叫它释放内存</p><p>35.runOnUiThread(Runnable action)</p><p>运行在UI线程，可在此更新一些界面显示</p><p>36.setIntent(Intent newIntent)</p><p>更新回调的getintent（）</p><p>37.setVisible(boolean visible)</p><p>当前主Window是否可见</p><hr id="null"><p><br></p><h3>Protected methods<br>
</h3><p>1.onActivityResult(int requestCode, int resultCode, Intent data)</p><p>接收启动的Activity结束时返回给它的一系列参数</p><p>2.onCreate(Bundle savedInstanceState)</p><p>3.onDestroy()</p><p>4.onNewIntent(Intent intent)</p><p>当启动模式为singleTop，在调用startActivity(Intent)时回调此方法</p><p>5.onpaues()</p><p>6.onPostCreate(Bundle savedInstanceState)</p><p>在onStart() and onRestoreInstanceState(Bundle)后调用，此方法用的少，但存在基友它的道理</p><p>7.﻿onPostResume()</p><p>在Onresume后调用</p><p>8.onUserLeaveHint()</p><p>当用户选择进入后台时回调</p><hr id="null"><p>Activity完</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-Data</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-Data/</url>
    <content><![CDATA[<h3 id="Android文件系统入门知识"><a href="#Android文件系统入门知识" class="headerlink" title="Android文件系统入门知识"></a>Android文件系统入门知识</h3><blockquote>
<p>内外存储的由来:因为历史原因,老版本的Android手机可用容量小, 加载外部存储设备以便加大容量, 如sdcard. 后来随着技术的不断提高, 手机本身的容量逐渐加大, 但是这个分法一直保留了下来.</p>
</blockquote>
<p><strong>二者区别</strong></p>
<ul>
<li><p>内部存储</p>
<p>  不需要权限</p>
<p>  其它APP不可访问, 用户也不能操作</p>
<p>  卸载APP时会移除内部存储数据</p>
</li>
<li><p>外部存储</p>
<p>  首先要确认可访问性, 因为外部存储可卸载</p>
<p>  其它APP可以访问</p>
<p>  需要权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>*内部存储简单介绍**</p>
</li>
</ul>
<p>所在路径: Android 6.0在/data/user/0/package_name/</p>
<p>其它版本也对应在/data/下的某个地方, 以包名作为区分, 未root的文件管理中查看不了</p>
<p><strong>使用:</strong></p>
<p>在继承自ContextWrapper中, 如Activity, Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到文件对象</span></span><br><span class="line">File file = getFilesDir();</span><br><span class="line"></span><br><span class="line">String inPath = file.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">Log.d(<span class="string">&quot;test-file&quot;</span>,<span class="string">&quot;getFileDir:&quot;</span>+ inPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在inPath中写入hello</span></span><br><span class="line">FileOutputStream fileOutputStream = openFileOutput(<span class="string">&quot;hello.txt&quot;</span>, MODE_PRIVATE);</span><br><span class="line">fileOutputStream.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">fileOutputStream.close();</span><br></pre></td></tr></table></figure>
<p><strong>外部存储简单介绍</strong></p>
<p>通过android.os包中的Environment类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件可用性</span></span><br><span class="line"><span class="comment">/* 可写 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageWritable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String state = Environment.getExternalStorageState();</span><br><span class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可读 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageReadable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String state = Environment.getExternalStorageState();</span><br><span class="line">    <span class="keyword">if</span> (Environment.MEDIA_MOUNTED.equals(state) ||</span><br><span class="line">        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到外部存储私有对象(File),会随着APP的卸载而卸载</span></span><br><span class="line">Environment.getExternalStorageDirectory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到外部存储公共对象, 文件不会随着APP的卸载而卸载</span></span><br><span class="line"><span class="comment">//传入的参数代表文件类型 如Environment.DIRECTORY_MUSIC 代表音乐</span></span><br><span class="line"><span class="comment">//DIRECTORY_RINGTONES 代表铃音</span></span><br><span class="line">Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC));</span><br></pre></td></tr></table></figure>
<p>得到File对象后, 你就可以为所欲为</p>
<p><a href="https://developer.android.google.cn/reference/java/io/File.html#public-methods">File类</a></p>
<hr>
<p>###共享数据</p>
<blockquote>
<p>记得第一份工作面试的时候被问了一个问题:如何自己实现类似友盟分享功能?<br>当时回答的很含糊, 现在再来看, 就是通过Intent来定义分享action, 遍历所有的APP, 显示符合这个action的应用, 按规则启动隐式Intent</p>
</blockquote>
<ul>
<li>简单数据<br>通过Intent</li>
<li>文件<br>通过V4包中的<a href="https://developer.android.google.cn/reference/androidx/core/content/FileProvider.html">FileProvider</a></li>
</ul>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>NDK入门</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-NDK%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>最近需要打包C++文件成so库,按照网上教程同步的方式,build/intermediates下始终没有ndk文件中的so库</p>
</blockquote>
<p>当前环境<br>windows 10<br>Android Studio3.5.3<br>NDK r21</p>
<ul>
<li>配置NDK环境变量<br>我的电脑 右键–&gt;属性–&gt;高级–&gt;环境变量 path中添加ndk-bundle路径</li>
<li>新建jni文件<br>src/main/java同级目录下src/main/jni<br>将c++文件和头文件全部放入</li>
<li>jni目录下新建Android.mk文件<br>你的so库名称对应java类中System.loadLibrary(“so库名称”)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := 你的so库名称 </span><br><span class="line">LOCAL_SRC_FILES := 你的.cpp</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></li>
<li>jni目录下新建Application.mk文件<br><code>APP_ABI := all</code><br>打包所有支持cpu架构</li>
<li>在jni目录下打开power shell<br>输入ndk-build<br><img src="https://upload-images.jianshu.io/upload_images/2226681-69efe3b9b940f9e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ndk-build.png"><br>jni同级目录下会有libs/* 各平台so库文件</li>
<li>app build.gradle中配置so库路径<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line"> <span class="comment">//***</span></span><br><span class="line">  sourceSets &#123;</span><br><span class="line">        main() &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">&#x27;src/main/libs&#x27;</span>]</span><br><span class="line">            jni.srcDirs = [] </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-Op</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-Op/</url>
    <content><![CDATA[<blockquote>
<p>Android 优化篇</p>
</blockquote>
<h5 id="布局优化-绘制优化"><a href="#布局优化-绘制优化" class="headerlink" title="布局优化/绘制优化"></a>布局优化/绘制优化</h5><ul>
<li>原则<br>避免嵌套过多,可采用约束布局<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.1.3&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>工具<br>Android Studio在tools菜单栏选择layout工具查看<br><img src="https://upload-images.jianshu.io/upload_images/2226681-d0ff0e0407c64127.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Layout Inspector"></li>
</ul>
<hr>
<h5 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h5><ul>
<li><p>原则<br>避免创建过多不必要的对象,尤其是在循环中<br>比如不要在onDraw中new Paint</p>
</li>
<li><p>工具<br>查询内存泄漏<br>LeakCanary</p>
<h5 id="cpu优化"><a href="#cpu优化" class="headerlink" title="cpu优化"></a>cpu优化</h5></li>
<li><p>原则<br>避免多次执行同一个耗时方法</p>
</li>
<li><p>工具<br>TraceView 可找出单次执行耗时方法和多次调用的方法<br>Android5.0 AS3.0之后可使用<img src="https://upload-images.jianshu.io/upload_images/2226681-b8b2cc90602d1eb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Profiler"></p>
</li>
</ul>
<h5 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h5><p>车机项目中使用本地较多,暂略</p>
<h5 id="电量优化"><a href="#电量优化" class="headerlink" title="电量优化"></a>电量优化</h5><p>昝略</p>
<h5 id="apk体积优化"><a href="#apk体积优化" class="headerlink" title="apk体积优化"></a>apk体积优化</h5><ul>
<li>原则<ol>
<li>去除不用的资源</li>
<li>开启混淆</li>
<li>新型构建工具Bundle</li>
</ol>
</li>
<li>工具<br>Lint<br>静态代码检测工具<br><img src="https://upload-images.jianshu.io/upload_images/2226681-492f842ffa340630.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Lint"></li>
</ul>
<p>双击Shift开启搜索,输入<img src="https://upload-images.jianshu.io/upload_images/2226681-bb2565cc1c32eed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="去除多余资源"></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>PagedList入门</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-PagedList%E5%85%A5%E9%97%A8,%E5%8F%AA%E9%9C%80%E4%BA%94%E6%AD%A5Java%E7%89%88/</url>
    <content><![CDATA[<blockquote>
<p>最近有接到分页的需求, 想当然准备使用监听onScroll然后分段加载, 看到谷歌爸爸出品了Jetpack系列文章有Paging Lib于是点开看了下, 介绍的太复杂了有木有!!! room什么鬼, ViewModel云云, 抽丝剥茧<br>简单Demo入门, 记录如下</p>
</blockquote>
<p>新建Activity, 我使用的Fragment+ViewModel的方式, 很方便<br><img src="https://upload-images.jianshu.io/upload_images/2226681-74073a146e6e7448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Fragment+ViewModel"></p>
<p>####1.导入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;android.arch.lifecycle:extensions:1.1.1&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;android.arch.paging:runtime:1.0.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.android.support:recyclerview-v7:27.0.2&#x27;</span></span><br><span class="line"><span class="comment">//可选, 我习惯使用约束布局</span></span><br><span class="line">implementation <span class="string">&#x27;com.android.support.constraint:constraint-layout:1.1.3&#x27;</span></span><br></pre></td></tr></table></figure>
<p>版本不同方法可能有差异, 建议初学使用我这的版本, 方便跟着后面走<br>首先照着后面的代码复制一遍, 大概知道有哪些东西<br>####2.新建实体类</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Concert</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Concert</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Concert&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id + name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">( Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Concert)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = ((Concert) obj).id == id &amp;&amp; ((Concert) obj).name.equals(name);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用到的布局R.layout.paged_list_fragment</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/pagedlist&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/recyclerView&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;256dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:layout_marginTop=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:layout_marginEnd=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        app:layout_constraintEnd_toEndOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//R.layout.item_concert_list</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/name&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/textView&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:layout_marginBottom=<span class="string">&quot;8dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;TextView&quot;</span></span><br><span class="line">        app:layout_constraintBottom_toBottomOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintEnd_toEndOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintStart_toStartOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line">&lt;/android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>
<p>####3.新建DataSource实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.arch.paging.PositionalDataSource;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PositionPageDataSource</span> <span class="keyword">extends</span> <span class="title">PositionalDataSource</span>&lt;<span class="title">Concert</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInitial</span><span class="params">(<span class="meta">@NonNull</span> LoadInitialParams params, <span class="meta">@NonNull</span> LoadInitialCallback&lt;Concert&gt; callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> requestedLoadSize = params.requestedLoadSize;</span><br><span class="line">        Log.d(<span class="string">&quot;ldo&quot;</span>,<span class="string">&quot;PositionPageDataSource loadInitial &quot;</span>+requestedLoadSize);</span><br><span class="line">        List&lt;Concert&gt; subList = getSubList(<span class="number">0</span>, requestedLoadSize);</span><br><span class="line">        callback.onResult(subList,<span class="number">0</span>,<span class="number">40</span>);<span class="comment">//初始化加载从index == 0开始 40假设为数据总数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadRange</span><span class="params">(<span class="meta">@NonNull</span> LoadRangeParams params, <span class="meta">@NonNull</span> LoadRangeCallback&lt;Concert&gt; callback)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ldo&quot;</span>,<span class="string">&quot;PositionPageDataSource loadRange&quot;</span>);</span><br><span class="line">        callback.onResult(getSubList(params.startPosition,params.loadSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Concert&gt; <span class="title">getSubList</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;ldo&quot;</span>, <span class="string">&quot;getSubList&quot;</span>);</span><br><span class="line">        ArrayList&lt;Concert&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">            strings.add(<span class="keyword">new</span> Concert(start, <span class="string">&quot;&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Factory</span></span><br><span class="line"><span class="keyword">import</span> android.arch.paging.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceFactorty</span> <span class="keyword">extends</span> <span class="title">DataSource</span>.<span class="title">Factory</span>&lt;<span class="title">Integer</span>,<span class="title">Concert</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource&lt;Integer,Concert&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PositionPageDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####4.新建Adapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.arch.paging.PagedListAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.util.DiffUtil;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcertAdapter</span> <span class="keyword">extends</span> <span class="title">PagedListAdapter</span>&lt;<span class="title">Concert</span>, <span class="title">ConcertAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ConcertAdapter() &#123;</span><br><span class="line">        <span class="keyword">super</span>(showDiffCallBack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> DiffUtil.ItemCallback&lt;Concert&gt; showDiffCallBack = <span class="keyword">new</span> DiffUtil.ItemCallback&lt;Concert&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="meta">@NonNull</span> Concert oldItem, <span class="meta">@NonNull</span> Concert newItem)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (oldItem).id == (newItem).id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="meta">@NonNull</span> Concert oldItem, <span class="meta">@NonNull</span> Concert newItem)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> oldItem.equals(newItem);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ConcertAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_concert_list, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Concert concert = getItem(position);</span><br><span class="line">        holder.v.setText(concert.getId()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView v;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            <span class="keyword">this</span>.v = itemView.findViewById(R.id.textView);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####5.新建Fragment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.arch.lifecycle.LiveData;</span><br><span class="line"><span class="keyword">import</span> android.arch.lifecycle.Observer;</span><br><span class="line"><span class="keyword">import</span> android.arch.paging.LivePagedListBuilder;</span><br><span class="line"><span class="keyword">import</span> android.arch.paging.PagedList;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.android.displayingbitmaps.R;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PagedListFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIALLOADSIZE = <span class="number">40</span>;<span class="comment">//初始加载数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RELOADSIZE = <span class="number">20</span>;<span class="comment">//往下滑动加载数量</span></span><br><span class="line">    <span class="keyword">private</span> LiveData&lt;PagedList&lt;Concert&gt;&gt; data;</span><br><span class="line">    <span class="keyword">private</span> ConcertAdapter adapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PagedListFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PagedListFragment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        View inflate = inflater.inflate(R.layout.paged_list_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">       </span><br><span class="line">        recyclerView = inflate.findViewById(R.id.recyclerView);</span><br><span class="line">        <span class="keyword">return</span> inflate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        PagedList.Config config = <span class="keyword">new</span> PagedList.Config.Builder()</span><br><span class="line">                .setPageSize(INITIALLOADSIZE / <span class="number">2</span>) <span class="comment">// 分页加载的数量</span></span><br><span class="line">                .setEnablePlaceholders(<span class="keyword">false</span>) <span class="comment">// 当item为null是否使用PlaceHolder展示</span></span><br><span class="line">                .setInitialLoadSizeHint(INITIALLOADSIZE) <span class="comment">// 预加载的数量, 与分页加载的数量成倍数关系</span></span><br><span class="line"><span class="comment">//                    .setPrefetchDistance(5)</span></span><br><span class="line">                .build();</span><br><span class="line">        data = <span class="keyword">new</span> LivePagedListBuilder(<span class="keyword">new</span> DataSourceFactorty(), config).build();<span class="comment">//可以放在ViewModel层处理</span></span><br><span class="line">        data.observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;PagedList&lt;Concert&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(<span class="meta">@Nullable</span> PagedList&lt;Concert&gt; concerts)</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;ldo&quot;</span>,<span class="string">&quot;onChanged &quot;</span>+concerts.size());</span><br><span class="line">                adapter.submitList(concerts);<span class="comment">//调用PagedListAdapter中的方法绑定</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        adapter = <span class="keyword">new</span> ConcertAdapter();</span><br><span class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(getActivity()));</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>有一个大概认知之后简单介绍一下各个部分</p>
<ul>
<li>DataSource<br>数据处理核心, 最终回调到PagedList</li>
<li>LivePagedListBuilder<br>关联DataSource和观察数据</li>
<li>PagedList<br>可以理解为存储数据的集合容器, 不需要我们过多关注</li>
<li>PagedListAdapter<br>配合recycleview使用</li>
</ul>
<p>需要注意的是adapter.submitList(concerts)使用父类的方法设置集合, 采取自己设置list然后notifyDataChaged的方式, PositionPageDataSource里面的方法不会回调</p>
<hr>
<p>####不同DataSource实现类的区别<br>目前有三种DataSource实现方式, 上面使用的是PositionalDataSource, 想必你已经看到效果了</p>
<ul>
<li>PositionalDataSource<br>适用于上拉加载更多的场景, 如京东商城列表浏览, 知乎等</li>
<li>ItemKeyedDataSource<br>适用于下一part内容依赖当前某个key来获取, 如获得下一part的专辑列表, 需要传入当前歌手来获取</li>
<li>PageKeyedDataSource<br>适用于有明显上下页的场景, 如支持上一章,下一章跳转可以使用此种方式</li>
</ul>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>AS错误集锦</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-Studio%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<ul>
<li>Q1:Error: INSTALL_FAILED_INVALID_APK<br>关闭 File/Setting/Build/instant run </li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/2226681-b03a7dfcfd4de1eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="instant run .png"></p>
<ul>
<li>Q2:Installation failed with message Failed to commit install session 872031752 with command pm install-commit 872031752. Error: INSTALL_FAILED_INVALID_APK: /data/app/vmdl872031752.tmp/1_slice__ signatures are inconsistent<br>上面那个方式未解决的话, 重新clean一次项目, 在运行</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/2226681-984a8197dba513d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clean.png"></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-UI</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-UI/</url>
    <content><![CDATA[<blockquote>
<p>Android知识体系,笼统分为UI,Data,interact</p>
</blockquote>
<h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>1.屏幕适配</p>
<h2 id="郭霖微信公众号-屏幕适配"><a href="#郭霖微信公众号-屏幕适配" class="headerlink" title="郭霖微信公众号:屏幕适配"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650243915&idx=1&sn=7054d165d06caf917b6a2b57800316a2&chksm=88637224bf14fb320b689948ebb3fd0d783bd816c7184644abea51e26be6c2ec50b54e61b46c&scene=38#wechat_redirect">郭霖微信公众号:屏幕适配</a></h2><p>adb修改分辨率和屏幕密度<br>adb shell wm size 1280x720 //小写的x<br>adb shell wm density 240<br>adb shell wm size reset //还原默认<br>adb shell wm density reset</p>
<hr>
<p>2.自定义view<br><a href="https://hencoder.com/">扔物线大神</a></p>
<hr>
<p>3.优化布局</p>
<ul>
<li><p>减少嵌套</p>
</li>
<li><p>合理使用<include><merge></merge></include></p>
</li>
<li><p>延迟加载<ViewStub></ViewStub></p>
<a id="more"></a>
</li>
</ul>
<hr>
<p>4.优化应用启动时间</p>
<ul>
<li>从Application到Activity,Fragment中的生命周期方法避免重操作,100ms的差距往往影响甚大<br>可以通过handler延迟初始化一些资源,显示加载框,初始化完成后在隐藏(亲测延迟加载Fragment,界面快了2.5S)</li>
<li>给Activity或者Application添加背景图片<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MediaTheme</span></span><br><span class="line"> &lt;style name=<span class="string">&quot;MediaTheme&quot;</span> parent=<span class="string">&quot;@android:style/Theme.NoTitleBar&quot;</span>&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/yourpic&lt;/item&gt;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Manifest</span></span><br><span class="line"> &lt;application</span><br><span class="line">        android:name=<span class="string">&quot;.MediaApplication&quot;</span></span><br><span class="line">        android:allowBackup=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@drawable/ic_launcher&quot;</span></span><br><span class="line">        android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/MediaTheme&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-string-xml-插值的简单应用</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-string-xml-%E6%8F%92%E5%80%BC%E7%9A%84%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android string.xml 插值的简单应用</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android string.xml 插值的简单应用</h1>
        <div class="show-content">
          <p>在string.xml中定义</p><p>  &lt;string name = “myname”&gt;他今年%1$d岁了&lt;/string&gt;</p><p>在程序中</p><p>String string = context.getResource().getString(R.string.myname);</p><p>MyTextView.setText(String.format(string,8));</p><p>打印 他今年8岁了</p><p>%d 整数</p><p>%f 浮点数</p><p>%s字符串</p><p>也可以在String.xml中%2添加多个值，依次在代码中填入相应值即可</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-studio打开无响应</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-studio%E6%89%93%E5%BC%80%E6%97%A0%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android studio打开无响应</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android studio打开无响应</h1>
        <div class="show-content">
          <p>双击666后无任何反应</p><p>有两种可能</p><p>1.gradle版本和AS不对应</p><p>2.环境变量没配置</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>圆角shape</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-%E5%9C%86%E8%A7%92shape/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;shape xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:shape=<span class="string">&quot;rectangle&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 填充的颜色 --&gt;</span><br><span class="line">    &lt;solid android:color=<span class="string">&quot;@color/bottom_controller_color&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 边框的颜色和粗细 --&gt;</span><br><span class="line">    &lt;stroke</span><br><span class="line">        android:width=<span class="string">&quot;1dp&quot;</span></span><br><span class="line">        android:color=<span class="string">&quot;@color/bottom_controller_color&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners</span><br><span class="line">        android:bottomLeftRadius=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:bottomRightRadius=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:radius=<span class="string">&quot;20dp&quot;</span></span><br><span class="line">        android:topLeftRadius=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">        android:topRightRadius=<span class="string">&quot;18dp&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android-源码初步认识</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android-%E6%BA%90%E7%A0%81%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android 源码初步认识</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android 源码初步认识</h1>
        <div class="show-content">
          <p><b>1.源码结构</b></p><p>"BootLoader" u-boot.img MLO 连接硬件和操作系统的中间件,检测与配置硬件,启动操作系统<br></p><p>"uImage"  Linux内核,被u-boot识别引导</p><p>"ramdisk.img"  Android系统根文件镜像</p><p>"boot.img"  将zImage和ramdisk.img合并为一个包<br></p><p>"system.img"  Android系统核心  将被挂载到 /system分区</p><p>"userdata.img"	用户文件  将被挂载到 /data分区</p><p><br></p><p>android在线源码：<a href="http://www.grepcode.com/" target="_blank">http://www.grepcode.com/</a></p><hr>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android内存优化官方指南</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E5%AE%98%E6%96%B9%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>前言:在开发中遇到加载图片的业务时,一不小心就会碰到oom等令人头痛的问题,在低配手机上尤其明显.以下是谷歌官方优化建议</p>
</blockquote>
<h3 id="1-避免使用常驻服务"><a href="#1-避免使用常驻服务" class="headerlink" title="1.避免使用常驻服务"></a>1.避免使用常驻服务</h3><p>在一个服务使用时再去启动,不用时停止,应用开发推荐使用IntentService</p>
<h3 id="2-合理选择容器"><a href="#2-合理选择容器" class="headerlink" title="2.合理选择容器"></a>2.合理选择容器</h3><p>针对HashMap,Android有专门优化过的容器,比如LongSparseArray<E>等</E></p>
<h3 id="3-小心使用抽象"><a href="#3-小心使用抽象" class="headerlink" title="3.小心使用抽象"></a>3.小心使用抽象</h3><p>抽象能大大简化子类的代码,但是很多子类并不需要的代码也被放到了类里面,有隐形影响</p>
<h3 id="4-用Protocol-Buffers代替序列化数据"><a href="#4-用Protocol-Buffers代替序列化数据" class="headerlink" title="4.用Protocol Buffers代替序列化数据"></a>4.用Protocol Buffers代替序列化数据</h3><p>谷歌出品,必属精品</p>
<h3 id="5-避免内存流失"><a href="#5-避免内存流失" class="headerlink" title="5.避免内存流失"></a>5.避免内存流失</h3><p>常见的有在ondraw里面new obj()</p>
<h3 id="6-移除多余的库"><a href="#6-移除多余的库" class="headerlink" title="6.移除多余的库"></a>6.移除多余的库</h3><p>很多时候第三方库能大大节省我们开发代码的时间,但也要考虑到库本身是不是太大并消耗了我们的内存</p>
<h3 id="7-减小apk的体积"><a href="#7-减小apk的体积" class="headerlink" title="7.减小apk的体积"></a>7.减小apk的体积</h3><p>使用webp代替png图标,能缩小40%到60%的空间;<br>使用AS的Analyz分析代码中没用到的资源;<br>代码混淆也会减小一定的体积</p>
<h3 id="8-依赖注入框架选择Dagger2"><a href="#8-依赖注入框架选择Dagger2" class="headerlink" title="8.依赖注入框架选择Dagger2"></a>8.依赖注入框架选择Dagger2</h3><p>谷歌描述的是不会像其他注入框架扫描代码,影响性能</p>
<h3 id="9-谨慎使用外部库"><a href="#9-谨慎使用外部库" class="headerlink" title="9.谨慎使用外部库"></a>9.谨慎使用外部库</h3><p>互联网上常用的库,有些可能不是专为手机的操作系统设计的,我们要考量两个方面:本身大小和内存占用情况</p>
<hr>
<p>针对图片oom,对新手来说使用记住一个公式就可以了<br>Picasso.with(context).fit().into(view)//Picasso2.5.2版本<br>这行代码会根据imageview的大小自动适配图片大小</p>
<p>想要深入了解的同学记住一点,就是图片分辨率太大了,想办法压缩图片;就像人耳听觉有频率限制,太高清的图片在手机上也是浪费资源,压缩后肉眼也看不出明显区别</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android切九妹图片</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%88%87%E4%B9%9D%E5%A6%B9%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android切九妹图片</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android切九妹图片</h1>
        <div class="show-content">
          <p>1.打开sdk/tools/draw9patch</p><p>2.拖进去一张图片</p><p>3.四周都可以点，左键选择锚点</p><p>4.左上为图片拉伸区域，右下为内容固定区域</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android利用DDMS性能调优</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%88%A9%E7%94%A8DDMS%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android利用DDMS性能调优</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android利用DDMS性能调优</h1>
        <div class="show-content">
          <p>前言：在android功能都开发完毕后，可以开始考虑优化代码。但要怎么入手呢？首先我们应该解决明显的UI卡顿，其次可以考虑内存优化等等。当然因为鄙人能力有限，有不到之处还请各位大神指教。</p><h1>1.UI卡顿</h1><p>UI卡顿的问题，我们可以利用ddms的traceview功能查看。</p><p><br></p><div class="image-package" data-index="1">
<img class="uploaded-img" src="http://upload-images.jianshu.io/upload_images/2226681-7aec17077e4ccf8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="min-height:0;min-width:0;" width="auto" height="auto"><br><div class="image-caption"></div>
</div><p><br></p><p>第一次点击后,会弹出一个对话框,直接点击确定,使用默认的即可.然后在界面上操作一下认为耗时的地方,在点击一下带红点的按钮.在IDE中就会出现traceview的视图.</p><p>我们在</p><div class="image-package" data-index="2">
<img class="uploaded-img" src="http://upload-images.jianshu.io/upload_images/2226681-c45e1fefcda989a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="min-height:0;min-width:0;" width="auto" height="auto"><br><div class="image-caption"></div>
</div><p>这一栏中找到CPU_time/call,点击后排序.里面找我们自己的函数,就能看到较耗时的操作,在进行优化.</p><h4><i>PS:如果已经点击红点按钮,界面操作无响应的话,多半是哪个地方ANR了,我们可以adb pull data/anr/*  d:/   拷贝出traces.txt文件 从而定位哪个函数在主线程进行了耗时操作.</i></h4><h1>2.堆内存泄漏</h1><p>内存泄漏用IDE可点开红框</p><div class="image-package" data-index="3">
<img class="uploaded-img" src="http://upload-images.jianshu.io/upload_images/2226681-d804e1635562048e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="min-height:0;min-width:0;" width="auto" height="auto"><br><div class="image-caption"></div>
</div><p>若是没有视图窗口,则在IDE上方窗口选windows --&gt;show view 里面找到heap</p><p>我们在heap界面,然后每五秒选择gauge GC 若是heap size稳定在一个数值则表示没有内存泄漏的风险,若是heap size在不停的增大,则我们需要考虑创建对象的地方哪还值得优化.可以百度 Android内存优化.</p><p>&gt;推荐使用LeakCancary,eclipse版本的jar包我这有,详情私信</p><h1>3.线程耗时</h1><p><br></p><div class="image-package" data-index="4">
<img class="uploaded-img" src="http://upload-images.jianshu.io/upload_images/2226681-daf22e49d4da9f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="min-height:0;min-width:0;" width="auto" height="auto"><br><div class="image-caption"></div>
</div><p>我们在设备列表中选中我们的包名,然后打开红框的线程.在右侧就能看到当前应用所有的线程,utime表示我们的线程执行耗时,重点关注这个即可.</p><h1>4.UI嵌套</h1><p><br></p><div class="image-package" data-index="5">
<img class="uploaded-img" src="http://upload-images.jianshu.io/upload_images/2226681-44734d04ef915973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" style="min-height:0;min-width:0;" width="auto" height="auto"><br><div class="image-caption"></div>
</div><p>点开这个按钮需要手机有root权限,若是没有的话,可在手机开发者选项中,打开GPU过度绘制,如果界面中红色的区域较多,则这部分区域是我们需要优化的</p><h1>5.cpu占比</h1><p>我们可在上述右侧部位找到system info的窗口,点击update后,即可看我们的应用瞬时占用的cpu比例.</p><p>todo : 如何分析各个函数占用cpu的比重</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础-try-catch等执行顺序</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80(Java)-try-catch-finally-retrun%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>口诀,catch优先return, 无论怎样finally<br>2019年9月19日</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      tag = <span class="string">&quot;ldo-&quot;</span>;</span><br><span class="line">      Log.d(tag, <span class="string">&quot;go: start&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Log.d(tag, <span class="string">&quot;go: try 01&quot;</span>);</span><br><span class="line">          arrayList.get(<span class="number">0</span>);</span><br><span class="line">          Log.d(tag, <span class="string">&quot;go: return 01&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          Log.d(tag, <span class="string">&quot;go: catch01&quot;</span>);</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">              arrayList.add(<span class="number">1</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">              e1.printStackTrace();</span><br><span class="line">              Log.d(tag, <span class="string">&quot;go: catch02&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          Log.d(tag, <span class="string">&quot;go: finally&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>方法第一次执行<br>猜猜看打印什么<br>嘟嘟嘟嘟<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p>
<p>.<br>.<br>.<br>..<br>.<br>.<br>.</p>
<p>公布</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01-01 01:24:02.567 17772-17772&#x2F; D&#x2F;ldo-: go: start</span><br><span class="line">01-01 01:24:02.567 17772-17772&#x2F; D&#x2F;ldo-: go: try 01</span><br><span class="line">01-01 01:24:02.567 17772-17772&#x2F; D&#x2F;ldo-: go: catch01</span><br><span class="line">01-01 01:24:02.570 17772-17772&#x2F; D&#x2F;ldo-: go: finally</span><br></pre></td></tr></table></figure>
<hr>
<p>第二次执行<br>嘟嘟嘟<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.<br>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01-01 01:27:29.302 17772-17772&#x2F; D&#x2F;ldo-: go: start</span><br><span class="line">01-01 01:27:29.302 17772-17772&#x2F; D&#x2F;ldo-: go: try 01</span><br><span class="line">01-01 01:27:29.302 17772-17772&#x2F; D&#x2F;ldo-: go: return 01</span><br><span class="line">01-01 01:27:29.302 17772-17772&#x2F; D&#x2F;ldo-: go: finally</span><br></pre></td></tr></table></figure>
<p>别忘了会执行finally哦~</p>
<hr>
<p>最后考大家一个, 大家加油哦 ~. ~</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tag = <span class="string">&quot;ldo-&quot;</span>;</span><br><span class="line">        Log.d(tag, <span class="string">&quot;go: start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log.d(tag, <span class="string">&quot;go: try 01&quot;</span>);</span><br><span class="line">            arrayList.get(<span class="number">0</span>);</span><br><span class="line">            Log.d(tag, <span class="string">&quot;go: return 01&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(tag, <span class="string">&quot;go: catch01&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//                arrayList = new ArrayList&lt;&gt;();</span></span><br><span class="line">                arrayList.add(<span class="number">1</span>);</span><br><span class="line">                Log.d(tag, <span class="string">&quot;go: try 02&quot;</span>);</span><br><span class="line">                Log.d(tag, <span class="string">&quot;go: return 02&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">                Log.d(tag, <span class="string">&quot;go: catch02&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                Log.d(tag, <span class="string">&quot;go: finally 02&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Log.d(tag, <span class="string">&quot;go: finally 01&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android压缩大图官方写法</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%8E%8B%E7%BC%A9%E5%A4%A7%E5%9B%BE%E5%AE%98%E6%96%B9%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>前言:之前写多媒体的时候,加载图片使用的Picasso框架,但图片列表很多依然有oom的问题,原来的图片分辨率(5024*4280)太大了,遂要压缩图片</p>
</blockquote>
<p>对于一张5024*4280的图片(ARGB_8888 )来说,系统要分配多少内存呢?计算方法如下<br>5024*4280*4byte 约等 82.026M,吓人不<br>对于android设备来说,丢失一点像素点肉眼基本看不出来(肉眼八倍镜除外),所以如下是官方提供的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></span><br><span class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">    BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Calculate inSampleSize</span></span><br><span class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decode bitmap with inSampleSize set</span></span><br><span class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Raw height and width of image</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</span><br><span class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></span><br><span class="line">        <span class="comment">// height and width larger than the requested height and width.</span></span><br><span class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</span><br><span class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</span><br><span class="line">            inSampleSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mImageView.setImageBitmap(</span><br><span class="line">    decodeSampledBitmapFromResource(getResources(), R.id.myimage, <span class="number">100</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure>
<p>网上有人说decodeStream会比decodeResource更节省内存,官方并无相关说明,需要用哪种方法解析Bitmap就用哪个方法吧,主要还是在于压缩图片</p>
<p>压缩原理就我的理解是先不分配图片的内存,待针对不同的设备(中密度,高密度,超高密度等)计算好压缩比例后再分配内存</p>
<p>ps:Picasso加载图片有一个fit()方法会根据imageview的大小自动压缩图片,就不需要上面的步骤了</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第一章-更好的使用对象)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1)/</url>
    <content><![CDATA[<h4 id="1-创建和销毁对象"><a href="#1-创建和销毁对象" class="headerlink" title="1.创建和销毁对象"></a>1.创建和销毁对象</h4><p>这个章节包含创建和销毁对象,什么时候和怎样创建,什么时候避免创建,如何确保对象在准确的时机销毁,如何管理与清理销毁的对象</p>
<h5 id="Item1-考虑用静态工厂方法替代构造方法"><a href="#Item1-考虑用静态工厂方法替代构造方法" class="headerlink" title="Item1 考虑用静态工厂方法替代构造方法"></a>Item1 考虑用静态工厂方法替代构造方法</h5><p>通常来说获取一个类的实例是通过它的构造方法,但这有一种更科学的方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意,静态工厂方法并不等价工厂设计模式</p>
</blockquote>
<p>当然使用这种方式有利有弊<br><strong>利:<br>1.静态工厂方法有名字,可以一目了然 eg:BigPerson.name</strong><br><strong>2.在被调用的时候只创建一个对象</strong><br><strong>3.封装了实现细节,可返回任意需要的对象</strong><br><strong>4.减少对象的创建参数<br>eg:<code>java Map&lt;String,List&lt;String&gt;&gt; m = new HashMap&lt;String,List&lt;String&gt;&gt;(); Map&lt;String,List&lt;String&gt;&gt; m = MyMap.newInstance();</code></strong></p>
<p>弊:<br>1.无法从它派生出子类<br>继承的特性使用不上<br>2.无法和其它静态方法明显做出区分<br>推荐常用的几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">newInstance()</span><br><span class="line">newType()</span><br><span class="line">getInstance()</span><br><span class="line">valueOf()</span><br></pre></td></tr></table></figure>
<hr>
<h5 id="Item2-考虑用建造者模式创建多个参数的对象"><a href="#Item2-考虑用建造者模式创建多个参数的对象" class="headerlink" title="Item2 考虑用建造者模式创建多个参数的对象"></a>Item2 考虑用建造者模式创建多个参数的对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> ser,<span class="keyword">int</span> servings)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.servingSize = ser;</span><br><span class="line">      <span class="keyword">this</span>.servings = servings;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;calories = val;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;fat= val;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;sodium= val;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;carbohydrate= val;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span> <span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">	    servingSize  = builder.servingSize ;</span><br><span class="line">        servings = builder.servings ;</span><br><span class="line">        calories = builder.calories ;</span><br><span class="line">        fat= builder.fat;</span><br><span class="line">        sodium= builder.sodium;</span><br><span class="line">        carbohydrate= builder.carbohydrate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NutritionFacts obj = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>,<span class="number">8</span>).calories(<span class="number">100</span>)</span><br><span class="line">  .sodium(<span class="number">33</span>).carbohydrate(<span class="number">22</span>).build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>比如典型的Dialog就是用的建造者模式</p>
</blockquote>
<hr>
<h5 id="Item3-强制-单例属性使用私有的构造方法或者使用枚举"><a href="#Item3-强制-单例属性使用私有的构造方法或者使用枚举" class="headerlink" title="Item3 (强制)单例属性使用私有的构造方法或者使用枚举"></a>Item3 (强制)单例属性使用私有的构造方法或者使用枚举</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span> <span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> INSTANCE ;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readRssolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> INSTANCE ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line">  INSTANCE ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item4-强制-对于只有静态方法的工具类不允许使用私有构造方法"><a href="#Item4-强制-对于只有静态方法的工具类不允许使用私有构造方法" class="headerlink" title="Item4 (强制)对于只有静态方法的工具类不允许使用私有构造方法"></a>Item4 (强制)对于只有静态方法的工具类不允许使用私有构造方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> calss UtilityClass&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item5-避免创建不必要的对象"><a href="#Item5-避免创建不必要的对象" class="headerlink" title="Item5 避免创建不必要的对象"></a>Item5 避免创建不必要的对象</h5><p>重复利用一个对象好过重新创建一个新对象<br>重复利用访问更快而且更时尚,理论上说一个对象不可变可一直重复利用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad DON&#x27;T DO THIS!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//分配了不必要的强度对象</span></span><br><span class="line">    Calendar gmtCal = </span><br><span class="line">        Calendar.getInstance(TimeZone.getTimeZone(<span class="string">&quot;GMT&quot;</span>));</span><br><span class="line">    gmtCal .set(<span class="number">1946</span>,Calendar.JANUARY,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Date boomStart = gmtCal .getTime();</span><br><span class="line">    gmtCal .set(<span class="number">1965</span>,Calendar.JANUARY,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Date boomEnd = gmtCal .getTime();</span><br><span class="line">    <span class="keyword">return</span> birthDate.compareTo(boomStart) &gt;= <span class="number">0</span> </span><br><span class="line">      &amp;&amp; birthDate.compareTo(boomEnd) &lt; <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>isBabyBoomer每次调用都会创建Calendar,TimeZone,和两个Date实例,优化后如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_START;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_END:</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(<span class="string">&quot;GMT&quot;</span>));</span><br><span class="line">		gmtCal.set(<span class="number">1946</span>,Calendar.JANUARY,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		BOOM_START = gmtCal.getTime();</span><br><span class="line">		gmtCal.set(<span class="number">1946</span>,Calendar.JANUARY,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		BOOM_END = gmtCal.getTime();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthDate.compareTo(BOOM_START) &gt;= <span class="number">0</span> </span><br><span class="line">          &amp;&amp; birthDate.compareTo(BOOM_END) &lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重复调用1000万次isBabyBoomer,使用bad-耗时32,000ms 使用good-耗时130ms,Wow~</p>
<hr>
<h5 id="Item6-清除过时的对象引用"><a href="#Item6-清除过时的对象引用" class="headerlink" title="Item6 清除过时的对象引用"></a>Item6 清除过时的对象引用</h5><p>Java有GC机制,并不意味着Java程序员不需要考虑内存了<br>你能找到如下代码内存泄漏之处吗?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object[] elements;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">16</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">		elements = <span class="keyword">new</span> Object[DEFAULT_SIZE];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span></span>&#123;</span><br><span class="line">		ensureCapacity();</span><br><span class="line">		elements[size++] = e;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">		<span class="keyword">return</span> elements[--size];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(elements.length == size)</span><br><span class="line">			elements = Arrays.copyOf(elements,<span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乍一看没什么问题吧?你也可以用你想到方式测试它,它都能运行良好 但这有一个内存泄漏的问题哦<br>嘟嘟嘟~<br>so,问题出在哪里呢?<br>嘟嘟嘟~</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>…<br>问题在于当我们pop了一些对象,GC并不知道这些对象已经过时,它只知道elements[]还处于活跃状态,所以一直不会清理那部分过时的对象<br>优化如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">		Object result = elements[--size];</span><br><span class="line">		elements[size] = <span class="keyword">null</span>;<span class="comment">//清理过时的对象</span></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类似的情况还有在集合中保存了对象,常常会忘记这些对象的存在</p>
</blockquote>
<blockquote>
<p>对于监听的listener和callback也要及时注册和反注册,不然也会导致内存异常</p>
</blockquote>
<h5 id="Item7-避免使用finalizers"><a href="#Item7-避免使用finalizers" class="headerlink" title="Item7 避免使用finalizers"></a>Item7 避免使用finalizers</h5><h2 id="略"><a href="#略" class="headerlink" title="略"></a>略</h2><p><a href="https://www.jianshu.com/p/e9933b7e9009">下一章:Object的方法</a> </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第七章-通用原则)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%B8%83%E7%AB%A0-%E9%80%9A%E7%94%A8%E5%8E%9F%E5%88%99)/</url>
    <content><![CDATA[<p>本章主要讨论语言的具体内容。它讨论了局部变量的处理、控制结构、库的使用、各种数据类型的使用，以及使用反射和本地方法。最后，讨论了优化和命名约定</p>
<h5 id="Item-45-最小化局部变量作用域"><a href="#Item-45-最小化局部变量作用域" class="headerlink" title="Item 45:最小化局部变量作用域"></a>Item 45:最小化局部变量作用域</h5><blockquote>
<p>作用域:一个花括号{}包裹起来的区域</p>
</blockquote>
<p>此条例同Item13相似:最小化类和成员变量的访问权限<br>Java允许你在任何地方声明变量,但是最重要的是<em>在首次使用的地方声明变量,并初始化</em><br>循环提供了一种实现此种方式的机制,而且for循环比while循环好,如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Element e : c) &#123;</span><br><span class="line">	doSomething(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//before JDK1.5</span></span><br><span class="line"><span class="keyword">for</span> (Iterator i = c.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">	doSomething((Element) i.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么for比while好呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line">Iterator&lt;Element&gt; i = c.iterator();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">	doSomething(i.next());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">Iterator&lt;Element&gt; i2 = c2.iterator();</span><br><span class="line"><span class="keyword">while</span> (i.hasNext()) &#123; <span class="comment">// BUG! 应该是i2</span></span><br><span class="line">	doSomethingElse(i2.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们写一个差不多的代码,从一个地方copy过来的时候,很有可能忘记修改某个变量值(如i2),它不会在编译期报错,我们很可能长时间遗留这个bug<br>使用for循环可以避免这个bug</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;Element&gt; i = c.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">	doSomething(i.next());</span><br><span class="line">&#125;</span><br><span class="line"> ...</span><br><span class="line"><span class="comment">// Compile-time error - cannot find symbol i</span></span><br><span class="line"><span class="keyword">for</span> (Iterator&lt;Element&gt; i2 = c2.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">	doSomething(i2.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是最小化作用域的好处<br>#####Item 46: Prefer for-each loops to traditional for loops<br>对于不需要下标来做特殊操作的遍历,推荐使用增强for循环<br>你能发现下面的bug吗?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Suit</span> </span>&#123; CLUB, DIAMOND, HEART, SPADE &#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Rank</span> </span>&#123; ACE, DEUCE, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT,</span><br><span class="line"> NINE, TEN, JACK, QUEEN, KING &#125;</span><br><span class="line">...</span><br><span class="line">Collection&lt;Suit&gt; suits = Arrays.asList(Suit.values());</span><br><span class="line">Collection&lt;Rank&gt; ranks = Arrays.asList(Rank.values());</span><br><span class="line">List&lt;Card&gt; deck = <span class="keyword">new</span> ArrayList&lt;Card&gt;();</span><br><span class="line"><span class="keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); )</span><br><span class="line">	<span class="keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )</span><br><span class="line">		deck.add(<span class="keyword">new</span> Card(i.next(), j.next()));</span><br></pre></td></tr></table></figure>
<p>…<br>…<br>…<br>…<br>…<br>…<br>发现不了也不要难过,很多有经验的程序员也会犯这个错误<br>原因在于i.next()会被重复调用,导致结果异常<br>可以修复如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Iterator&lt;Suit&gt; i = suits.iterator(); i.hasNext(); )&#123;</span><br><span class="line">    Suit suit = i.next();</span><br><span class="line">	<span class="keyword">for</span> (Iterator&lt;Rank&gt; j = ranks.iterator(); j.hasNext(); )</span><br><span class="line">		deck.add(<span class="keyword">new</span> Card(suit, j.next()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然解决了问题,但是很丑,更简洁的写法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Suit suit : suits)</span><br><span class="line">	<span class="keyword">for</span> (Rank rank : ranks)</span><br><span class="line">		deck.add(<span class="keyword">new</span> Card(suit, rank));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>尽可能的使用增强for循环<br>#####Item 47: Know and use the libraries<br>不要重复造轮子<br>如果需要一个常用的功能,去发现一个库并使用它,往往比自己写的要好<br>因为库会随着时间推移更新迭代越来越好,自己也节约了时间<br>这并不会评论一个人的能力<br>#####Item 48: Avoid float and double if exact answers are required<br>当需要一个精确的答案时,避免使用float或double类型的变量</p>
</blockquote>
<p>float或double是为了科学和工程计算而设计的,特别不适用于货币计算</p>
<p>推荐使用int或long代替<br>#####Item 49: Prefer primitive types to boxed primitives</p>
<blockquote>
<p>使用原始类型替代装箱类型</p>
</blockquote>
<p>byte short char int long float double boolbean等是Java中的基本类型,也有对应的装箱类型,如 Integer, Double, and Boolean.应当谨慎对待这两者之间的差别</p>
<p>首先第一个差别,原始类型仅仅包含对应的值,装箱类型既包含对应的值也有对应的引用,第二个差别是装箱类型有可能为null,第三个差别是原始类型在时间和空间消耗中更高效<br>#####Item 50: Avoid strings where other types are more appropriate</p>
<blockquote>
<p>如果有更合适的类型,避免使用String</p>
</blockquote>
<p>string被设计成描述文本类型的数据,而且干得很好,本章主要讨论将string用于其它情况的错误用法</p>
<p><strong>string不能替代值类型</strong> 如果我们正在等待键盘的输入,或者从网络获取某个值,我们很方便的使用string作为接收类型,但是如果我们输入的是数字或者真假值的话,对应的int或boolean能更好的标识输入 虽然这条规则很明显,但是经常被违反</p>
<p><strong>string不能替代枚举</strong> 如<a href="https://www.jianshu.com/p/9cd61b89c79e">Item30:枚举</a>讨论的那样,对于静态常量使用枚举</p>
<p><strong>string不能替代聚合字符</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String compoundKey = className + <span class="string">&quot;#&quot;</span> + i.next();<span class="comment">//bad</span></span><br></pre></td></tr></table></figure>


<p>我们经常写上述代码,这样的写法有很多缺点.如果我们想使用某一部分字段需要解析字符串,很耗时而且容易出错.String提供的equals,compareTo等方法也不能使用</p>
<p>比较好的方式是写一个静态内部类来表示聚合字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CompoundKey</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> String next;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####Item 51: Beware the performance of string concatenation</p>
<blockquote>
<p>考虑字符连接(+)的性能 </p>
</blockquote>
<p>使用(+)能很方便的拼接若干个字符串,但是我们也要考虑到开销</p>
<p>如下两个代码都是拼接字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">statement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numItems(); i++)</span><br><span class="line">		result += lineForItem(i); <span class="comment">// String concatenation</span></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">statement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	StringBuilder b = <span class="keyword">new</span> StringBuilder(numItems() * LINE_WIDTH);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numItems(); i++)</span><br><span class="line">		b.append(lineForItem(i));</span><br><span class="line">	<span class="keyword">return</span> b.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当numItems()==100;lineForItem(i)返回80个长度的字符时,在作者的机器上方式二比方式一快85倍</p>
<p>如果我们需要拼接大量字符时,使用StringBuilder代替<br>#####Item 52: Refer to objects by their interfaces</p>
<blockquote>
<p>使用接口代替对象引用</p>
</blockquote>
<p>如果有一个合适的接口来描述当前类的时候使用这个接口来引用,如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Good - uses interface as type</span></span><br><span class="line">List&lt;Subscriber&gt; subscribers = <span class="keyword">new</span> Vector&lt;Subscriber&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad - uses class as type!</span></span><br><span class="line">Vector&lt;Subscriber&gt; subscribers = <span class="keyword">new</span> Vector&lt;Subscriber&gt;();</span><br></pre></td></tr></table></figure>
<p>如果你养成了这个习惯,那么你的代码将会更灵活<br>有几种情况不能使用接口<br>1.没有合适的接口声明<br>2.接口中没有想要的某个方法<br>3.使用的类集成自framework,并且是一个抽象类<br>#####Item 53: Prefer interfaces to reflection<br>使用接口代替反射</p>
<p>反射核心类java.lang.reflect提供了对加载类信息的访问</p>
<p>例如，Method.Invoke允许在任何类的任何对象上调用任何方法(受通常的安全约束)。 即使编译后的类不存在，也允许一个类使用另一个类。然而，这种力量是有代价的。</p>
<ul>
<li><p><strong>你不能在编译时检查出异常</strong> 如果你使用了对应的反射操作,在发生异常时,只有在运行时才能发现</p>
</li>
<li><p><strong>阅读性极差</strong></p>
</li>
<li><p><strong>性能有影响</strong> 使用反射比普通调用要慢些,因为受很多因素的影响,慢多少很难说,在作者的机器上,速度差在两倍到五十倍不止</p>
</li>
</ul>
<p>反射核心用在基于组件设计的应用,为了按需加载类,使用反射找到对应的类构造与否;普通应用尽量不要使用反射,找到代替的接口或者父类对象<br>#####Item 54: Use native methods judiciously<br>明智地使用本地方法</p>
<p>JNI允许Java调用C或C++写的本地方法</p>
<p>从历史上看，本地方法有三种主要用途。</p>
<p>1.它们提供了对特定于平台的设施的访问，例如注册表和文件锁。</p>
<p>2.他们提供了对旧代码库(Java想使用历史上C或C++写的库)</p>
<p>的访问，可以反过来提供对旧数据的访问。</p>
<p>3.使用本地方法用本地语言编写应用程序关键部分，以提高性能。</p>
<p>Java平台在不断发展,访问特定平台设施,使用Java提供的工具类就可做到,而且也不建议使用本地方法来提升程序性能</p>
<p>使用本地方法有严重的缺点</p>
<p>1.本地语言是不安全的,会受机器内存错误的影响</p>
<p>2.依赖于平台,不便于移植</p>
<p>3.本地代码很难调式</p>
<p>4.访问本地代码开销很大</p>
<p>5.本地代码不宜阅读</p>
<blockquote>
<p>总之,要再三思考是否使用本地代码,如果需要使用以前的代码库,请尽可能减少本地代码片段并加强测试,很小很小的本地代码错误将破坏你的整个程序<br>#####Item 55: Optimize judiciously<br>明智的优化</p>
</blockquote>
<p>有三个人人都应该知道的优化格言</p>
<blockquote>
<p>More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason—including blind stupidity.<br>—William A. Wulf [Wulf72]<br>更多的计算罪恶是以效率的名义犯下的(不一定要达到这一目的)，而不是因为任何其他单一的原因-包括盲目的愚蠢</p>
</blockquote>
<p>​                            </p>
<blockquote>
<p>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.<br>—Donald E. Knuth [Knuth74]<br>我们应该忽略小效率,大约百分之97的情况下,邪恶之源就是过早优化</p>
</blockquote>
<p>​                            </p>
<blockquote>
<p>We follow two rules in the matter of optimization:<br>Rule 1. Don’t do it.<br>Rule 2 (for experts only). Don’t do it yet—that is, not until you have a<br>perfectly clear and unoptimized solution.<br>—M. A. Jackson [Jackson75]<br>关于优化遵循如下两个原则:<br>原则1.别这样做<br>原则2.(仅对专家而言).还不要做,直到你找到一个清晰的解决方案或者一个未优化的解决办法</p>
</blockquote>
<p>不要为了性能而损坏架构,<strong>致力于写出好的程序而不是快的程序</strong>,如果一个好的程序还不够快,它的架构会允许优化.</p>
<p>这并不意味着当你的程序完后不需要优化,你应该在设计阶段就考虑到性能</p>
<p><strong>尽量避免影响性能的设计</strong>,已经实现好的组件很难在改变,尤其是API,数据结构,多方约定好的协议</p>
<p><strong>考虑好API使用效果</strong>,设计一个可变的类可能会导致后续使用中出现过多的深拷贝,造成对象分配的额外开销</p>
<p>API的设计对性能有很真实的影响,如java.awt.Component中的getSize()方法,每调用一次就会返回一个新的 Dimension 实例(JDK1.2版本已经修复),虽然分配一个实例的开销很小,但是成百上千次调用也会对程序有严重影响</p>
<p>幸运的是,好的API设计自然带来了好的性能</p>
<blockquote>
<p>总之,致力于写出好的程序,快随之而来 当做出一部分改变后就要测量代码的性能,对于Android来说内存,卡顿,anr等方面</p>
</blockquote>
<p>参考<a href="https://www.jianshu.com/p/829ed0e6010e">DDMS性能调优</a></p>
<hr>
<p>​<br>#####Item 56: Adhere to generally accepted naming conventions<br>遵循公共的命名规范,参考阿里巴巴发布的Android手册</p>
<hr>
<p><a href="https://www.jianshu.com/p/6bca1fc1945a">上一章:方法</a><br><a href="https://www.jianshu.com/p/009327a97ae9">下一章:异常</a></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第三章-类和接口)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3)/</url>
    <content><![CDATA[<h4 id="3-类和接口"><a href="#3-类和接口" class="headerlink" title="3. 类和接口"></a>3. 类和接口</h4><blockquote>
<p>类和接口是Java编程的核心<br>#####Item13 最小化类和成员变量的访问权限<br>信息隐藏与封装是程序设计的基本原则<br>通用经验是能让类或者变量不可访问就让它不可访问<br>四种访问权限:</p>
</blockquote>
<ul>
<li>private<br>只在它声明的地方可用</li>
<li>package-private<br>同一个包内可用</li>
<li>protected<br>同一个包或子类可用</li>
<li>public<br>任何地方可用<blockquote>
<p>公共类不应包含公共字段。确保static final引用的对象是不可变的。<br>绝不可以用private static final来声明一个数组对象</p>
</blockquote>
</li>
</ul>
<h5 id="Item14-用公共方法提供公共字段"><a href="#Item14-用公共方法提供公共字段" class="headerlink" title="Item14 用公共方法提供公共字段"></a>Item14 用公共方法提供公共字段</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.x = x;</span><br><span class="line">		<span class="keyword">this</span>.y = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">this</span>.x = x; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">this</span>.y = y; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item15-最小化可变性"><a href="#Item15-最小化可变性" class="headerlink" title="Item15 最小化可变性"></a>Item15 最小化可变性</h5><p>对象始终不变的类比可变的更安全和好用,如String<br>我们设计不可变对象时应遵循如下准则:</p>
<ul>
<li>不要提供任何方法来改变对象的状态</li>
<li>确保类不可继承</li>
<li>所有的字段使用private final修饰</li>
<li>确保不要让类中的可变对象访问,使用深拷贝替代<br>如果一个类确实可变,也要保证其它地方尽可能不变,TimerTask是很好的例子<br>#####Item16 组合和继承,优先使用组合<blockquote>
<p>继承虽然有很多好处,但是违背了封装性,暴露了父类的实现细节<br>#####Item17 专用于继承的设计，否则禁止继承<br>未能理解,后续补充<br>#####Item18 接口和抽象类之间倾向于接口<br>Java提供了两种机制来提供多个类型定义的实现:接口和抽象类</p>
</blockquote>
</li>
</ul>
<p>最明显的区别在于抽象类允许某些方法的实现,更重要的区别在于一个类使用了抽象类的方式来定义,则这个类必须是抽象类的子类.因为Java只允许单一继承，因此对抽象类的这种限制严重影响了它们作为类型定义的使用 </p>
<ul>
<li>已经存在的类可以很容易的实现一个新的接口<br>比如实现Comparable接口</li>
<li>接口是定义混合器的理想选择<br>比如为一个主要类型的类添加比较方法,可通过实现Comparable接口实现实例之间的排序</li>
</ul>
<p>有一个特例是抽象类比接口更加易用,如果注重程序的易用性而不是灵活性则可以考虑抽象类<br>#####Item19 仅使用接口定义类型<br>当一个类实现了一个接口,这个接口是为类的实例服务的而不是为了其他目的</p>
<p>所以有一种常量接口尽量不要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhysicalConstants</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Avogadro&#x27;s number (1/mol)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> AVOGADROS_NUMBER = <span class="number">6.02214199e23</span>;</span><br><span class="line">	<span class="comment">// Boltzmann constant (J/K)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> BOLTZMANN_CONSTANT = <span class="number">1.3806503e-23</span>;</span><br><span class="line">	<span class="comment">// Mass of the electron (kg)</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> ELECTRON_MASS = <span class="number">9.10938188e-31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果有这种常量需要使用,可以把它定义在与之关联的类里面</p>
<h5 id="Item20-用继承来替代复合类-原单词-tagged-classes"><a href="#Item20-用继承来替代复合类-原单词-tagged-classes" class="headerlink" title="Item20 用继承来替代复合类(原单词: tagged classes)"></a>Item20 用继承来替代复合类(原单词: tagged classes)</h5><p>偶尔会遇到一个类的实例包含了多种不同的类别,如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad Tagged class - vastly inferior to a class hierarchy!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figure</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">Shape</span> </span>&#123; RECTANGLE, CIRCLE &#125;;</span><br><span class="line">	<span class="comment">// Tag field - the shape of this figure</span></span><br><span class="line">	<span class="keyword">final</span> Shape shape;</span><br><span class="line">	<span class="comment">// These fields are used only if shape is RECTANGLE</span></span><br><span class="line">	<span class="keyword">double</span> length;</span><br><span class="line">	<span class="keyword">double</span> width;</span><br><span class="line">	<span class="comment">// This field is used only if shape is CIRCLE</span></span><br><span class="line">	<span class="keyword">double</span> radius;</span><br><span class="line">	<span class="comment">// Constructor for circle</span></span><br><span class="line">	Figure(<span class="keyword">double</span> radius) &#123;</span><br><span class="line">		shape = Shape.CIRCLE;</span><br><span class="line">		<span class="keyword">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Constructor for rectangle</span></span><br><span class="line">	Figure(<span class="keyword">double</span> length, <span class="keyword">double</span> width) &#123;</span><br><span class="line">		shape = Shape.RECTANGLE;</span><br><span class="line">		<span class="keyword">this</span>.length = length;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">switch</span>(shape) &#123;</span><br><span class="line">		<span class="keyword">case</span> RECTANGLE:</span><br><span class="line">			<span class="keyword">return</span> length * width;</span><br><span class="line">		<span class="keyword">case</span> CIRCLE:</span><br><span class="line">			<span class="keyword">return</span> Math.PI * (radius * radius);</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>优化如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Class hierarchy replacement for a tagged class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Figure</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">double</span> radius;</span><br><span class="line">	Circle(<span class="keyword">double</span> radius) &#123; <span class="keyword">this</span>.radius = radius; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Math.PI * (radius * radius); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">double</span> length;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">double</span> width;</span><br><span class="line">	Rectangle(<span class="keyword">double</span> length, <span class="keyword">double</span> width) &#123;</span><br><span class="line">		<span class="keyword">this</span>.length = length;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> length * width; &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5 id="Item21-使用函数对象表示策略"><a href="#Item21-使用函数对象表示策略" class="headerlink" title="Item21  使用函数对象表示策略"></a>Item21  使用函数对象表示策略</h5><p>直译过来有点不好理解,大意是对于多个类都要使用的策略(或用方法表示),采用接口来实现</p>
<p>如一个类需要比较方法,另一个类也需要,则抽象出一个Comparable接口来给各个类通用</p>
<h5 id="Item22-嵌套类的使用"><a href="#Item22-嵌套类的使用" class="headerlink" title="Item22 嵌套类的使用"></a>Item22 嵌套类的使用</h5><p>有四种嵌套类,分别是静态成员类、非静态成员类、匿名内部类和本地类<br>除了第一个都是内部类</p>
<ul>
<li>静态成员类<br>可以访问外部类的私有属性</li>
<li>非静态成员类<br>同静态成员类,区别在于没有static修饰<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyIterator();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//典型用法</span></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>匿名内部类<br>不用声明,常用于监听器,随用随销</li>
<li>本地类<br>略 未能理解,后续补充,欢迎留言增益知识<blockquote>
<p>如果成员类需要外部类的引用,则使用非静态成员类,否则使用静态成员类</p>
</blockquote>
</li>
</ul>
<hr>
<p><a href="https://www.jianshu.com/p/e9933b7e9009">上一章:Object的方法</a><br><a href="https://www.jianshu.com/p/dd9c5d7cdaa5">下一章:泛型</a> </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第二章-通用方法)</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95)/</url>
    <content><![CDATA[<h4 id="2-所有对象都有的方法-equals-hashCode…"><a href="#2-所有对象都有的方法-equals-hashCode…" class="headerlink" title="2.所有对象都有的方法(equals,hashCode…)"></a>2.所有对象都有的方法(equals,hashCode…)</h4><h5 id="Item8-遵循equals的通用规则"><a href="#Item8-遵循equals的通用规则" class="headerlink" title="Item8 遵循equals的通用规则"></a>Item8 遵循equals的通用规则</h5><ul>
<li>反射性:if x != null ,x.equals(x) must return true; </li>
<li>对称性:if x != null &amp;&amp; y != null ,x.equals(y) is true; y.equals(x) must return true</li>
<li>传递性:if x != null &amp;&amp; y != null &amp;&amp; z != null ,x.equals(y) is true; y.equals(z) is true ; x.equals(z) must return true</li>
<li>一致性:不管调用多少次equals方法,返回的值一致</li>
<li>if x != null,x.equals(null) must return false<blockquote>
<p>除非有数学上的倾向要违背这些,否则必要遵循<br>当父类和子类都有自己的equals方法时,某些场景会违背这些原则,非要使用equals的话,建议将子类替换成组合的方式<br>当自己重写equals方法问自己三个问题:它是对称性的吗?是可传递的吗?是一致的吗?<br>#####Item9 重写equals时始终重写hashCode<br>重写equals而没有重写hashCode会导致用到hash值的类出现bug,如HashMap,HashSet..<br>下面是使用Object在JavaSE6中的规则:</p>
</blockquote>
</li>
<li>在一次程序操作中的同一个对象,任何时候hashCode保持一致</li>
<li>如果两个对象根据equals(Object)方法相等，那么对这两个对象中的每个对象调用hashCode方法都必须产生相同的整数结果</li>
<li>如果两个对象根据equals(Object)方法不相等，那么对这两个对象中的每个对象没必要产生相同的整数结果,但是有利于提高HashTable的性能<blockquote>
<p>生成hashCode时,属性中可计算的则直接参与计算,不可计算的字段调用它的hashCode()参与计算</p>
</blockquote>
</li>
</ul>
<h5 id="Item10-始终重写toString方法"><a href="#Item10-始终重写toString方法" class="headerlink" title="Item10 始终重写toString方法"></a>Item10 始终重写toString方法</h5><blockquote>
<p>不重写的话会得到Object@163b91一串无意义的打印<br>最好是打印出自己需要的关键字段信息</p>
</blockquote>
<h5 id="Item11-明智的重写clone方法"><a href="#Item11-明智的重写clone方法" class="headerlink" title="Item11 明智的重写clone方法"></a>Item11 明智的重写clone方法</h5><blockquote>
<p>使用的较少,理解不深,后续补充</p>
</blockquote>
<h5 id="Item12-实现-Comparable接口"><a href="#Item12-实现-Comparable接口" class="headerlink" title="Item12 实现 Comparable接口"></a>Item12 实现 Comparable接口</h5><p>对于需要排序和比较的对象,实现此接口定义自己的排序规则</p>
<hr>
<p><a href="https://www.jianshu.com/p/96ba1f9da2b6">上一章:创建和销毁对象</a><br><a href="https://www.jianshu.com/p/d8e8a6916325">下一章:类和接口</a> </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第五章-枚举与注解)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3)/</url>
    <content><![CDATA[<p>Java1.5中提供的两种新类型</p>
<h5 id="Item30-用枚举替代int型常量"><a href="#Item30-用枚举替代int型常量" class="headerlink" title="Item30: 用枚举替代int型常量"></a>Item30: 用枚举替代int型常量</h5><p>枚举:一系列常量类型的集合<br>没有枚举前大量定义的常量如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The int enum pattern - severely deficient!</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_FUJI = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_PIPPIN = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APPLE_GRANNY_SMITH = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_NAVEL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_TEMPLE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORANGE_BLOOD = <span class="number">2</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>首先调试不方便,我们只会打印出数字,然后回归代码<br>其次没有命名空间做区别,命名累赘<br>使用枚举后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Apple</span> </span>&#123; FUJI, PIPPIN, GRANNY_SMITH &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Orange</span> </span>&#123; NAVEL, TEMPLE, BLOOD &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再来看一个星球的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">	MERCURY(<span class="number">3.302e+23</span>, <span class="number">2.439e6</span>),</span><br><span class="line">	VENUS (<span class="number">4.869e+24</span>, <span class="number">6.052e6</span>),</span><br><span class="line">	EARTH (<span class="number">5.975e+24</span>, <span class="number">6.378e6</span>),</span><br><span class="line">	MARS (<span class="number">6.419e+23</span>, <span class="number">3.393e6</span>),</span><br><span class="line">	JUPITER(<span class="number">1.899e+27</span>, <span class="number">7.149e7</span>),</span><br><span class="line">	SATURN (<span class="number">5.685e+26</span>, <span class="number">6.027e7</span>),</span><br><span class="line">	URANUS (<span class="number">8.683e+25</span>, <span class="number">2.556e7</span>),</span><br><span class="line">	NEPTUNE(<span class="number">1.024e+26</span>, <span class="number">2.477e7</span>);</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass; <span class="comment">// In kilograms</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> radius; <span class="comment">// In meters</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> surfaceGravity; <span class="comment">// In m / s^2</span></span><br><span class="line">	<span class="comment">// Universal gravitational constant in m^3 / kg s^2</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> G = <span class="number">6.67300E-11</span>;</span><br><span class="line">	<span class="comment">// Constructor</span></span><br><span class="line">	Planet(<span class="keyword">double</span> mass, <span class="keyword">double</span> radius) &#123;</span><br><span class="line">		<span class="keyword">this</span>.mass = mass;</span><br><span class="line">		<span class="keyword">this</span>.radius = radius;</span><br><span class="line">		surfaceGravity = G * mass / (radius * radius);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mass</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mass; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">radius</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> radius; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceGravity</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> surfaceGravity; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">surfaceWeight</span><span class="params">(<span class="keyword">double</span> mass)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> mass * surfaceGravity; <span class="comment">// F = ma</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再来看一个算数的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">	PLUS &#123; <span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;<span class="keyword">return</span> x + y;&#125; &#125;,</span><br><span class="line">	MINUS &#123; <span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;<span class="keyword">return</span> x - y;&#125; &#125;,</span><br><span class="line">	TIMES &#123; <span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;<span class="keyword">return</span> x * y;&#125; &#125;,</span><br><span class="line">	DIVIDE &#123; <span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;<span class="keyword">return</span> x / y;&#125; &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结:枚举比int型常量更安全和具有可读性</p>
</blockquote>
<h5 id="Item31-Use-instance-fields-instead-of-ordinals-使用实例字段代替序号"><a href="#Item31-Use-instance-fields-instead-of-ordinals-使用实例字段代替序号" class="headerlink" title="Item31: Use instance fields instead of ordinals(使用实例字段代替序号)"></a>Item31: Use instance fields instead of ordinals(使用实例字段代替序号)</h5><p>所有的枚举都有<br>ordinal 方法(从0开始计数),如果我们想用序号的int值(从1开始计数),不要直接修改ordinal 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Ensemble</span> </span>&#123;</span><br><span class="line">	SOLO, DUET, TRIO, QUARTET, QUINTET,</span><br><span class="line">	SEXTET, SEPTET, OCTET, NONET, DECTET;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ordinal() + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然上述代码能正常使用,但是却会导致一场噩梦<br>如果我们改变了枚举中的常量顺序,之前的序号就会一团糟<br>优化代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Ensemble</span> </span>&#123;</span><br><span class="line">	SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>), QUARTET(<span class="number">4</span>), QUINTET(<span class="number">5</span>),</span><br><span class="line">	SEXTET(<span class="number">6</span>), SEPTET(<span class="number">7</span>), OCTET(<span class="number">8</span>), DOUBLE_QUARTET(<span class="number">8</span>),</span><br><span class="line">	NONET(<span class="number">9</span>), DECTET(<span class="number">10</span>), TRIPLE_QUARTET(<span class="number">12</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfMusicians;</span><br><span class="line">	</span><br><span class="line">	Ensemble(<span class="keyword">int</span> size) &#123; </span><br><span class="line">		<span class="keyword">this</span>.numberOfMusicians = size; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> numberOfMusicians; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item32-Use-EnumSet-instead-of-bit-fields-用EnumSet替代位字段"><a href="#Item32-Use-EnumSet-instead-of-bit-fields-用EnumSet替代位字段" class="headerlink" title="Item32: Use EnumSet instead of bit fields(用EnumSet替代位字段)"></a>Item32: Use EnumSet instead of bit fields(用EnumSet替代位字段)</h5><p>如我们有一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bit field enumeration constants - OBSOLETE!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STYLE_BOLD = <span class="number">1</span> &lt;&lt; <span class="number">0</span>; <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STYLE_ITALIC = <span class="number">1</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STYLE_UNDERLINE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>; <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STYLE_STRIKETHROUGH = <span class="number">1</span> &lt;&lt; <span class="number">3</span>; <span class="comment">// 8</span></span><br><span class="line">  <span class="comment">// Parameter is bitwise OR of zero or more STYLE_ constants</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyStyles</span><span class="params">(<span class="keyword">int</span> styles)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//使用</span></span><br><span class="line">  text.applyStyles(STYLE_BOLD | STYLE_ITALIC);</span><br></pre></td></tr></table></figure>
<p>用EnumSet优化如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EnumSet - a modern replacement for bit fields</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Style</span> </span>&#123; BOLD, ITALIC, UNDERLINE, STRIKETHROUGH &#125;</span><br><span class="line">	<span class="comment">// Any Set could be passed in, but EnumSet is clearly best</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyStyles</span><span class="params">(Set&lt;Style&gt; styles)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用</span></span><br><span class="line">  text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));</span><br></pre></td></tr></table></figure>
<h5 id="Item33-Use-EnumMap-instead-of-ordinal-indexing-使用EnumMap代替顺序索引"><a href="#Item33-Use-EnumMap-instead-of-ordinal-indexing-使用EnumMap代替顺序索引" class="headerlink" title="Item33: Use EnumMap instead of ordinal indexing(使用EnumMap代替顺序索引)"></a>Item33: Use EnumMap instead of ordinal indexing(使用EnumMap代替顺序索引)</h5><p><a href="https://developer.android.google.cn/reference/java/util/EnumSet.html#of(E,%20E)">EnumSet/EnumMap详解</a></p>
<h5 id="Item34-使用接口提升枚举的扩展性"><a href="#Item34-使用接口提升枚举的扩展性" class="headerlink" title="Item34: 使用接口提升枚举的扩展性"></a>Item34: 使用接口提升枚举的扩展性</h5><p>code say everything<br>普通操作 加减乘除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Emulated extensible enum using an interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BasicOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">	PLUS(<span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	MINUS(<span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	TIMES(<span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	DIVIDE(<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">	BasicOperation(String symbol) &#123;</span><br><span class="line">		<span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> symbol;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现需要扩展取余,异或等方法,不要再BasicOperation 中新加枚举,而是实现公共接口Operation </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Emulated extension enum</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ExtendedOperation</span> <span class="keyword">implements</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">	EXP(<span class="string">&quot;^&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Math.pow(x, y);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	REMAINDER(<span class="string">&quot;%&quot;</span>) &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">apply</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> x % y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String symbol;</span><br><span class="line">	ExtendedOperation(String symbol) &#123;</span><br><span class="line">		<span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> symbol;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item36-始终使用override注解"><a href="#Item36-始终使用override注解" class="headerlink" title="Item36: 始终使用override注解"></a>Item36: 始终使用override注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你能找到这个bug吗?</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bigram</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> first;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> second;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bigram</span><span class="params">(<span class="keyword">char</span> first, <span class="keyword">char</span> second)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.first = first;</span><br><span class="line">		<span class="keyword">this</span>.second = second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Bigram b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> b.first == first &amp;&amp; b.second == second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">31</span> * first + second;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Set&lt;Bigram&gt; s = <span class="keyword">new</span> HashSet&lt;Bigram&gt;();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>; ch &lt;= <span class="string">&#x27;z&#x27;</span>; ch++)</span><br><span class="line">			  s.add(<span class="keyword">new</span> Bigram(ch, ch));</span><br><span class="line">		System.out.println(s.size());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>理论上我们希望打印26,因为HashSet没有重复元素,但是得到的值是260<br>因为没有override equals&amp;hashCode方法,所以默认是使用的”==”比较的地址,得到的都是不同的对象<br>修复如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Bigram b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b.first == first &amp;&amp; b.second == second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">31</span> * first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Item37-使用标记接口定义类型-待补充"><a href="#Item37-使用标记接口定义类型-待补充" class="headerlink" title="Item37: 使用标记接口定义类型(待补充)"></a>Item37: 使用标记接口定义类型(待补充)</h5><ul>
<li>标记接口:只为了标记某一种类型<br>如 Serializable 接口,表明可将实例序列化<br>优点:</li>
</ul>
<p>1.标记接口定义了一种类型<br>2.可用于任何扩展的子类</p>
<ul>
<li>标记注解:<br>优点:</li>
</ul>
<p>1.描述信息更丰富,可在使用后添加方法<br>2.位于FrameWork层,各个应用使用同一套规则</p>
<hr>
<p><a href="https://www.jianshu.com/p/dd9c5d7cdaa5">上一章:泛型</a><br><a href="https://www.jianshu.com/p/6bca1fc1945a">下一章:方法</a></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第八章-异常)</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%BC%82%E5%B8%B8)/</url>
    <content><![CDATA[<p>高效使用异常指南</p>
<h5 id="Item-57-Use-exceptions-only-for-exceptional-conditions"><a href="#Item-57-Use-exceptions-only-for-exceptional-conditions" class="headerlink" title="Item 57: Use exceptions only for exceptional conditions"></a>Item 57: Use exceptions only for exceptional conditions</h5><p>只有在异常条件下才使用异常</p>
<p>考虑如下的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad !! don&#x27;t do this</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">		range[i++].climb();</span><br><span class="line">&#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用异常条件来终止遍历操作是非常错误的做法</p>
<p>使用如下代码代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Mountain m : range)</span><br><span class="line">	m.climb();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>名副其实,异常只能用在异常条件下,而不能用于流程控制</p>
</blockquote>
<hr>
<h5 id="Item-58-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors"><a href="#Item-58-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors" class="headerlink" title="Item 58: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors"></a>Item 58: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</h5><p>对可恢复条件使用检查异常，对程序错误使用运行时异常。</p>
<p>Java提供了三种异常:checked exceptions,runtime exceptions and errors.大多数程序员对何时使用何种异常有困惑,有如下几种原则作参考</p>
<p>决定使用检查异常或非检查异常的原则是:<strong>调用方可以合理的修复异常</strong>,现如今的IDE工具如eclipse或Android studio会自动提示此类异常,自动填充try catch</p>
<p>非检查异常有两种:runtime exceptions and errors</p>
<p><strong>用运行时异常(runtime exceptions)识程序错误</strong>,绝大多数的运行时异常都表明违反了某种前提条件,如ArrayIndexOutOfBoundsException数组越界</p>
<p>有一个普遍的约定是error用于JVM,所以所有的非检查异常都应该继承自 RuntimeException </p>
<blockquote>
<p>常见的非检查异常runtime exception</p>
<ul>
<li>NullPointerException, 空指针异常 </li>
<li>ArithmeticException, 算术异常</li>
<li>ClassCastException, 类型强制转换异常</li>
<li>IllegalArgumentException, 传递非法参数异常</li>
</ul>
</blockquote>
<hr>
<h5 id="Item-59-Avoid-unnecessary-use-of-checked-exceptions"><a href="#Item-59-Avoid-unnecessary-use-of-checked-exceptions" class="headerlink" title="Item 59: Avoid unnecessary use of checked exceptions"></a>Item 59: Avoid unnecessary use of checked exceptions</h5><p>避免过度使用检查异常<br>如果一个方法有多个检查异常,调用者会包裹多个catch来处理异常,这里没有一个绝对的准则,可以使用if语句把条件先过滤一遍而避免抛异常</p>
<hr>
<h5 id="Item-60-Favor-the-use-of-standard-exceptions"><a href="#Item-60-Favor-the-use-of-standard-exceptions" class="headerlink" title="Item 60: Favor the use of standard exceptions"></a>Item 60: Favor the use of standard exceptions</h5><p>使用常用异常<br>当需要抛出一个异常时,尽量使用Java平台提供好的异常,因为大家都知道什么意思</p>
<hr>
<h5 id="Item-61-Throw-exceptions-appropriate-to-the-abstraction"><a href="#Item-61-Throw-exceptions-appropriate-to-the-abstraction" class="headerlink" title="Item 61: Throw exceptions appropriate to the abstraction"></a>Item 61: Throw exceptions appropriate to the abstraction</h5><p>抛出更合适的抽象异常</p>
<p>当抛出和任务不相关的异常时容易让人困惑,当抛出一个低级的异常时,这种情况经常发生,它不仅仅令人困惑,也污染了上层的调用</p>
<p>为了避免这个问题，上层应该捕获较低级别的异常，并在它们的位置上抛出可以用更高级别的抽象来解释的异常,如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exception Translation</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">// Use lower-level abstraction to do our bidding</span></span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">catch</span>(LowerLevelException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> HigherLevelException(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更具体的例子在List<E>的方法中</E></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IndexOutOfBoundsException if the index is out of range</span></span><br><span class="line"><span class="comment">* (&#123;<span class="doctag">@code</span> index &lt; 0 || index &gt;= size()&#125;).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	ListIterator&lt;E&gt; i = listIterator(index);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> i.next();</span><br><span class="line">	&#125; <span class="keyword">catch</span>(NoSuchElementException e) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Index: &quot;</span> + index);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种特殊的异常处理方式被称为”异常链”,但是也不应该过度使用</p>
<p>我们也可以在在上层调用中抛出底层错误的原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exception Chaining</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	... <span class="comment">// Use lower-level abstraction to do our bidding</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (LowerLevelException cause) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> HigherLevelException(cause);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最好的方式还是尽量在底层避免异常,如果不能处理在考虑”异常链”的方式</p>
</blockquote>
<hr>
<h5 id="Item-62-Document-all-exceptions-thrown-by-each-method"><a href="#Item-62-Document-all-exceptions-thrown-by-each-method" class="headerlink" title="Item 62: Document all exceptions thrown by each method"></a>Item 62: Document all exceptions thrown by each method</h5><p>为每个方法抛出的异常添加文档注释</p>
<p>对于检查异常,要说明前置条件,并用@throws标记合适的异常,不要为了图简单直接 @throws Exception</p>
<p>如果一个异常被多个方法抛出,并且是相同的原因,则不要在方法上注释,而是要在类上添加异常注释</p>
<hr>
<h5 id="Item-63-Include-failure-capture-information-in-detail-messages"><a href="#Item-63-Include-failure-capture-information-in-detail-messages" class="headerlink" title="Item 63: Include failure-capture information in detail messages"></a>Item 63: Include failure-capture information in detail messages</h5><p>打印出异常的详细信息以便于分析</p>
<hr>
<h5 id="Item-64-Strive-for-failure-atomicity"><a href="#Item-64-Strive-for-failure-atomicity" class="headerlink" title="Item 64: Strive for failure atomicity"></a>Item 64: Strive for failure atomicity</h5><p>保证错误的原子性(调用一千次,输出一样)</p>
<p>即使一个异常发生了,我们也希望对象能正常使用</p>
<p>有几种方式可以达到这一点,最简单的就是创建不可变的对象,如果一个对象是不可变的,原子性也随之而来</p>
<p>对于可变对象,常见的方式是检查参数的合法性(Item 38)</p>
<p>第三种方式是发生异常后,回滚异常状态为使用前的初始状态</p>
<p>最后一种方式使用拷贝来避免发生错误时改变原来对象的状态,如Collections.sort,排序方法会先转成array数组来排序,本来是为了提高性能,额外的如果发生了错误不会改变原集合的状态</p>
<p>虽然原子性能保证,但是实际使用中并不总是能达到满意的状态,如两个线程同时修改一个对象,没有同步的情况下,引发了currentModificationException.这时如果恢复对象的状态依然不能使程序正确运行</p>
<blockquote>
<p>作为一种规则来讲,当发生异常时总能确保当前对象的状态,可惜目前很多API都没有遵守</p>
</blockquote>
<hr>
<h5 id="Item-65-Don’t-ignore-exceptions"><a href="#Item-65-Don’t-ignore-exceptions" class="headerlink" title="Item 65: Don’t ignore exceptions"></a>Item 65: Don’t ignore exceptions</h5><p>不要忽略异常</p>
<p>这条建议看似很明显,但是值得重复,当API的设计者声明了一种异常,他们是为了告诉你什么,**不要忽略它!**很容易包裹一个空的try catch语句就不管这个异常了.如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">catch</span> (SomeException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>空处理并不是抛异常的初衷,目的是为了强制解决这个异常条件</strong>.忽略异常就像忽略火警广播,有人关了广播导致其他人并不知道发生了火灾.如果确实需要一个空的处理,需要详细说明为何空处理是合适的</p>
<hr>
<p><a href="https://www.jianshu.com/p/b188135338f4">上一章:通用原则</a></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第六章-方法)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%96%B9%E6%B3%95)/</url>
    <content><![CDATA[<p>这一章介绍方法设计的几个方面:如何对待参数和返回值,如何设计方法签名,如何注释方法</p>
<h5 id="Item38-检查参数的合法性"><a href="#Item38-检查参数的合法性" class="headerlink" title="Item38: 检查参数的合法性"></a>Item38: 检查参数的合法性</h5><p>大部分使用的方法参数都有一定的限制,如不为null,size&gt;0等<br>通用的原则就是预防大于整改,提前发现错误可以更快的规避问题,而不是在程序运行中发生</p>
<p>对于公共方法，使用Javadoc@块标记,来记录在违反参数值限制时抛出的异常(Item62)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns a BigInteger whose value is (this mod m). This method</span></span><br><span class="line"><span class="comment">* differs from the remainder method in that it always returns a</span></span><br><span class="line"><span class="comment">* non-negative BigInteger.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> m the modulus, which must be positive</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> this mod m</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ArithmeticException if m is less than or equal to 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">mod</span><span class="params">(BigInteger m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m.signum() &lt;= <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">&quot;Modulus &lt;= 0: &quot;</span> + m);</span><br><span class="line">	... <span class="comment">// Do the computation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于私有的方法则使用断言</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Private helper function for a recursive sort</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">long</span> a[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">assert</span> a != <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">assert</span> offset &gt;= <span class="number">0</span> &amp;&amp; offset &lt;= a.length;</span><br><span class="line">	<span class="keyword">assert</span> length &gt;= <span class="number">0</span> &amp;&amp; length &lt;= a.length - offset;</span><br><span class="line">	... <span class="comment">// Do the computation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>assert在实际项目中使用的很少,更多的还是使用的if判断</p>
<blockquote>
<p>每次写一个方法或者构造函数的时候,在方法的开头考虑参数的合法性是必不可少的<br>#####Item39:  必要的时候使用拷贝对象<br> Java是一门安全的语言,即使在Java语言中,也要假设用户正想方设法的破坏你的程序.除了少部分人想破坏系统的安全性,大部分问题都是编程人员可以控制的<br>虽然没有对象的帮助,另一个类不太可能改变对象的内部状态,但偶尔也有疏忽的地方</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个不可变的周期类</span></span><br><span class="line"><span class="comment">// Broken &quot;immutable&quot; time period class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Period</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Date start;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Date end;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> start the beginning of the period</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> end the end of the period; must not precede start</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> IllegalArgumentException if start is after end</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> NullPointerException if start or end is null</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (start.compareTo(end) &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">				start + <span class="string">&quot; after &quot;</span> + end);</span><br><span class="line">		<span class="keyword">this</span>.start = start;</span><br><span class="line">		<span class="keyword">this</span>.end = end;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> start;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> end;</span><br><span class="line">	&#125;</span><br><span class="line">	... <span class="comment">// Remainder omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中Date对象是可变的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Date start = <span class="keyword">new</span> Date();</span><br><span class="line">Date end = <span class="keyword">new</span> Date();</span><br><span class="line">Period p = <span class="keyword">new</span> Period(start, end);</span><br><span class="line">end.setYear(<span class="number">78</span>); <span class="comment">// 修改了p的内部状态</span></span><br></pre></td></tr></table></figure>
<p>为了保护对象的状态,我们需要在构造函数中对可变参数执行拷贝防御</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Repaired constructor - makes defensive copies of parameters</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.start = <span class="keyword">new</span> Date(start.getTime());</span><br><span class="line">	<span class="keyword">this</span>.end = <span class="keyword">new</span> Date(end.getTime());</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.start.compareTo(<span class="keyword">this</span>.end) &gt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(start +<span class="string">&quot; after &quot;</span>+ end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Repaired accessors - make defensive copies of internal fields</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Date(start.getTime());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Date(end.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里没有使用clone方法,因为Date有其它不可信任的子类</p>
</blockquote>
<p>经验上讲,在内部尽量不要使用可变的类,如Date,可用long型替代Date.getTime()</p>
<blockquote>
<p>总结:如果一个类调用了或返回可变的对象,则需要用拷贝对象防御,如果很信任调用者不会修改类的内部状态,则需要有一份警告文档提示调用者不能修改类的状态<br>#####Item 40: 如何设计方法</p>
</blockquote>
<ul>
<li>选择一个合适的方法名称<br>你的主要目标是设计一个利于理解的方法名,次要目标是方法名称之间保持协调性,如向数据库中插入一条数据,有的使用addXX,有的使用setXX,有的使用insertXX,尽量保持统一</li>
<li>不要过分的使用方法<br>太多的方法容易使一个类难于维护和测试,只要当它需要经常调用的时候才考虑提出一个方法,否则就不管它</li>
<li>避免参数长的方法<br>尽量保持在四个参数或以下<br>有三种方式避免长参数</li>
</ul>
<p>1.提出更多的方法<br>2.使用辅助类保存这些参数<br>3.使用建造者模式(Builder)</p>
<ul>
<li>对于传入的参数,有接口可以传就使用接口<br>如需要传入HashMap 则在方法中将参数类型改为Map 避免使用者只能使用HashMap,也可以传入其它Map接口的子类型</li>
<li>对于布尔型参数,使用枚举更合适<br>例如，您可能有一个带有静态工厂的温度计类型( Thermometer 类)，其值为枚举：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">TemperatureScale</span> </span>&#123; FAHRENHEIT, CELSIUS &#125;</span><br></pre></td></tr></table></figure>
Thermometer.newInstance(TemperatureScale.CELSIUS)不仅比Thermometer.newInstance(true)更有意义，而且可以在将来的发行版中将Kelvin添加到TemperatureScale，而不需要 在Thermometer 类中增加一个新的静态工厂方法<h5 id="Item41-谨慎地使用重载"><a href="#Item41-谨慎地使用重载" class="headerlink" title="Item41: 谨慎地使用重载"></a>Item41: 谨慎地使用重载</h5>看如下的例子,我们想区分放进去的是List或者set或者不知道什么类型的集合,想一下它会如何打印</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionClassifier</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Set&lt;?&gt; s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Set&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(List&lt;?&gt; lst)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;List&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Unknown Collection&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Collection&lt;?&gt;[] collections = &#123;</span><br><span class="line">		<span class="keyword">new</span> HashSet&lt;String&gt;(),</span><br><span class="line">		<span class="keyword">new</span> ArrayList&lt;BigInteger&gt;(),</span><br><span class="line">		<span class="keyword">new</span> HashMap&lt;String, String&gt;().values()</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (Collection&lt;?&gt; c : collections)</span><br><span class="line">	System.out.println(classify(c));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它会顺序打印”Set”,”List”,”Unknown Collection”吗?不,它会打印三次”Unknown Collection” 原因在于重载方法是在编译时执行,所以会以Collection&lt;?&gt;为准</p>
<blockquote>
<p>我们应该避免使用相同参数数量的重载方法,使机器不懂,自己更易混淆<br>#####Item 42: 谨慎的使用可变参数<br>举一个例子</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> arg : args)</span><br><span class="line">		sum += arg;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sum(1,2,3) –&gt; 6<br>sum() –&gt; 0</p>
<blockquote>
<p>暂略<br>#####Item 43: Return empty arrays or collections, not nulls<br>像如下的代码很常见</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cheese&gt; cheesesInStock = ...;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an array containing all of the cheeses in the shop,</span></span><br><span class="line"><span class="comment"> * or null if no cheeses are available for purchase.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheeses() &#123;</span><br><span class="line">	<span class="keyword">if</span> (cheesesInStock.size() == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	...</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<p>调用者很可能粗心大意忘记判null导致异常,也许很多年之后才会发现<br>有人说返回null避免了内存开销,首先你要证明是这段代码导致的性能问题,其次我们可以使用不可变的静态常量声明一个空集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The right way to return an array from a collection</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Cheese&gt; cheesesInStock = ...;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cheese[] EMPTY_CHEESE_ARRAY = <span class="keyword">new</span> Cheese[<span class="number">0</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> an array containing all of the cheeses in the shop.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Cheese[] getCheeses() &#123;</span><br><span class="line">	<span class="keyword">if</span>(cheesesInStock.size() &lt;= <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cheese&gt; <span class="title">getCheeseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (cheesesInStock.isEmpty())</span><br><span class="line">	<span class="keyword">return</span> Collections.emptyList(); <span class="comment">// Always returns same list</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Cheese&gt;(cheesesInStock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总之,使用集合或数组的任何情况下都不能返回null</p>
<h5 id="Item-44-Write-doc-comments-for-all-exposed-API-elements"><a href="#Item-44-Write-doc-comments-for-all-exposed-API-elements" class="headerlink" title="Item 44: Write doc comments for all exposed API elements"></a>Item 44: Write doc comments for all exposed API elements</h5><p>为所有暴露出去的API写文档注释</p>
<hr>
<p><a href="https://www.jianshu.com/p/9cd61b89c79e">上一章:枚举和注解</a><br><a href="https://www.jianshu.com/p/b188135338f4">下一章:通用原则</a>          </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第四章-泛型)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%B3%9B%E5%9E%8B)/</url>
    <content><![CDATA[<h4 id="4-泛型"><a href="#4-泛型" class="headerlink" title="4. 泛型"></a>4. 泛型</h4><p>在JDK1.5中加入了泛型,类型不正确将在编译期间知道,而不是在运行时导致异常错误</p>
<h5 id="Item23-不要使用原始类型"><a href="#Item23-不要使用原始类型" class="headerlink" title="Item23 不要使用原始类型"></a>Item23 不要使用原始类型</h5><p>例如当使用到集合的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;bad</span><br><span class="line">private final Collection stamps &#x3D; ... ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;good</span><br><span class="line">private final Collection&lt;String&gt; stamps &#x3D; ... ;</span><br></pre></td></tr></table></figure>
<p>泛型保证数据的安全性</p>
<h5 id="Item24-清除未经检查的异常"><a href="#Item24-清除未经检查的异常" class="headerlink" title="Item24 清除未经检查的异常"></a>Item24 清除未经检查的异常</h5><p>在Eclipse或者Android studio中,敲写的代码或多或少有一些红色或黄色的警告,尽可能的消除这些警告</p>
<p>无法避免的话而且确保代码无误的话,慎重使用 @SuppressWarnings(“unchecked”)注解</p>
<h5 id="Item25-集合和数组倾向集合"><a href="#Item25-集合和数组倾向集合" class="headerlink" title="Item25 集合和数组倾向集合"></a>Item25 集合和数组倾向集合</h5><p>数组存储类型较灵活,将会导致不可预期的运行时异常<br>尽量让错误在编译时暴露而不是在不可控的运行时</p>
<h5 id="Item26-泛型类"><a href="#Item26-泛型类" class="headerlink" title="Item26 泛型类"></a>Item26 泛型类</h5><p>略</p>
<h5 id="Item27-泛型方法"><a href="#Item27-泛型方法" class="headerlink" title="Item27 泛型方法"></a>Item27 泛型方法</h5><p>略</p>
<h5 id="Item28-使用有界通配符增加API的灵活性"><a href="#Item28-使用有界通配符增加API的灵活性" class="headerlink" title="Item28 使用有界通配符增加API的灵活性"></a>Item28 使用有界通配符增加API的灵活性</h5><p>List<String>不是List<Object>的子类型,这个是有意义的<br>你给List<Object>中放入任何对象,但是List<String>中只能存放String<br>但有时我们不想存放固定的类型,因此需要一些灵活性</String></Object></Object></String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(Iterable&lt;E&gt; src)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (E e : src)</span><br><span class="line">	push(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Stack&lt;Number&gt; numberStack = <span class="keyword">new</span> Stack&lt;Number&gt;();</span><br><span class="line">Iterable&lt;Integer&gt; integers = ... ;</span><br><span class="line">numberStack.pushAll(integers);</span><br></pre></td></tr></table></figure>
<p>上述代码编译正常,看着也没什么问题 然而当我们添加的src不是我们期望的类型呢 如Stack<Number>,我们添加push(int) int将被自动装箱成Integer Integer也是Number的子类型<br>然而</Number></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;error</span><br><span class="line">pushAll(Iterable&lt;Number&gt;) in Stack&lt;Number&gt;</span><br><span class="line">cannot be applied to (Iterable&lt;Integer&gt;)</span><br><span class="line">numberStack.pushAll(integers);</span><br></pre></td></tr></table></figure>
<p>幸运的是Java提供了一种机制来解决子类的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wildcard type for parameter that serves as an E producer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(Iterable&lt;? extends E&gt; src)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (E e : src)</span><br><span class="line">  push(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>经典原则:PECS stands for producer-extends, consumer-super.</p>
</blockquote>
<h5 id="Item29-多参数的泛型安全"><a href="#Item29-多参数的泛型安全" class="headerlink" title="Item29 多参数的泛型安全"></a>Item29 多参数的泛型安全</h5><p>略</p>
<hr>
<p><a href="https://www.jianshu.com/p/d8e8a6916325">上一章:类和接口</a><br><a href="https://www.jianshu.com/p/9cd61b89c79e">下一章:枚举和注解</a> </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android截取string中的空字符</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Android%E6%88%AA%E5%8F%96string%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Android截取string中的空字符</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Android截取string中的空字符</h1>
        <div class="show-content">
          <p>最近遇到一个需求，在textview显示执行控制台“df”命令返回的字符串 排版那叫一个难看，所以想截取出来自己重新计算位置。</p><p>大家只要记住就可以了，用到了正则表达式</p><p>String.split(“\\s+”)   截取多个空格 结果保存在String[]里</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Android颜色透明度计算公式</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E7%99%BE%E5%88%86%E6%AF%94%E5%92%8C%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E5%AF%B9%E5%BA%94%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>有时候UI设计颜色多少透明度的时候,都去网上找对应关系图,其实有一个公式可以自己算出来</p>
</blockquote>
<p>十六进制的FF–&gt;十进制的255</p>
<ul>
<li>90%透明度<br>十进制255*0.9 = 229.5 ≈ 230(四舍五入) –&gt;十六进制E6</li>
</ul>
<p>其它透明度以此类推<br><img src="https://upload-images.jianshu.io/upload_images/2226681-47375f771c7e80f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="程序员计算器"></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Application官方直译深入理解(持续更新中)</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Application%E5%AE%98%E6%96%B9%E7%9B%B4%E8%AF%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD)/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Application官方直译深入理解(持续更新中)</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Application官方直译深入理解(持续更新中)</h1>
        <div class="show-content">
          <h3>Application</h3><p>持有全局应用的基类，通过继承Application并在清单文件声明name属性来使用自己的application。</p><p>Note：通常情况下我们并不需要自己的application，为了获得一个全局的context，可以通过Context.getApplicationContext()来得到一个context</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>List对象排序</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/ArrayList%E5%AF%B9%E8%B1%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>前言:最近对收音机的开发,遇到一个需求,将收藏列表显示在前,电台列表显示在后,所以需要对列表进行对象排序,在此做一个总结.</p>
</blockquote>
<h4 id="步骤1-创建比较器-指定排序规则"><a href="#步骤1-创建比较器-指定排序规则" class="headerlink" title="步骤1 创建比较器,指定排序规则"></a>步骤1 创建比较器,指定排序规则</h4><p>导入此包 java.util.Comparator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">comparator = <span class="keyword">new</span> Comparator&lt;RadioNode&gt;() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(RadioNode s1, RadioNode s2)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (s1.isFavor == s2.isFavor) &#123;</span><br><span class="line">					<span class="keyword">return</span> s2.frequent - s1.frequent;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">if</span>(s1.isFavor)	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(s2.isFavor)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br></pre></td></tr></table></figure>
<p>这里面有两个对象s1和s2,下面是制定的比较规则,如果isFavor相同,则比较frequent<br>返回1表示s1比s2大,则s1的位置不动,s2继续与后面的比较<br>返回0表示俩一样大,位置不变<br>返回-1表示s1与s2交换位置,s1继续按规则比较</p>
<h4 id="步骤2-将集合传入"><a href="#步骤2-将集合传入" class="headerlink" title="步骤2 将集合传入"></a>步骤2 将集合传入</h4><p>导入此包java.util.Collections</p>
<pre><code>Collections.sort(favorList,comparator);
</code></pre>
<p><code>end</code><br>感谢android</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Eclipse修改log缓冲大小</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Eclipse%E4%BF%AE%E6%94%B9log%E7%BC%93%E5%86%B2%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eclipse修改log缓冲大小</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Eclipse修改log缓冲大小</h1>
        <div class="show-content">
          <p>大家有木有这种情况，看着已经定位的错误log,一行一行的消失。。我的心也跟着崩溃了。</p><p>这是因为默认Log的缓存只有5000条</p><p>我们需要在Window-Preferences-Android-logcat…把5000加个0</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Eclipse导入库爆红×</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Eclipse%E5%AF%BC%E5%85%A5%E5%BA%93%E6%8A%A5%E7%BA%A2%E5%8F%89/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eclipse导入库报红叉</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Eclipse导入库报红叉</h1>
        <div class="show-content">
          <p>目录没在同一个</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Eclipse选择工作空间后闪退</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Eclipse%E9%80%89%E6%8B%A9%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E5%90%8E%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<blockquote>
<p>前言:之前使用的好好的时候,eclipse莫名报了一个outofXXX的弹框,没仔细看.整个eclipse动不了,不停弹框,网上搜索了一下解决方案</p>
</blockquote>
<h3 id="稳准狠"><a href="#稳准狠" class="headerlink" title="稳准狠"></a>稳准狠</h3><p>删除<br>[workspace]/.metadata/.plugins/org.eclipse.e4.workbench/workbench.xmi</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>ImageView-background和src的区别</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ImageView-background%E5%92%8Csrc%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ImageView background和src的区别</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">ImageView background和src的区别</h1>
        <div class="show-content">
          <p>在用到ImageView设置背景选择器的时候，要用. setImageResource ()。(对应布局的src属性)，这样图片有多大就显示多大，用background将会拉伸图片适应宽高。ImageButton和此一样的用法。</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>ListView-Adapter刷新无作用</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/ListView-Adapter-notifi%E4%B8%8D%E7%AE%A1%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>前言,在使用到adapter的时候，一般要用List来装数据实体，这里两种不同的写法容易遇到不同的问题。</p>
</blockquote>
<ul>
<li>第一种写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; list;</span><br><span class="line">    ***</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestAdapter</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">        ***</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话,我们在list更新的时候直接调用adapter的notifydatasetchanged就可以了.</p>
<ul>
<li>第二种写法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; mList = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line">    ***</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestAdapter</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        mList.addAll(list);</span><br><span class="line">        ***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        mList.clear();</span><br><span class="line">        mList.addAll(list);</span><br><span class="line">        notifydatasetchanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        mList.add(node);</span><br><span class="line">        notifydatasetchanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
用这种写法在数据变化的时候,需要调用adapter.add*()的对应方法</li>
<li>总结<br>adapter更新是看对象的地址有没有变化,调用notifydatasetchanged()才会管用.</li>
<li>问题<br>notifydatasetchanged不管作用</li>
</ul>
<p>1.一般情况下,遇到notifydatasetchanged不管作用是指向的对象已经不是初始化adapter时的那个对象了.比如使用了上面第二种写法,却调用的第一种的方式.<br>2.list的size==0;<br>3.***</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>ListView-smoothScroll定位不准笨方法</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ListView-smoothScrollToPosition-%E5%AE%9A%E4%BD%8D%E4%B8%8D%E5%87%86%E7%AC%A8%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ListView smoothScrollToPosition 定位不准笨方法解决</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">ListView smoothScrollToPosition 定位不准笨方法解决</h1>
        <div class="show-content">
          <p>有时需要列表平滑滚动到指定位置</p><p>但和预期位置有出入</p><p>网上查的原因说是Android的一个bug</p><p>解决方法如下</p><p>ListView.smoothScrollToPosition(0)</p><p>ListView.postDelayed(new runnable){</p><p>ListView.setSelection(0)</p><p>}</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>ListView-设置viewtype后数组越界</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ListView-%E8%AE%BE%E7%BD%AEviewtype%E5%90%8E%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ListView 设置viewtype后数组越界</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">ListView 设置viewtype后数组越界</h1>
        <div class="show-content">
          <p>一个很微妙的bug</p><p>ListView的getItemViewType (int pos)</p><p>返回一定从0开始</p><p>切记</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>ListView加背景文字透明效果去不掉</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ListView%E5%8A%A0%E8%83%8C%E6%99%AF%E6%96%87%E5%AD%97%E9%80%8F%E6%98%8E%E6%95%88%E6%9E%9C%E5%8E%BB%E4%B8%8D%E6%8E%89+%E8%B7%91%E9%A9%AC%E7%81%AF/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ListView加背景文字透明效果去不掉+跑马灯</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">ListView加背景文字透明效果去不掉+跑马灯</h1>
        <div class="show-content">
          <p>纠结了好久，设置ListView背景后，每次点击都感觉文字有层透明的图片遮住了，那是因为adapter中的布局文字未设置颜色，系统默认的就会出现透明的感觉。</p><p>另附加上跑马灯</p><p>﻿</p><div class="image-package">
<img name="149307608-1496643988974" src="http://upload-images.jianshu.io/upload_images/2226681-32460f54929f89b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50"><br><div class="image-caption">图片发自简书App</div>
</div><p>然后在Adapter找到对应的TextView, setSelected(true)</p><p>跑马灯走你</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ListView%E7%BB%93%E5%90%88xutils3%E4%BB%BF%E5%BE%AE%E4%BF%A1%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
    <content><![CDATA[<blockquote>
<p>前言:最近涉及到和QQ打交道,定义所有的好友一共只能有300条消息,如果一次性从数据库读取300条或者更多,界面会有细微的卡顿.所以考虑了下分页,第一次进来只显示20条(仿微信),当用户滑到第一条后,如果数据库有消息,则再加载20条.</p>
</blockquote>
<p>##步骤-问把大象关冰箱,总共分几步?<br>###1.自定义absListview.scrollListerner<br>核心的东西是监听ListView的scrollListerner,网上扒了一个挺不错的,大家用的时候实现这个scrollListerner,完善自己的逻辑即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOnScrollListener</span> <span class="keyword">implements</span> <span class="title">OnScrollListener</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> totalItemCount;</span><br><span class="line">      <span class="comment">//ListView最后的item项</span></span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">int</span> lastItem;</span><br><span class="line">      <span class="comment">//listview第一项</span></span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">int</span> firstItem;</span><br><span class="line">	    <span class="comment">//用于判断当前是否在加载</span></span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">boolean</span> isLoading;</span><br><span class="line">	    <span class="comment">//底部加载更多布局</span></span><br><span class="line">	  <span class="keyword">private</span> View footer;</span><br><span class="line">	    <span class="comment">//接口回调的实例</span></span><br><span class="line">	  <span class="keyword">private</span> OnloadDataListener listener;</span><br><span class="line">	 </span><br><span class="line">	  <span class="comment">//数据</span></span><br><span class="line">	  <span class="keyword">private</span> List&lt;MsgBean&gt; data;</span><br><span class="line">	  Handler handler = <span class="keyword">new</span> Handler();</span><br><span class="line">     </span><br><span class="line">	 </span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">MyOnScrollListener</span><span class="params">(View footer, List&lt;MsgBean&gt; data)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">this</span>.footer = footer;</span><br><span class="line">	    <span class="keyword">this</span>.data = data;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="comment">//设置接口回调的实例</span></span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLoadDataListener</span><span class="params">(OnloadDataListener listener)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">this</span>.listener = listener;</span><br><span class="line">	  &#125;</span><br><span class="line">	   <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * 滑动状态变化</span></span><br><span class="line"><span class="comment">	   *</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> scrollState 1 SCROLL_STATE_TOUCH_SCROLL是拖动  2 SCROLL_STATE_FLING是惯性滑动 0SCROLL_STATE_IDLE是停止 , 只有当在不同状态间切换的时候才会执行</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="meta">@Override</span></span><br><span class="line">	   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">//如果数据没有加载，并且滑动状态是停止的,并且滚到了第一个item,可在此做下拉更新或者上拉更新的判断</span></span><br><span class="line">	    <span class="keyword">if</span> (!isLoading &amp;&amp; firstItem == <span class="number">0</span> &amp;&amp; scrollState == SCROLL_STATE_IDLE) &#123;</span><br><span class="line">	      <span class="comment">//显示加载更多</span></span><br><span class="line">	      footer.setVisibility(View.VISIBLE);</span><br><span class="line">	    </span><br><span class="line">	      <span class="comment">//模拟一个延迟两秒的刷新功能</span></span><br><span class="line">	       handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">	        <span class="meta">@Override</span></span><br><span class="line">	        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	          <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">	            <span class="comment">//开始加载更多数据</span></span><br><span class="line">	            loadMoreData();</span><br><span class="line">	            <span class="comment">//回调设置ListView的数据</span></span><br><span class="line">	            listener.onLoadData(data);</span><br><span class="line">	             <span class="comment">//加载完成后操作什么</span></span><br><span class="line">	            loadComplete();</span><br><span class="line">	          &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	      &#125;, <span class="number">2000</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	   <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * 当加载数据完成后，设置加载标志为false表示没有加载数据了</span></span><br><span class="line"><span class="comment">	   * 并且设置底部加载更多为隐藏</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    isLoading = <span class="keyword">false</span>;</span><br><span class="line">	    footer.setVisibility(View.GONE);</span><br><span class="line">	 </span><br><span class="line">	  &#125;</span><br><span class="line">	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * 开始加载更多新数据，这里每次只更新三条数据</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadMoreData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    isLoading = <span class="keyword">true</span>;</span><br><span class="line">	    MsgBean msg = <span class="keyword">null</span>;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">	      msg = <span class="keyword">new</span> MsgBean();</span><br><span class="line">	     msg .setRemark(<span class="string">&quot;Liming&quot;</span>+i);</span><br><span class="line">	     msg .setMsgID(i);</span><br><span class="line">	      data.add(stu);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	   * 监听可见界面的情况</span></span><br><span class="line"><span class="comment">	   *</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> view       ListView</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> firstVisibleItem 第一个可见的 item 的索引</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> visibleItemCount 可以显示的 item的条数</span></span><br><span class="line"><span class="comment">	   * <span class="doctag">@param</span> totalItemCount  总共有多少个 item</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">	  <span class="meta">@Override</span></span><br><span class="line">	   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">//实现下拉加载</span></span><br><span class="line">	    lastItem = firstVisibleItem + visibleItemCount;</span><br><span class="line">           <span class="comment">//实现上拉加载</span></span><br><span class="line">	    firstItem = firstVisibleItem;</span><br><span class="line">	     <span class="comment">//总listView的item个数</span></span><br><span class="line">	    <span class="keyword">this</span>.totalItemCount = totalItemCount;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="comment">//回调接口</span></span><br><span class="line">	  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnloadDataListener</span> </span>&#123;</span><br><span class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">onLoadData</span><span class="params">(List&lt;MsgBean&gt; data)</span></span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	 &#125;</span><br></pre></td></tr></table></figure>
<p>###2.实现此接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListPageActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">MyOnScrollListener</span>.<span class="title">OnloadDataListener</span>  </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">	  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">	    setContentView(R.layout.activity_list_page);</span><br><span class="line">	</span><br><span class="line">	    <span class="comment">//显示到ListView上</span></span><br><span class="line">	    showListView(data);</span><br><span class="line"> <span class="comment">//自定义的滚动监听事件</span></span><br><span class="line">	    MyOnScrollListener onScrollListener = <span class="keyword">new</span> MyOnScrollListener(header, data);</span><br><span class="line">	    <span class="comment">//设置接口回调</span></span><br><span class="line">	    onScrollListener.setOnLoadDataListener(<span class="keyword">this</span>);</span><br><span class="line">	    <span class="comment">//设置ListView的滚动监听事件</span></span><br><span class="line">	    mListView.setOnScrollListener(onScrollListener);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadData</span><span class="params">(List&lt;MsgBean&gt; data)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">//加载数据完成后，展示数据到ListView</span></span><br><span class="line">	    showListView(data);</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>showListView里面无疑是普通的更新adapter的工作<br>那么我们如何借助xutils的数据库进行分类呢?<br>###3.利用xutils数据库操作进行分页处理<br>首先,我们理一下思路,上面我们已经实现了上拉的回调,在此回调中把新来的数据加载到adapter即可.<br>//下文db是Dbmanager的实例,可参考<a href="http://www.jianshu.com/p/95b6c4d7b7ce">xutils3用法</a></p>
<pre><code>/**
 * 当前屏幕显示的消息数量
 */
private int MAX_MSG_NUMBER = 20;
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MsgBean&gt; <span class="title">getDataFromDb</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	 List&lt;?&gt; dbSize = db.selector(MsgBean.class).where(WhereBuilder.b(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="number">400</span>)).findAll();<span class="comment">//记得捕获null指针和DbException异常</span></span><br><span class="line"><span class="comment">//如果数据库比我们显示的页数小,则不偏移,否则,偏移到我们需要显示的位置</span></span><br><span class="line">		<span class="keyword">if</span> (dbSize.size() &lt; MAX_MSG_NUMBER) &#123;</span><br><span class="line">			indexOffset = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			indexOffset = dbSize.size() - MAX_MSG_NUMBER;</span><br><span class="line">		&#125;</span><br><span class="line">	 </span><br><span class="line">	 List&lt;MsgBean&gt; datas = db.selector(MsgBean.class).where(WhereBuilder.b(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="number">400</span>)).limit(MAX_MSG_NUMBER)</span><br><span class="line">					.offset(indexOffset).findAll();</span><br><span class="line">		<span class="keyword">return</span> datas;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里解释一下          </p>
</blockquote>
<pre><code>db.selector(MsgBean.class).where(WhereBuilder.b(&quot;id&quot;, &quot;=&quot;, 400)).limit(MAX_MSG_NUMBER).offset(indexOffset).findAll();是我们实现分页的关键
</code></pre>
<p>.limit是我们定义的分页大小<br>.offset偏移量,我们数据库的大小是不变的,如果不定义偏移量,那么我们定义的分页大小每次只从0取到19.假设数据库中有21条数据,那么我们需要从1取到20,而不是0到19,所以偏移1.</p>
<p>然后我们在loadMoreData中</p>
<pre><code>MAX_MSG_NUMBER += MAX_MSG_NUMBER;
getDataFromDb();
</code></pre>
<p>将大小自加,即完成加载更多的功能,在onLoadData(List<MsgBean> data)中加载数据即可.</MsgBean></p>
<hr>
<p>后面贴上我对xutils数据库操作的封装,还有很多不完善之处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库 xutils用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 青楼爱小生</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = DbUtil.class.getName();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DbUtil dbUtil;</span><br><span class="line">	<span class="keyword">private</span> DbManager db;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DbUtil</span><span class="params">()</span></span>&#123;</span><br><span class="line">		db = x.getDb(MyApplication.getInstance().daoConfig);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbUtil <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(dbUtil == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (DbUtil.class) &#123;</span><br><span class="line">				<span class="keyword">if</span>(dbUtil == <span class="keyword">null</span>)&#123;</span><br><span class="line">					dbUtil = <span class="keyword">new</span> DbUtil();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dbUtil;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 增加数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> DbException </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMsgList</span><span class="params">(List&lt;MsgBean&gt; list)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			db.saveOrUpdate(list);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			LogHelper.e(TAG, e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 增加一条数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> DbException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMsgToDb</span><span class="params">(MsgBean node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			db.saveOrUpdate(node);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			LogHelper.e(TAG, e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除表中所有数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> cls  创建的表的映射</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> DbException </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Class cls)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			db.delete(cls);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">			LogHelper.e(TAG, e.getMessage());</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除第一条数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> cls</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteFirst</span><span class="params">(Class cls)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			db.delete(db.findFirst(cls));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 查询表中所有数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> DbException </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;?&gt; findAll(Class cls) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> db.findAll(cls) == <span class="keyword">null</span> ? Collections.emptyList() : db.findAll(cls);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">			LogHelper.e(TAG, e.getMessage());</span><br><span class="line">			<span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * //添加查询条件进行查询</span></span><br><span class="line"><span class="comment">		List&lt;ChildInfo&gt; all = db.selector(ChildInfo.class).where(&quot;id&quot;,&quot;&gt;&quot;,2).and(&quot;id&quot;,&quot;&lt;&quot;,4).findAll();</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 搜索指定条件的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	 <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;?&gt; findDataByWhere(Class cls,WhereBuilder format)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> db.selector(cls).where(format).findAll()== <span class="keyword">null</span> ?</span><br><span class="line">					Collections.emptyList() :db.selector(cls).where(format).findAll();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">		LogHelper.e(TAG, e.getMessage());</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加查询条件进行查询</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> cls  表映射</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> str  select语句</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> format  where语句</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> List&lt;DbModel&gt; DbModel  key为数据库列名 value为值</span></span><br><span class="line"><span class="comment">	 * eg:(Selector.from(Parent.class)  </span></span><br><span class="line"><span class="comment">                                   .where(&quot;id&quot; ,&quot;&lt;&quot;, 54)  </span></span><br><span class="line"><span class="comment">                                   .and(WhereBuilder.b(&quot;age&quot;, &quot;&gt;&quot;, 20).or(&quot;age&quot;, &quot; &lt; &quot;, 30))  </span></span><br><span class="line"><span class="comment">                                   .orderBy(&quot;id&quot;)  </span></span><br><span class="line"><span class="comment">                                   .limit(pageSize)    .offset(pageSize * pageIndex));  </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	 <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> Selector&lt;?&gt; findDataBySelector(Class cls,WhereBuilder format)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span>  db.selector(cls).where(format);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (DbException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ListView自动滚到最后一条</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/ListView%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E6%9D%A1/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ListView自动滚到最后一条</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">ListView自动滚到最后一条</h1>
        <div class="show-content">
          <p>1.listview xml里面加上</p><p>android.transcriptmode=alwaysScroll</p><p>android:stackFromBottom="true"//此种情况 每次数据更新状态都会滚到最后一条</p><p>到顶部</p><p>```</p><p>if (!listview.isStackFromBottom()) {</p><p>    listview.setStackFromBottom(true);</p><p>}</p><p> listview.setStackFromBottom(false);</p><p>```</p><p>到底部</p><p>if (listview.isStackFromBottom()) {</p><p>    listview.setStackFromBottom(false);</p><p>}</p><p> listview.setStackFromBottom(true);</p><p><br></p><p>2.list.post(new runnable)</p><p>List.setselection(size-1)</p><p>可以在需要滚的地方滚</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>MVP小白入门,只需5步</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/MVP%E5%B0%8F%E7%99%BD%E5%85%A5%E9%97%A8,%E5%8F%AA%E9%9C%805%E6%AD%A5/</url>
    <content><![CDATA[<blockquote>
<p>前言:因为公司氛围没有用,一直很火的mvp模式像鬼一样听说过没见过,今天闲来无事了解一下,发现由普通的MVC改起来还是挺行云流水的,但像有些弹窗不知道写在P层还是V层<br>关于MVP的概念我就不详细说了,记住关键的一点就是将view与逻辑分离<br>在谷歌推荐写法下,M层被弱化,数据处理放在了P层<br>####1.定义一个P接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">something</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####2.定义一个V接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(P presenter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####3.定义一个合约类管理上述两个接口,Presenter用于定义界面的逻辑与数据,View 用于定义对应的界面显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateRecordContract</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取今日数据</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getTodayData</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//获取所有数据</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">getAllData</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//检查数据是否有效</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">checkData</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//插入一条数据</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insertDateBean</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//开始计时</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startTiming</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">//显示计时界面</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">startAnim</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//刷新界面</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">refreshUI</span><span class="params">(List&lt;DateRecordBean&gt; data)</span></span>;</span><br><span class="line">        <span class="comment">//停止计时界面</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">stopAnim</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//刷新一个界面</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">refreshOneDate</span><span class="params">(DateRecordBean bean)</span></span>;</span><br><span class="line">        <span class="comment">//保存输入的文本</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">saveInputtext</span><span class="params">(String str)</span></span>;</span><br><span class="line">        <span class="comment">//获得当前的文本</span></span><br><span class="line">        <span class="function">String <span class="title">getCurrenttext</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//隐藏输入法</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">hideInput</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####4.定义一个P层实现类,最好放在上面的接口同一个包下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateRecordPresenterImpl</span> <span class="keyword">implements</span> <span class="title">DateRecordContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DateRecordContract.View view;</span><br><span class="line">    <span class="keyword">private</span> SharedPreferencesHelper spHelper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateRecordPresenterImpl</span><span class="params">(DateRecordContract.View view,SharedPreferencesHelper sp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">        view.setPresenter(<span class="keyword">this</span>);</span><br><span class="line">        spHelper = sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTodayData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//..处理数据</span></span><br><span class="line">        List&lt;DateRecordBean&gt; list = ...;</span><br><span class="line">        <span class="comment">//..通知view刷新界面</span></span><br><span class="line">        view.refreshUI(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;DateRecordBean&gt; list = ...;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        view.refreshUI(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertDateBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        DateRecordBean bean = <span class="keyword">new</span> DateRecordBean();</span><br><span class="line">        <span class="comment">//..数据处理</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理完数据后通知view刷新界面</span></span><br><span class="line">        view.refreshOneDate(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTiming</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        view.hideInput();</span><br><span class="line">        view.startAnim();</span><br><span class="line"></span><br><span class="line">        spHelper.put(SharedPreferencesHelper.isStartTime, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        view.saveInputtext(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">something</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...自己的处理逻辑</span></span><br><span class="line">        <span class="keyword">return</span> isStartRecord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####5.定义一个View实现类,根据回调显示UI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DateRecordContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> DateRecordPresenterImpl presenter;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line">        presenter = <span class="keyword">new</span> DateRecordPresenterImpl(<span class="keyword">this</span>,spHelper);</span><br><span class="line">        <span class="comment">//通知P层获得今日数据</span></span><br><span class="line">        presenter.getTodayData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshUI</span><span class="params">(List&lt;DateRecordBean&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//显示P层处理好的数据</span></span><br><span class="line">        dapter.addBeans(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上就是简单的MVP入门,哪里出问题了直接在合约类查看,还是挺方便,也可以把MainActivity改为Fragment实现View,有些疑问是不知道把Dialog放在哪,目前还是放在了Activity中<br>2018年9月5日08:02:16</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Manifest-merger-failed-with-multiple-errors/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manifest merger failed with multiple errors</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Manifest merger failed with multiple errors</h1>
        <div class="show-content">
          <p>项目的清单文件和库里面或者arr里面的清单文件有重复项并且不一致，替换为一致即可。比如我遇到的情况是meta data不一致</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
  </entry>
  <entry>
    <title>MediaSession框架</title>
    <url>/2021/02/19/Android%E6%97%A5%E8%AE%B0/MediaSession%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​        传统的媒体开发, 由我们自己定义接口, 服务端, 涉及到不同的业务往往需要重新定义不同的接口, 导致开发成本增加, 为此google在5.0中提供了一套多媒体开发框架, 目前Android9源码中蓝牙音乐服务/收音机服务等均已采用此架构. 主要目的为了规范媒体服务和客户端之间的通信接口, 实现解耦</p>
<h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="/2021/02/19/Android%E6%97%A5%E8%AE%B0/MediaSession%E6%A1%86%E6%9E%B6/....%5C%E5%AA%92%E4%BD%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%8401.png" alt="媒体应用架构01"></p>
<p>​        UI和播放器针对不同项目可有不同程度的扩展, 但针对媒体应用来说, 业务交互基本相同, 所以抽出了MediaController和MediaSession实现核心交互逻辑</p>
<h4 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h4><ul>
<li><p>MediaController(媒体控制器)</p>
<p>负责与UI的交互, 将用户的操作通过媒体控制器转换为对会话的回调, 同样, 媒体会话改变会通知控制器的回调变化, 实现双重更新机制</p>
</li>
<li><p>MediaSession(媒体会话)</p>
<p>负责与播放器的所有通信, 对UI隐藏播放器实现细节</p>
<p>维护播放相关的信息, 比如播放状态, Id3info等</p>
</li>
</ul>
<a id="more"></a>

<h3 id="使用媒体会话"><a href="#使用媒体会话" class="headerlink" title="使用媒体会话"></a>使用媒体会话</h3><h3 id="构建视频应用"><a href="#构建视频应用" class="headerlink" title="构建视频应用"></a>构建视频应用</h3><p>​        播放视频时, 依赖于界面, 设计结构如下:</p>
<p><img src="/2021/02/19/Android%E6%97%A5%E8%AE%B0/MediaSession%E6%A1%86%E6%9E%B6/%E8%A7%86%E9%A2%91%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%8401.png" alt="视频应用架构01"></p>
<p>使用步骤:</p>
<ol>
<li><p>在onCreate中初始化MediaSession</p>
</li>
<li><p>设置回话回调</p>
</li>
<li><p>初始化媒体控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Create a MediaSessionCompat</span></span><br><span class="line">mediaSession = <span class="keyword">new</span> MediaSessionCompat(<span class="keyword">this</span>, LOG_TAG);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable callbacks from MediaButtons and TransportControls</span></span><br><span class="line">mediaSession.setFlags(</span><br><span class="line">    MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS |</span><br><span class="line">    MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not let MediaButtons restart the player when the app is not visible</span></span><br><span class="line">mediaSession.setMediaButtonReceiver(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set an initial PlaybackState with ACTION_PLAY, so media buttons can start the player</span></span><br><span class="line">stateBuilder = <span class="keyword">new</span> PlaybackStateCompat.Builder()</span><br><span class="line">        .setActions(</span><br><span class="line">         PlaybackStateCompat.ACTION_PLAY |</span><br><span class="line">         PlaybackStateCompat.ACTION_PLAY_PAUSE);</span><br><span class="line">mediaSession.setState(stateBuilder.build());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. MySessionCallback has methods that handle callbacks from a media controller</span></span><br><span class="line">mediaSession.setCallback(<span class="keyword">new</span> MySessionCallback());</span><br><span class="line"><span class="comment">// 3. initial mediacontroller</span></span><br><span class="line">mediaController = <span class="keyword">new</span> MediaControllerCompat(context, mediaSession);</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="构建音频应用"><a href="#构建音频应用" class="headerlink" title="构建音频应用"></a>构建音频应用</h3><p>​        构建音频应用时, 不依赖于界面, 界面销毁后依然能在后台播放, 设计架构如下:</p>
<p><img src="/2021/02/19/Android%E6%97%A5%E8%AE%B0/MediaSession%E6%A1%86%E6%9E%B6/资料\long\boke\Hexo-Blog\source\音频应用架构01.png" alt="音频应用架构01"></p>
<ul>
<li>MediaBrowser</li>
<li>MediaBrowserService</li>
</ul>
<h3 id="响应媒体按钮"><a href="#响应媒体按钮" class="headerlink" title="响应媒体按钮"></a>响应媒体按钮</h3><p>…</p>
<h3 id="音频焦点管理"><a href="#音频焦点管理" class="headerlink" title="音频焦点管理"></a>音频焦点管理</h3><p>…</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="Q1-方控下一曲多次-音源跑到上一个-如当前播放视频-切曲多次跑到了音乐源"><a href="#Q1-方控下一曲多次-音源跑到上一个-如当前播放视频-切曲多次跑到了音乐源" class="headerlink" title="Q1: 方控下一曲多次, 音源跑到上一个, 如当前播放视频, 切曲多次跑到了音乐源"></a>Q1: 方控下一曲多次, 音源跑到上一个, 如当前播放视频, 切曲多次跑到了音乐源</h4>]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Monkey压力测试从0到1，拿去就能用</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Monkey%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E4%BB%8E0%E5%88%B01%EF%BC%8C%E6%8B%BF%E5%8E%BB%E5%B0%B1%E8%83%BD%E7%94%A8/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monkey压力测试从0到1，拿去就能用</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Monkey压力测试从0到1，拿去就能用</h1>
        <div class="show-content">
          <p>以前做炒股app，测试都是测试部工作，现在新的公司一来就说先跑一跑monkey吧。Monkey?不是猴子麽，怎么跑？</p><p>经过多次摸索后，终于可以笑嘻嘻的跑monkey了</p><p>首先adb shell</p><p>mkdir /mnt/sdcard/monkey   回车 创建一个文件夹专门存放Monkey跑完后收集的错误信息</p><p>monkey -p 包名 --ignore-crashes --ignore-timeouts --ignore-native-crashes --pct-touch 50 -s 1 -v -v --throttle 300 10000 2&gt;&gt;/mnt/sdcard/monkey/error.txt  1&gt;&gt;/mnt/sdcard/monkey/info.txt   回车</p><p>然后就看到我们的应用飞起来了。。不要</p><p>亚美爹～</p><p>不要～</p><p>停～</p><p>然后可以在d盘 执行adb pull /mnt/sdcard/monkey .</p><p>就看到error.tex文件 好，开始分析程序中bug吧。Note：在跑完一遍monkey修改bug后，我们要先删除以前的error.txt文件，否则文本还是叠加了刚才的错误。</p><p>删除的命令是(进入到删除文件的根目录)rm -r xx</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Service官方直译深入理解(基础知识完)</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Service%E5%AE%98%E6%96%B9%E7%9B%B4%E8%AF%91%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3(%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AE%8C)/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service官方直译深入理解(基础知识完)</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Service官方直译深入理解(基础知识完)</h1>
        <div class="show-content">
          <h3>Service</h3><p>被设计为不和用户直接交互，在后台执行长期操作的一种系统组件，也可被其它应用使用。每一个服务必须在AndroidManifest中声明。服务可以通过Context.startService() and Context.bindService().启动。<i>Note：service运行在主线程，因此执行网络操作需要另起线程，但</i>IntentService可以解决这个问题。<br></p><h3>What is a Service?</h3><p>首先，我们来说说服务不是什么：</p><p>1：服务不是一个单独的进程，通常情况下它运行在应用进程的一部分</p><p>2.服务不是线程，它不能在应用无响应时工作</p><p>下面来说说服务两个主要的特征：</p><p>1.很方便的通知系统，我有一些后台任务需要处理，直到明确停止服务</p><p>2.很方便的给其它应用提供功能</p><p><i>Note：因为服务很简单，所以我们可以以任何我们想交互的方式来设计一个服务。我们可以将服务看成一个可以随时调用它方法的普通的Java对象，通过AIDL来交互。</i></p><h3>Service Lifecycle</h3><p>服务可以通过两种方式启动。如果有人调用了Context.startService()，那么服务的oncreate()和onStartCommand(Intent, int, int)会被回调，不管执行多少次startService，服务都不会重新创建，而会多次调用onStartCommand，所以并不存在停止不了服务的情况。服务会持续下去直到Context.stopService() or stopSelf()被调用。onStartCommand返回的不同值对应不同的服务需要。</p><p>用户还可以通过Context.bindService()来持有一个服务连接。当服务没运行的时候将会调用oncreate方法，但不会调用onStartCommand方法。客户端会接收到服务onBind(Intent)方法回调的IBinder对象，允许客户端回调服务里面的方法。通常情况下，IBinder是由复杂的接口创建的。</p><p>上述两种启动方式可以同时存在</p><h3>Permissions</h3><p>当一个服务在清单文件中声明，全局访问它将会拒绝。这时需要在自己的清单文件中声明合适的权限来启动，停止和绑定特定的服务。以Android 2.3为例，当调用Context.startService(Intent)，我们也需要设置Intent.FLAG_GRANT_READ_URI_PERMISSION and/or Intent.FLAG_GRANT_WRITE_URI_PERMISSION。</p><p>这会暂时同意Service访问Intent指定的Uri，直到服务停止。这个对Service没有exported也同样适用。</p><hr id="null"><h3>Process Lifecycle</h3><p>Android系统会尽可能长的保留持有service的进程，但是当内存不足需要杀掉一些进程时，有如下的优先级：</p><p>1.当前服务正在回调onCreate(), onStartCommand(), or onDestroy()方法，则视为前台进程，不会被kill</p><p>2.当服务长期运行在后台时，有极高的可能性被kill</p><p>3.我们可以通过startForeground(int, Notification)来设置前台进程，除非在内存极端紧张下，否则不会被杀</p><p><i>Note 有很大的可能，一个正在运行的服务在内存不足时会被系统杀掉，但是被杀掉后，系统会稍后试着重启这个服务。我们可以在</i>onStartCommand()方法用START_FLAG_REDELIVERY回调一个Intent来继续执行我们的服务</p><hr id="null"><h3>基础完</h3>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Set集合依然有重复</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Set%E9%9B%86%E5%90%88%E4%BE%9D%E7%84%B6%E6%9C%89%E9%87%8D%E5%A4%8D/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Set集合依然有重复</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Set集合依然有重复</h1>
        <div class="show-content">
          <p>读set的源码，判断重复的依据是集合里的对象hashcode相等和equal返回了true代表俩对象不一样。</p><p>所以我们要重写这俩方法实现去重</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>TextView低级错误</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/TextView%E4%BD%8E%E7%BA%A7%E9%94%99%E8%AF%AF,%E7%BB%86%E8%8A%82%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TextView低级错误,细节细节</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">TextView低级错误,细节细节</h1>
        <div class="show-content">
          <p>当我们用.9做背景，动态设置聊天背景(宽度随时长改变)时。。</p><p>用”/““作为秒。。1秒怎么都显示不出来。</p><p>记得把TextView设置一个最小宽度，否则有些字符被挤看不到。。</p><p>在考虑了编码和服务器没得问题，用eclipse查看ui的结构才发现了这个。🤣🤣</p><p>另外如果用在Listview的item里，记得设置字体颜色，否则点击item后字体颜色会随系统改变</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Win10-wlan自动获取ip失效</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/Win10-WLAN%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96ip%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Win10/WLAN自动获取ip失效</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">Win10/WLAN自动获取ip失效</h1>
        <div class="show-content">
          <p>自从用了VPN后，电脑WiFi就出了问题，每换一个地方都要手动设置IP。后来百度出了解决办法。亲测有效</p><p>桌面右键开始</p><p>命令提示符“管理员”</p><p>输入 netsh winsock reset   回车 重启</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>adb-error-cannot-bind-to</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/adb-error-cannot-bind-to-127-0-0-1-5038-/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>adb error cannot bind to 127.0.0.1:5038:</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">adb error cannot bind to 127.0.0.1:5038:</h1>
        <div class="show-content">
          <p>出现这种情况多半是端口被其他程序占用了,一般是自己电脑的手机助手程序</p><p>我们可以打开cmd输入以下命令查看是谁占用了端口</p><p>netstat -nao|findstr 5038</p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-ecd24c0cb634997c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-ecd24c0cb634997c.png?imageMogr2/auto-orient/strip" data-image-slug="ecd24c0cb634997c" data-width="619" data-height="53"><br><div class="image-caption"></div>
</div><p>32272为pid,我们可以在任务管理器找到这个程序然后kill,在重启Android studio就好了</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>app启动流程</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/app%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B-%E5%86%B7%E5%90%AF%E5%8A%A8,%E7%83%AD%E5%90%AF%E5%8A%A8,%E6%9A%96%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<blockquote>
<p>前言:项目中被诟病多媒体开机第一次启动很慢,大约3s的黑屏,后续点开启动正常,其中什么原理呢?这就涉及到系统的三种启动模型</p>
</blockquote>
<h3 id="1-Cold-Start-冷启动"><a href="#1-Cold-Start-冷启动" class="headerlink" title="1.Cold Start,冷启动"></a>1.Cold Start,冷启动</h3><p>system—&gt;<br>loding and launching the app<br>                  displaying a blank window</p>
<h2 id="createing-the-app-process"><a href="#createing-the-app-process" class="headerlink" title="createing the app process"></a>createing the app process</h2><p>process—&gt;<br>creating the application<br>launching the main thread<br>creating the main activity<br>inflating views<br>laying out the screen<br>perfoming the initial draw<br>main activity place blank window</p>
<hr>
<h3 id="2-Hot-Start-热启动"><a href="#2-Hot-Start-热启动" class="headerlink" title="2.Hot Start,热启动"></a>2.Hot Start,热启动</h3><p>前台activity因内存不足,被系统销毁重建的过程(重建流程同冷启动)</p>
<h3 id="3-Warm-Start"><a href="#3-Warm-Start" class="headerlink" title="3.Warm Start"></a>3.Warm Start</h3><ul>
<li>用户点击返回,并重新运行</li>
<li>activity不在前台,被系统销毁,由用户主动运行<br>可通过onSaveInstance保存状态</li>
</ul>
<hr>
<h3 id="4-APP启动慢常见问题"><a href="#4-APP启动慢常见问题" class="headerlink" title="4.APP启动慢常见问题"></a>4.APP启动慢常见问题</h3><ul>
<li>Application.onCreate中执行了过重的操作,如I/O操作,频繁创建对象等</li>
<li>Activity.onCreate<br>布局过于复杂<br>Loading and decoding bitmaps<br>blocking screen drawing on disk or network I/O<br>Rasterinzing vectordrawable objects<br>initialztion of other subsystem of the activity</li>
</ul>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>Xutils3数据库升级</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/xutils3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7%EF%BC%88markdown%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言:xutils真是一款不错的android开发框架，在使用过程中减少了程序员很多的代码量。不过其中也有一小部分需要注意的地方。其它使用请看<a href="http://www.jianshu.com/p/95b6c4d7b7ce">xutils3详细用法</a></p>
</blockquote>
<h2 id="1-注解注意事项"><a href="#1-注解注意事项" class="headerlink" title="1.注解注意事项"></a>1.注解注意事项</h2><p>不像黄牛刀的注解，xutils的注解是在运行时（ps：我也不懂），用xutils注解点击事件发现，在频繁的切换点击两个button的时候，只会响应一个button的点击，用findviewbyid的方式设置onclicklitsener，就不会有这个bug。</p>
<p>所以我们在用到点击功能的时候，恰当的用一下注解，目前只发现频繁点击会出现问题，不一定其它地方埋着什么。</p>
<h2 id="2-数据库升级"><a href="#2-数据库升级" class="headerlink" title="2.数据库升级"></a>2.数据库升级</h2><p>当我们的业务在一天天完善的时候，之前建立的数据库字段可能需要做修改。我们如下配置数据库的代码</p>
<pre><code>    DbManager.DaoConfig daoConfig =newDbManager.DaoConfig()

    .setDbName(&quot;myapp.db&quot;)//设置数据库名

    xutils.db.setDbDir(newFile(&quot;/mnt/sdcard/&quot;))//设置数据库路径，默认存储在app的私有目录

    .setDbVersion(2)//设置数据库的版本号

    .setDbOpenListener(newDbManager.DbOpenListener() &#123;//设置数据库打开的监听

        @Override
        public void onDbOpened(DbManager db) &#123;//开启数据库支持多线程操作，提升性能，对写入加速提升巨大
        db.getDatabase().enableWriteAheadLogging();
&#125;
&#125;)
    .setDbUpgradeListener(newDbManager.DbUpgradeListener() &#123;//设置数据库更新的监听

        @Override
        public void onUpgrade(DbManager db,intoldVersion,intnewVersion) &#123;

&#125;

&#125;)  .setTableCreateListener(newDbManager.TableCreateListener() &#123;//设置表创建的监听
        @Override
        public void onTableCreated(DbManager db, TableEntity table)&#123;
        Log.i(&quot;JAVA&quot;,&quot;onTableCreated：&quot;+ table.getName());
&#125;
&#125;);
</code></pre>
<hr>
<p>我们可以在setDbVersion（x）填上任意数字，当然根据我们自己的实际情况</p>
<p>在需要改字段的时候，我们可以填x+n的数字,然后在</p>
<pre><code>.setDbUpgradeListener(newDbManager.DbUpgradeListener() &#123;//设置数据库更新的监听

@Override 
public void onUpgrade(DbManager db,intoldVersion,intnewVersion) &#123;

  //不需要之前的数据

  db.delete(x.class);

  //需要之前的数据

  db.addColumn(x.class,&quot;test&quot;);//新增的字段

  db.saveOrUpdate(db.findall（）);//当前表中有这条isId则更新数据，没有则添加

&#125;

&#125;)
</code></pre>
<hr>
<p>感谢android，感谢开源</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>一行代码实现高斯模糊</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/</url>
    <content><![CDATA[<blockquote>
<p>前言:有一个音乐播放器的项目,背景需要根据歌曲的封面进行模糊展示,搜罗了很久,找到一个不错的解决方案,不需要我们进行NDK的开发,android帮我们在framework实现好了<a href="http://www.jianshu.com/p/b72da42e1463">借鉴</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 模糊图片</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> bitmap 原图片</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> radius 模糊度  0~25</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 模糊后的图片</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">blurBitmap</span><span class="params">(Bitmap bitmap, <span class="keyword">float</span> radius, Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Create renderscript</span></span><br><span class="line">    RenderScript rs = RenderScript.create(context);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Create allocation from Bitmap</span></span><br><span class="line">    Allocation allocation = Allocation.createFromBitmap(rs, bitmap);</span><br><span class="line">    </span><br><span class="line">    Type t = allocation.getType();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Create allocation with the same type</span></span><br><span class="line">    Allocation blurredAllocation = Allocation.createTyped(rs, t);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Create script</span></span><br><span class="line">    ScriptIntrinsicBlur blurScript = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));</span><br><span class="line">    <span class="comment">//Set blur radius (maximum 25.0)</span></span><br><span class="line">    blurScript.setRadius(radius);</span><br><span class="line">    <span class="comment">//Set input for script</span></span><br><span class="line">    blurScript.setInput(allocation);</span><br><span class="line">    <span class="comment">//Call script for output allocation</span></span><br><span class="line">    blurScript.forEach(blurredAllocation);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Copy script result into bitmap</span></span><br><span class="line">    blurredAllocation.copyTo(bitmap);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Destroy everything to free memory</span></span><br><span class="line">    allocation.destroy();</span><br><span class="line">    blurredAllocation.destroy();</span><br><span class="line">    blurScript.destroy();</span><br><span class="line">    t.destroy();</span><br><span class="line">    rs.destroy();</span><br><span class="line">    <span class="keyword">return</span> bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>感谢android,感谢开源</code></p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>修改gradle属性,加快Android-Studio编译速度</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E4%BF%AE%E6%94%B9gradle%E5%B1%9E%E6%80%A7,%E5%8A%A0%E5%BF%ABAndroid-studio%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>修改gradle属性,加快Android studio编译速度</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">修改gradle属性,加快Android studio编译速度</h1>
        <div class="show-content">
          <p>1.在自己项目的gradle中加入</p><p>android{<br></p><p>...</p><p>dexOptions{</p><p>maxProcessCount4// this is the default value</p><p>javaMaxHeapSize"2g"</p><p>}</p><p>}</p><hr><p>2.在项目的中修改gradle.properties</p><p>org.gradle.jvmargs=-Xmx3072m<br></p><p><br></p><p>over!</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>命令行打印日志</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>命令行打印日志</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">命令行打印日志</h1>
        <div class="show-content">
          <p>adb logcat -s TAG</p><p>有时候我们放在System priv-app里的apk，不能再eclipse或as打印。需要用控制台的方式</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>图片分层根据状态显示</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AElevel-list,%E6%A0%B9%E6%8D%AE%E4%B8%8D%E5%90%8C%E7%8A%B6%E6%80%81%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%90%8C%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<blockquote>
<p>前言:工作需求,wifi图标根据不同的强度,显示不同的状态.于是想到用图层的方法<br>####bg.xml</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;level-list xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span><br><span class="line">    &lt;item android:maxLevel=&quot;0&quot; android:drawable=&quot;@drawable/icon_stop_n&quot;&gt;&lt;/item&gt;</span><br><span class="line">    &lt;item android:maxLevel=&quot;1&quot; android:drawable=&quot;@drawable/icon_pause&quot;&gt;&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">&lt;/level-list&gt;</span><br></pre></td></tr></table></figure>
<p><code>note:android:maxLevel 必须从0递增,顺序错误后只会显示第一张图片</code><br>####布局文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">               android:id&#x3D;&quot;@+id&#x2F;bt_pause_bt&quot;</span><br><span class="line">               android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">               android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">               android:layout_marginLeft&#x3D;&quot;115px&quot;</span><br><span class="line">               android:background&#x3D;&quot;@drawable&#x2F;bg&quot;</span><br><span class="line">               android:tag&#x3D;&quot;play&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>####代码中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LevelListDrawable pauseDrawable = (LevelListDrawable) yourwiget</span><br><span class="line">				.getBackground();</span><br><span class="line">pauseDrawable.setLevel(<span class="number">1</span>);<span class="comment">//根据业务需要,对应图片等级</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>安卓网站</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E5%AE%89%E5%8D%93%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>安卓网站</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">安卓网站</h1>
        <div class="show-content">
          <p>guolin.tech</p><p>Hencodr.com</p><p>http://ticktick.blog.51cto.com/823160/1655761  内核分析<br></p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>数组转集合新颖写法</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E6%95%B0%E7%BB%84%E8%BD%AC%E9%9B%86%E5%90%88%E6%96%B0%E9%A2%96%E5%86%99%E6%B3%95get%E2%88%9A/</url>
    <content><![CDATA[<blockquote>
<p>title: my new post<br>date: 2021-02-05 19:04:35<br>categories: Android日记<br>tags: Android</p>
<p>前言:啥也不说了,show me the code!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> List&lt;Integer&gt; <span class="title">intArrayAsList</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line"></span><br><span class="line">    retrun <span class="keyword">new</span> AbstractList&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Interger <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            retrun a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Integer <span class="title">set</span><span class="params">(<span class="keyword">int</span> i, Integer val)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> oldVal = a[i];</span><br><span class="line">            a[i] = val;</span><br><span class="line">            retrun oldVal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123; retrun a.length;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>检测cpu占用率</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E6%A3%80%E6%B5%8Bcpu%E5%8D%A0%E7%94%A8%E7%8E%87/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>检测cpu占用率</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">检测cpu占用率</h1>
        <div class="show-content">
          <p>adb shell top -m 10 -d 1</p><p>-m 显示的最多进程数</p><p>-d 更新间隔时间</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>自定义textview,invalidate不调用ondraw可能原因</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89textview-invalidate-()%E4%B8%8D%E8%B0%83%E7%94%A8ondraw()%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>自定义textview invalidate ()不调用ondraw()可能原因</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">自定义textview invalidate ()不调用ondraw()可能原因</h1>
        <div class="show-content">
          <p>1.控件大小为0,需要重写onMeasure ()</p><p>2.onDraw()重写的不是protected </p><p>我记得重写已有控件不需要重写测量方法，可能是我记错版本了，有空了在研究研究</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>重新理解Activity启动模式,确认返回到哪个界面</title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%EF%BC%8C%E7%A1%AE%E8%AE%A4%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE%E5%88%B0%E5%93%AA%E4%B8%AA%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<hr>
<p>前言：之前开发单个应用，把每个Activity声明为singleTask完事，最近开发车机系统相关的应用，各个应用间通过语音可来回跳转，点击返回时返回的Activity和预期不一致，于是研究了一下如何定位到当前Activity点返回会跳转到哪</p>
</blockquote>
<p>车机系统 Android4.4</p>
<h3 id="所需概念"><a href="#所需概念" class="headerlink" title="所需概念"></a>所需概念</h3><h4 id="task-amp-stack"><a href="#task-amp-stack" class="headerlink" title="task&amp;stack"></a>task&amp;stack</h4><p>Android对于Activity的管理使用First in,Last out的数据结构,对所有的Activity都通过回退栈的方式来管理</p>
<p>启动activity实际上启动的activity所属的task,最顶部的activity处于onResume状态,这点一定要切记</p>
<p>放入stack里面的顺序不能重排序,只能遵从后入先出的原则(pop&amp;push)</p>
<p>Home在一个Stack里面,其它应用在另一个Stack里面,通过Task ID管理</p>
<h3 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h3><p>adb shell dumpsys activity &gt; E:\stack01.txt<br>或<br>adb shell dumpsys activity activities &gt; E:\stack02.txt  //生成的文件更详细</p>
<p>此时打开生成的文件找到<em>Recent tasks:</em><br><img src="https://upload-images.jianshu.io/upload_images/2226681-d3097c4de9f501b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stack.png"><br>即表示当前所有系统管理activity栈,Recent #0是当前界面,点击返回即跳到Recent #1,一直返回到tasks结束或Home为止</p>
<p>“sz=1”表示当前task所拥有的Activity数量,在同一个task的Activity回退完后,才会到另一个task,一般来说一个应用拥有一个独立的task,(Home启动应用会通过Intent设置FLAG_ACTIVITY_NEW_TASK的flag)</p>
<h3 id="启动模式与任务栈的关系"><a href="#启动模式与任务栈的关系" class="headerlink" title="启动模式与任务栈的关系"></a>启动模式与任务栈的关系</h3><ol>
<li><p>默认<br>默认情况下每次都启动一个新的Activity实例</p>
</li>
<li><p>singleTop<br>当前Activity在task顶部时,及当前正在交互的Activity需要重新打开时不会创建实例,而会走到onNewIntent里面</p>
</li>
</ol>
<p>非顶部和默认情况下一致</p>
<ol start="3">
<li><p>singleTask<br>当前task里面有实例则会复用,回调onNewIntent,并将当前Activity上面的Activity弹出销毁</p>
</li>
<li><p>singleInstance<br>同singleTask类似,不同的是这个task里面只会有唯一一个Activity,启动其它Activity会放到新的一个task里面(可理解为给其它Activity设置FLAG_ACTIVITY_NEW_TASK)<br>标识)</p>
</li>
</ol>
<p>有一点需要注意,对于从Home启动的Activity来说,会设置mOnTopOfHome=true,不管和Home是不是同一个Stack都会返回到主页</p>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>没有给定API接口启动其他应用(跳到指定activity)尽量使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = MyApp.getInstance().getPackageManager()</span><br><span class="line"> .getLaunchIntentForPackage(<span class="string">&quot;com.example.otherpackage&quot;</span>);</span><br><span class="line"></span><br><span class="line">MyApp.getInstance().startActivity(intent);</span><br></pre></td></tr></table></figure>
<p>由系统判断Launcher category启动,如果手动启动需要根据当前方案设置intent的flag</p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title>windows批量修改文件名</title>
    <url>/2021/02/06/%E5%B7%A5%E5%85%B7/Android-%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E5%90%8E%E7%BC%80,windows%E4%B8%8B%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<blockquote>
<p>Android开发遇到了换肤的要求,使用了鸿洋大神的ChangeSkin库,需要大量的给图片加后缀</p>
</blockquote>
<h1 id="方法摘自-真紫艳星光"><a href="#方法摘自-真紫艳星光" class="headerlink" title="方法摘自:真紫艳星光"></a><a href="https://www.cnblogs.com/xingfan/">方法摘自:真紫艳星光</a></h1><h4 id="第一步-在文件夹-如F-pic-放图片处shift加右键-在此处打开命令窗口"><a href="#第一步-在文件夹-如F-pic-放图片处shift加右键-在此处打开命令窗口" class="headerlink" title="第一步 在文件夹(如F:/pic)放图片处shift加右键,在此处打开命令窗口"></a>第一步 在文件夹(如F:/pic)放图片处shift加右键,在此处打开命令窗口</h4><p>输入<br>dir <em>.</em> /b&gt;rename.xls<br>会把当前文件夹下的文件名保存在表格中<br><img src="https://upload-images.jianshu.io/upload_images/2226681-0602f8df7ac9a5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表格_rename"></p>
<h4 id="第二步-复制一份到另一个表格"><a href="#第二步-复制一份到另一个表格" class="headerlink" title="第二步 复制一份到另一个表格"></a>第二步 复制一份到另一个表格</h4><p><img src="https://upload-images.jianshu.io/upload_images/2226681-e28df338454471ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建表格"></p>
<p>Ctrl+F替换为对应的后缀名称<br><img src="https://upload-images.jianshu.io/upload_images/2226681-09c12f57d7cb3638.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="替换"></p>
<p>复制到第一个表中<br><img src="https://upload-images.jianshu.io/upload_images/2226681-3e57b9f236bfd870.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制"></p>
<h4 id="第三步-输入公式"><a href="#第三步-输入公式" class="headerlink" title="第三步 输入公式"></a>第三步 输入公式</h4><p>在C1单元格<br>=”ren “&amp;A1&amp;” “&amp;B1<br><img src="https://upload-images.jianshu.io/upload_images/2226681-de23c5e6f436b5a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="公式效果"><br>鼠标放到这个点,变成黑色十字架时往下拖<br><img src="https://upload-images.jianshu.io/upload_images/2226681-c3894f8fe8d970d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2226681-c9615d350dfcd067.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="第四步-复制C列的内容-在F-pic新建文本文档拷贝"><a href="#第四步-复制C列的内容-在F-pic新建文本文档拷贝" class="headerlink" title="第四步 复制C列的内容 在F:/pic新建文本文档拷贝"></a>第四步 复制C列的内容 在F:/pic新建文本文档拷贝</h4><p><img src="https://upload-images.jianshu.io/upload_images/2226681-a6266be202e843a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="第五步-修改文本文档后缀为-bat-双击执行"><a href="#第五步-修改文本文档后缀为-bat-双击执行" class="headerlink" title="第五步 修改文本文档后缀为.bat,双击执行"></a>第五步 修改文本文档后缀为.bat,双击执行</h4><p>原来的文件就添加上后缀啦!<br><img src="https://upload-images.jianshu.io/upload_images/2226681-edc6a3730a836caa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改后的文件"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>BeyondCompare-被撤销秘钥</title>
    <url>/2021/02/06/%E5%B7%A5%E5%85%B7/BeyondCompare-%E8%A2%AB%E6%92%A4%E9%94%80%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<blockquote>
<p>进入C:\Users[Your User Name]\AppData\Roaming\Scooter Software<br>除了BCCommands.xml,其余的都删除</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>Excel常用功能</title>
    <url>/2021/02/06/%E5%B7%A5%E5%85%B7/Excel%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>前言:日常工作中经常需要用到表格,梳理下简单好用的功能</p>
</blockquote>
<h4 id="一-快速填充日期"><a href="#一-快速填充日期" class="headerlink" title="一.快速填充日期"></a>一.快速填充日期</h4><ol>
<li><p>输入今天的星期和日期<br><img src="https://upload-images.jianshu.io/upload_images/2226681-c3935fe19e1385d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>鼠标挪到日期单元格,会出现一个黑色的”+”<br><img src="https://upload-images.jianshu.io/upload_images/2226681-5479505a16e7c037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>此时按住左键不放,往下拖<br><img src="https://upload-images.jianshu.io/upload_images/2226681-e90973ece8e263c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>填充选项可选择以什么方式填充<img src="https://upload-images.jianshu.io/upload_images/2226681-b58f0a3e2e4c046d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>有了左边的日期,星期几的填充就方便多了,<br>在上述第二步的时候双击黑色”+”,星期几就被自动填充了<br><img src="https://upload-images.jianshu.io/upload_images/2226681-b676cc038eb8ab4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2226681-2ea8a8f9a4217ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>svn常用功能</title>
    <url>/2021/02/06/%E5%B7%A5%E5%85%B7/SVN%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<ol>
<li>checkout<br>拷贝远程仓库(后续简称仓库)代码到本地</li>
<li>update<br>拉取仓库代码,同步更新本地代码</li>
<li>commit<br>提交本地代码到仓库</li>
<li>show log<br>查看仓库更改记录</li>
<li>revert<br>5.1 revert to this version<br>还原仓库代码到指定版本,修改冲突后需要再次提交覆盖仓库<br>常用于代码回退<br>5.2 revert changes from this version<br>去掉此次修改记录,如遇到了一个bug,增加了日志,提交了一个版本A,修复bug后提交了一个版本B,此时不想要之前的打印信息,可以选中版本A revert changes from this version<br>需要在提交一份覆盖仓库</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/%E6%97%B6%E9%97%B4/2018--%E4%B8%80%E6%9C%8824%E5%8F%B7%E5%88%B0%E4%B8%80%E6%9C%8828%E5%8F%B7/</url>
    <content><![CDATA[<p>###本周总结 总共时间10080分钟<br>#####1.总体计划概要</p>
<ul>
<li>工作时长:2335分钟</li>
<li>学习:95分钟</li>
<li> 交通:437分钟</li>
<li>陪伴家人:2160分钟</li>
<li>日常(洗漱,洗澡等):247分钟</li>
<li>睡眠:2940分钟<br>#####2.计划本周目标及完成情况<br>学习420分钟,未达成<br>#####3.完成情况原因分析<br>冬天开始睡懒觉,晚上看上了吃鸡直播,没有按时睡觉,闹钟响后没有第一时间起床,结果导致没有时间学习<br>#####4.后续计划<br>按时睡觉按时起床,每天早上观看一小时谷歌官方文章,晚上查看车机系统是如何搭成的<br>继续提高专业能力</li>
</ul>
<p>#####本周做得完善的地方<br>学会了Source Insight 4.0的基本用法<br>工作上基本完成<br>#####值得改进的地方<br>每天晚上玩手机的时间太多了,影响了睡眠,进而影响了学习.<br>给家人打电话的时间变少了,争取每周打一通电话</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/%E6%97%B6%E9%97%B4/2018-01-29~02-03/</url>
    <content><![CDATA[<p>###本周总结<br>##1.总体计划概要<br>*工作时长:3307分钟<br>*学习:34分钟<br>*交通:<br>*陪伴家人:332分钟<br>*日常(洗漱,洗澡等):125分钟<br>*睡眠:2520<br>*娱乐:695分钟<br>##2.计划本周目标及完成情况<br>每天学习一小时–未完成<br>每天快走40分钟–未完成<br>汗颜~<br>##3.完成情况原因分析<br>早上喜欢睡懒觉,晚上12点多才睡,影响到了第二天的质量<br>##4.后续计划<br>每晚11:30必须睡觉<br>下班后走40分钟<br>早上7点起床,学习一小时<br>#####本周做得完善的地方<br>工作上比较顺利,也帮朋友解决了一些问题,但上班只能挣小钱,要多学习商业模式<br>#####值得改进的地方<br>每晚睡的晚必须要改进了,平时工作的时候,稍微触及点利益的变得很敏感,还需要看开,想好各种场景的措辞,向高压锅同志学习</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/%E6%97%B6%E9%97%B4/%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>###本周总结<br>##1.总体计划概要<br>*工作时长:<br>*学习:<br>*交通:<br>*陪伴家人:<br>*日常(洗漱,洗澡等)<br>*睡眠:<br>*娱乐:<br>##2.计划本周目标及完成情况<br>##3.完成情况原因分析<br>##4.后续计划<br>#####本周做得完善的地方<br>#####值得改进的地方</p>
]]></content>
  </entry>
  <entry>
    <title>写给2019年的你,来自2018年的我</title>
    <url>/2021/02/06/%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%BD%A0/%E5%86%99%E7%BB%992019%E5%B9%B4%E7%9A%84%E4%BD%A0,%E6%9D%A5%E8%87%AA2018%E5%B9%B4%E7%9A%84%E6%88%91/</url>
    <content><![CDATA[<blockquote>
<p>前言:可惜,写了五年的未来之信丢失了,好多宝贵的记忆与期望都无从寻觅,在重新开始吧.每年都给未来的你写一封信,然后在未来,见证自己的成长<br>###18年的收获<br>待总结<br>###改变<br>####身体<br>身高接近180cm,体重在18年终于达到130斤了.你现在都已经140了吧,不知道有没有结婚,听说婚后谁胖了就是另一半的爱比较多哦,我俩肯定都会胖的(<em>^__^</em>) 嘻嘻<br>这一年也不再要求你有八块腹肌了,只希望你每天都能运动,保持身心的愉悦.一有时间的话我就快步走40分钟,在寒冷的冬天,身体暖洋洋的感觉挺好.<br>笨笨有一段时间也便秘,肚子不舒服.. 我也头疼脚痛的,现在你是不是因为锻炼了一年而有所改善了呢,加油</p>
</blockquote>
<hr>
<p>目标:长到140斤 你来打勾<br><code>笨笨不超过100斤</code></p>
<p>####家人<br>陪伴父母的时间越来越少,现在你也有了自己的家.倩妹也越来越大了,越来越大离家也越来远了.倩妹也会有自己的生活和圈子了.现在的你是不是花了些时间来陪伴家人呢.小学每天回家,中学两周回一次家,大学半年回一次,工作了一年回一次.还好回到了重庆,平时放假就能回去看看.</p>
<hr>
<p>目标:陪伴家人每一个重要的日子 你来打勾<br>####工作<br>学到的技术还是要实践领悟了才是自己的,平时就要学习下各种大神的知识多积累.现在的你对服务和aidl了解的差不多了吧,java的各种技术和平时的想法都要学习才行,加油!</p>
<hr>
<p>目标:对android整体架构有更深入的认识,对java有更深入的理解</p>
]]></content>
      <categories>
        <category>未来的你</category>
      </categories>
  </entry>
  <entry>
    <title>写给2020年的你,来自2019年的我</title>
    <url>/2021/02/06/%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%BD%A0/%E5%86%99%E7%BB%992020%E5%B9%B4%E7%9A%84%E4%BD%A0,%E6%9D%A5%E8%87%AA2019%E5%B9%B4%E7%9A%84%E6%88%91/</url>
    <content><![CDATA[<h5 id="2018年终总结"><a href="#2018年终总结" class="headerlink" title="2018年终总结"></a>2018年终总结</h5><h6 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h6><p>优</p>
<ul>
<li>完成多媒体及平台oom/anr问题修复</li>
<li>薪资涨了一千(被人力砍了500)</li>
<li>晋升为团队leader</li>
<li>熟悉了多媒体平台架构</li>
<li>熟读了Thinking in Java</li>
<li>熟读了编程方法学</li>
<li>熟读了Effect Java</li>
<li>浅读了源码分析</li>
<li>看完了扔物线大神系列文章,很受益</li>
<li>逻辑思维更成熟了,分析log有头绪</li>
<li>上拉刷新下拉加载控件</li>
<li>熟练自定义view</li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>自定义viewgroup较弱</li>
<li>源码部分看的少</li>
<li>遇到没碰到过的模块分析起来较慢,容易形成畏难心理,最后发现往往是一行代码的事</li>
<li>不懂拒绝,导致自己问题积攒下来,增加了压力,帮助别人做的事产出也不大,没做好反而会被投诉</li>
<li>多个维度的事情找上门来,分不清轻重缓急(自己认为重要的,实际上对版本意义不大),后续同技术PM沟通,统一优先解决的目标<blockquote>
<p>对于薄弱项列出计划smart原则<a href=",%E5%85%B7%E4%BD%93,%E5%8F%AF%E8%A1%A1%E9%87%8F,%E5%8F%AF%E5%AE%9E%E7%8E%B0,%E4%B8%8E%E8%A1%8C%E4%B8%9A%E7%9B%B8%E5%85%B3,%E6%9C%89%E6%97%B6%E9%99%90,">^hhh</a></p>
</blockquote>
</li>
</ul>
<hr>
<h6 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h6><p>优</p>
<ul>
<li>不知从哪个月开始,一直在进行握力训练,做完后会引起腋下不适,但渐渐加粗的手臂还是要坚持下去</li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>每晚熬夜刷小视频(不得不说小视频的魔力挺大,根本停不下来)</li>
<li>缺乏锻炼,自认心肺功能不是很好,应当坚持跑步或者游泳<blockquote>
<p>这么一总结发现对自己身体的投资太少了,2020年的目标有了</p>
</blockquote>
</li>
</ul>
<hr>
<h6 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h6><p>优</p>
<ul>
<li>在对象工作的地方买了房</li>
</ul>
<ul>
<li>在一起的时候,每晚给笨笨讲睡前故事,睡得可快了</li>
<li>给笨笨买了新手机iPhoneXr</li>
<li>双方家长都有意靠拢,19年回去争取定下来<a href="%E8%B0%88%E5%A6%A5%E5%A9%9A%E5%89%8D%E5%87%86%E5%A4%87">^h</a>    </li>
</ul>
<ul>
<li>与笨笨都在存钱装修<a href="%E5%AF%B9%E4%BA%8E%E6%9C%88%E5%85%89%E6%97%8F%E7%9A%84%E7%AC%A8%E7%AC%A8(%E5%B9%B3%E6%97%B6%E7%BB%99%E6%88%91%E4%B9%B0%E8%A1%A3%E6%9C%8D%E7%AD%89%E7%AD%89%E7%AD%89),%E5%B9%B4%E5%BA%95%E5%B1%85%E7%84%B6%E5%AD%98%E4%BA%86%E4%B8%89%E4%B8%87,%E5%8E%89%E5%AE%B3%E5%8E%89%E5%AE%B3">^hh</a></li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>与父母每周一通电话有时会遗漏</li>
<li>工作上女方不太赞成程序员这个行业,认为不稳定,想让我考公务员 2020年的目标有了</li>
<li>异地,这也是想考公务员的主要原因</li>
<li>同妹妹相差15岁,慢慢对她的关心少了<blockquote>
<p>年龄越来越大,离父母家人却越来越远,实属羞愧 现在整体行情不好,家里也处于困难期,工程款结不到账,我更应该承担起照顾家庭的责任</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="写给2020的你"><a href="#写给2020的你" class="headerlink" title="写给2020的你"></a>写给2020的你</h3><p>总结了去年,龙哥你的目标也明确了吧,重心要偏向身体和生活上</p>
<ul>
<li>结婚</li>
</ul>
<ul>
<li>常与家人沟通</li>
<li>考上公务员,结束异地恋</li>
<li>系统源码,多看,多思</li>
</ul>
]]></content>
      <categories>
        <category>未来的你</category>
      </categories>
  </entry>
  <entry>
    <title>写给2021年的你,来自2020年的我</title>
    <url>/2021/02/06/%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%BD%A0/%E5%86%99%E7%BB%992021%E5%B9%B4%E7%9A%84%E4%BD%A0,%E6%9D%A5%E8%87%AA2020%E5%B9%B4%E7%9A%84%E6%88%91%20/</url>
    <content><![CDATA[<h5 id="2020年终总结"><a href="#2020年终总结" class="headerlink" title="2020年终总结"></a>2020年终总结</h5><h6 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h6><p>优</p>
<ul>
<li>搭建了蓝鲸整个多媒体平台,虽然现在编解码还有点问题,整体流程可用</li>
<li>工资破万</li>
<li>重新阅读了设计模式</li>
<li>用平台思维来设计代码</li>
<li>提高了责任心, 周末加班解决同事遗留下来的重大问题</li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>表达能力需要锻炼, 有技术含量的事情表达出一半. 有同事基本很薄弱,却表达出很厉害的感觉, 虽然我不喜欢这样,但我还是想把自己做的东西能表达完整</li>
<li>没搭建好自己的学习体系</li>
</ul>
<hr>
<h6 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h6><p>优</p>
<ul>
<li>额.. 好像没进行有效锻炼, 偶尔下班前跑跑步, 不过倒是经常打乒乓球</li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>晚上还是经不住短视频的诱惑 -  这块研究下办法,好的是困的时候马上就放下手机了,没有勉强自己</li>
<li>平时坐久了定了闹钟,但是事情来了还是没有去运动运动</li>
</ul>
<hr>
<h6 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h6><p>优</p>
<ul>
<li>谈的越久, 越明白笨笨的好, 好好珍惜</li>
<li>有年终了, 给父母一份安心</li>
<li>倩妹长大了, 希望身体健康, 开心平安长大</li>
</ul>
<hr>
<p>劣</p>
<ul>
<li>婚前准备两家人的思想还是不统一, 如果要彩礼的话, 结婚证拿的话也要有礼节, 我爸会爆哦.. 刚好也是现在双方最困难的时候, 也是最需要用钱的时候, 笨笨愿意站出来和我一起面对, 很欣慰了</li>
<li>和家人在一起的时间越来越短了, 多陪陪家人</li>
<li>还是异地</li>
</ul>
<hr>
<h3 id="写给2021的你"><a href="#写给2021的你" class="headerlink" title="写给2021的你"></a>写给2021的你</h3><ul>
<li>考教师资格证做准备, 先把普通话过了</li>
<li>身体是第一位的, 上班多运动</li>
<li>常回家看看</li>
</ul>
]]></content>
      <categories>
        <category>未来的你</category>
      </categories>
  </entry>
  <entry>
    <title>Android.mk</title>
    <url>/2020/02/06/%E8%BD%A6%E6%9C%BA/Android-mk%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>Android源码编译不同的版本,略微有不同<br>如下基于9.0</p>
</blockquote>
<p>编写app之前,确认编译环境使用的sdk版本,在build.gradle中配置成一样的<br>删掉不需要用的东西,也许某个虚线下面在编译时就是一个炸弹</p>
<p>一个apk构依赖部分<br>系统属性/自己项目的module/第三方jar/第三方aar/so库</p>
<ul>
<li><h4 id="系统预编译好的属性"><a href="#系统预编译好的属性" class="headerlink" title="系统预编译好的属性"></a>系统预编译好的属性</h4>如AndroidX系列,<br>implementation ‘androidx.constraintlayout:constraintlayout:1.1.0<br>可在编译目录中通过查找对应 name属性<br><code>find prebuilts/sdk/ -name Android.bp|xargs grep &quot;name.*constraintlayout&quot;</code></li>
</ul>
<p>mk如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH:&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_USE_AAPT2 :&#x3D; true</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">LOCAL_STATIC_ANDROID_LIBRARIES :&#x3D; \ androidx-constraintlayout_constraintlayout</span><br><span class="line"></span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="依赖自己项目中Module"><a href="#依赖自己项目中Module" class="headerlink" title="依赖自己项目中Module"></a>依赖自己项目中Module</h4></li>
</ul>
<p>1.只依赖java文件,即常用的jar包<br>module中配置Android.bp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;constantproxy&quot;,</span><br><span class="line"></span><br><span class="line">    srcs: [</span><br><span class="line">        &quot;src&#x2F;main&#x2F;java&#x2F;**&#x2F;*.java&quot;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    exclude_srcs: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    libs: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;androidx.media_media&quot;, &#x2F;&#x2F;依赖的系统属性</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    required: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    dxflags: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>app中Android.mk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_USE_AAPT2 :&#x3D; true</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES :&#x3D; \</span><br><span class="line">							   constantproxy\</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.既依赖java又依赖res<br>此种module不需要写mk<br>在app中引入即可</p>
<blockquote>
<p>? 理论上是不是每个module都可以这么写</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH:&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_USE_AAPT2 :&#x3D; true</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(call all-java-files-under, src)</span><br><span class="line">LOCAL_SRC_FILES +&#x3D; $(call all-java-files-under, yourmodule&#x2F;src)</span><br><span class="line">LOCAL_RESOURCE_DIR +&#x3D; $(LOCAL_PATH)&#x2F;src&#x2F;main&#x2F;res</span><br><span class="line">LOCAL_RESOURCE_DIR +&#x3D; $(LOCAL_PATH)&#x2F;yourmodule&#x2F;src&#x2F;main&#x2F;res</span><br><span class="line">#注意yourmodule路径的准确性</span><br><span class="line"></span><br><span class="line">LOCAL_AAPT_FLAGS :&#x3D; --auto-add-overlay \</span><br><span class="line">                                      --extra-packages yourmodule包名 \</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="第三方jar"><a href="#第三方jar" class="headerlink" title="第三方jar"></a>第三方jar</h4>在jar的同级目录下新建Androd.bp 如libs/Android.bp<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java_import &#123;</span><br><span class="line">    name: &quot;my_jar&quot;,</span><br><span class="line">    jars: [&quot;annotation-1.1.0.jar&quot;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果依赖第三方jar的是库,则在库里面的Android.bp中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;my_lib_core&quot;,</span><br><span class="line"></span><br><span class="line">    srcs: [</span><br><span class="line">        &quot;src&#x2F;main&#x2F;java&#x2F;**&#x2F;*.java&quot;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    exclude_srcs: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    libs: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;androidx.appcompat_appcompat&quot;,&quot;my_jar&quot;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    required: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    dxflags: [</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果是自己的项目,则在app中Android.mk<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH:&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_USE_AAPT2 :&#x3D; true</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES :&#x3D; \</span><br><span class="line">                my_jar \</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">LOCAL_PRIVATE_PLATFORM_APIS :&#x3D; true</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li>
<li><h4 id="依赖第三方aar"><a href="#依赖第三方aar" class="headerlink" title="依赖第三方aar"></a>依赖第三方aar</h4>在aar同级目录Android.bp中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android_library_import &#123;</span><br><span class="line">    name: &quot;navigation-fragment-nodeps&quot;,</span><br><span class="line">    aars: [&quot;libs&#x2F;navigation-fragment-2.3.0-alpha01.aar&quot;],</span><br><span class="line">    sdk_version: &quot;current&quot;,</span><br><span class="line">    static_libs: [</span><br><span class="line">		&quot;androidx.fragment_fragment&quot;, &#x2F;&#x2F;navigation-fragment依赖androidx.fragment_fragment</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android_library &#123;</span><br><span class="line">    name: &quot;androidx.navigation_navigation-fragment&quot;,</span><br><span class="line">    sdk_version: &quot;current&quot;,</span><br><span class="line">    manifest: &quot;androidx.navigation.fragment&#x2F;AndroidManifest.xml&quot;,</span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;navigation-fragment-nodeps&quot;,</span><br><span class="line">		&quot;androidx.fragment_fragment&quot;,</span><br><span class="line">    ],</span><br><span class="line">    java_version: &quot;1.8&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在Android.mk中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_STATIC_ANDROID_LIBRARIES :&#x3D; \</span><br><span class="line">                    androidx.navigation_navigation-fragment</span><br></pre></td></tr></table></figure></li>
<li><h4 id="so库"><a href="#so库" class="headerlink" title="so库"></a>so库</h4><blockquote>
<p>此so库指的是NDK编译出来的so库,libs下直接可用<br>需要用到so库的mk里面</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include $(BUILD_PACKAGE)</span><br><span class="line"></span><br><span class="line">libs_dir :&#x3D; $(TARGET_OUT)&#x2F;app&#x2F;yourapkname&#x2F;lib&#x2F;armeabi</span><br><span class="line">$(shell mkdir -p $(libs_dir))</span><br><span class="line">src_files :&#x3D; $(shell ls $(LOCAL_PATH)&#x2F;libs&#x2F;armeabi&#x2F;)</span><br><span class="line">$(foreach file, $(src_files),\</span><br><span class="line">			    $(shell cp $(LOCAL_PATH)&#x2F;libs&#x2F;armeabi&#x2F;$(file) $(libs_dir)&#x2F;$(file)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>Android9.0源码中的mk例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH:&#x3D; $(call my-dir)</span><br><span class="line"> </span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"> </span><br><span class="line">LOCAL_USE_AAPT2 :&#x3D; true</span><br><span class="line">LOCAL_PACKAGE_NAME :&#x3D; APK名字</span><br><span class="line">LOCAL_OVERRIDES_PACKAGES :&#x3D; </span><br><span class="line">LOCAL_MODULE_TAGS :&#x3D; optional</span><br><span class="line"> </span><br><span class="line"># can&#39;t use LOCAL_SDK_VERSION, otherwise the error will occur like this:</span><br><span class="line"># &quot;(java:sdk) should not link to&quot;</span><br><span class="line">#LOCAL_SDK_VERSION :&#x3D; current</span><br><span class="line">LOCAL_PRIVATE_PLATFORM_APIS :&#x3D; true</span><br><span class="line">LOCAL_PRIVILEGED_MODULE :&#x3D; true</span><br><span class="line">LOCAL_JAVACFLAGS :&#x3D; -Xlint:deprecation -Xlint:unchecked</span><br><span class="line"> </span><br><span class="line">#LOCAL_PROGUARD_FLAG_FILES :&#x3D; proguard.flags</span><br><span class="line">#LOCAL_JARJAR_RULES :&#x3D; $(LOCAL_PATH)&#x2F;jarjar-rules.txt</span><br><span class="line"> </span><br><span class="line">###################################################</span><br><span class="line"># src, res, AndroidManifest.xml ...</span><br><span class="line">###################################################</span><br><span class="line">LOCAL_MANIFEST_FILE :&#x3D; src&#x2F;main&#x2F;AndroidManifest.xml</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(call all-java-files-under, src&#x2F;main&#x2F;java)</span><br><span class="line">LOCAL_RESOURCE_DIR :&#x3D; $(LOCAL_PATH)&#x2F;src&#x2F;main&#x2F;res</span><br><span class="line">LOCAL_ASSET_DIR :&#x3D; $(LOCAL_PATH)&#x2F;src&#x2F;main&#x2F;assets</span><br><span class="line"> </span><br><span class="line">###################################################</span><br><span class="line"># AS dependencies from androidx or android-support</span><br><span class="line">###################################################</span><br><span class="line">#implementation &#39;androidx.appcompat:appcompat:1.0.0&#39;</span><br><span class="line">#LOCAL_STATIC_ANDROID_LIBRARIES +&#x3D; androidx.appcompat_appcompat</span><br><span class="line"> </span><br><span class="line">#implementation &#39;androidx.constraintlayout:constraintlayout:1.1.0&#39;</span><br><span class="line">#LOCAL_STATIC_ANDROID_LIBRARIES +&#x3D; androidx-constraintlayout_constraintlayout</span><br><span class="line"> </span><br><span class="line">#implementation &#39;androidx.recyclerview:recyclerview:1.0.0&#39;</span><br><span class="line">#LOCAL_STATIC_ANDROID_LIBRARIES +&#x3D; androidx.recyclerview_recyclerview</span><br><span class="line"> </span><br><span class="line">#implementation &#39;com.google.android.material:material:1.0.0&#39;</span><br><span class="line">#LOCAL_STATIC_ANDROID_LIBRARIES +&#x3D; com.google.android.material_material</span><br><span class="line"> </span><br><span class="line">###################################################</span><br><span class="line"># custom aar library</span><br><span class="line">###################################################</span><br><span class="line">#LOCAL_STATIC_JAVA_AAR_LIBRARIES +&#x3D; 第三方AAR的别名，如：Demo_xxx-1.0.0</span><br><span class="line">#LOCAL_AAPT_FLAGS +&#x3D; --extra-packages 第三方AAR里面AndroidManifest.xml定义的包名</span><br><span class="line">#LOCAL_RESOURCE_DIR +&#x3D; 如果第三方AAR里面有res编不过的时候可以将res解压出来在此引用，如：$(LOCAL_PATH)&#x2F;libs&#x2F;xxx&#x2F;res</span><br><span class="line">LOCAL_AAPT_FLAGS +&#x3D; --auto-add-overlay</span><br><span class="line"> </span><br><span class="line">###################################################</span><br><span class="line"># custom jar library</span><br><span class="line">###################################################</span><br><span class="line">#LOCAL_STATIC_JAVA_LIBRARIES +&#x3D; 自定义Module或第三方JAR的别名</span><br><span class="line">#LOCAL_JAVA_LIBRARIES +&#x3D;</span><br><span class="line"> </span><br><span class="line">###################################################</span><br><span class="line"># custom jni library</span><br><span class="line">###################################################</span><br><span class="line">LOCAL_JNI_SHARED_LIBRARIES :&#x3D; </span><br><span class="line"> </span><br><span class="line">include $(BUILD_PACKAGE)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">##############################################################</span><br><span class="line"># Pre-built dependency jars,aars,...</span><br><span class="line">##############################################################</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"> </span><br><span class="line">#LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES +&#x3D; AAR或JAR别名与文件路径对应关系，如：Demo_xxx-1.0.0:libs&#x2F;xxx&#x2F;xxx.aar</span><br><span class="line"> </span><br><span class="line">include $(BUILD_MULTI_PREBUILT)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">##############################################################</span><br><span class="line"># Pre-built dependency jars,aars,...</span><br><span class="line">##############################################################</span><br><span class="line">#prebuilts +&#x3D; xxx:libs&#x2F;xxx&#x2F;xxx.aar</span><br><span class="line">#</span><br><span class="line">#define define-prebuilt</span><br><span class="line">#  $(eval tw :&#x3D; $(subst :, ,$(strip $(1)))) \</span><br><span class="line">#  $(eval include $(CLEAR_VARS)) \</span><br><span class="line">#  $(eval LOCAL_MODULE :&#x3D; $(word 1,$(tw))) \</span><br><span class="line">#  $(eval LOCAL_MODULE_TAGS :&#x3D; optional) \</span><br><span class="line">#  $(eval LOCAL_MODULE_CLASS :&#x3D; JAVA_LIBRARIES) \</span><br><span class="line">#  $(eval LOCAL_SRC_FILES :&#x3D; $(word 2,$(tw))) \</span><br><span class="line">#  $(eval LOCAL_UNINSTALLABLE_MODULE :&#x3D; true) \</span><br><span class="line">#  $(eval LOCAL_SDK_VERSION :&#x3D; system_current) \</span><br><span class="line">#  $(eval include $(BUILD_PREBUILT))</span><br><span class="line">#endef</span><br><span class="line">#</span><br><span class="line">#$(foreach p,$(prebuilts),\</span><br><span class="line">#  $(call define-prebuilt,$(p)))</span><br><span class="line">#</span><br><span class="line">#prebuilts :&#x3D;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">##############################################################</span><br><span class="line"># find other Android.mk </span><br><span class="line">##############################################################</span><br><span class="line">include $(call all-makefiles-under, $(LOCAL_PATH))</span><br></pre></td></tr></table></figure>
<hr>
<p>上面的方式都不行的话,直接打包apk编译<br>xx.apk同级目录Android.mk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE :&#x3D; weixin</span><br><span class="line">LOCAL_MODULE_CLASS :&#x3D; APPS</span><br><span class="line">LOCAL_MODULE_SUFFIX :&#x3D; $(COMMON_ANDROID_PACKAGE_SUFFIX)</span><br><span class="line">LOCAL_SRC_FILES :&#x3D; $(LOCAL_MODULE).apk</span><br><span class="line">LOCAL_MODULE_PATH :&#x3D; $(TARGET_OUT_APP)</span><br><span class="line">LOCAL_CERTIFICATE :&#x3D; platform</span><br><span class="line">include $(BUILD_PREBUILT)</span><br><span class="line">include $(call all-makefiles-under,$(LOCAL_PATH))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>开机执行逻辑</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/Android%E5%BC%80%E6%9C%BAflow/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2226681-420418709379ba26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开机.png"></p>
<blockquote>
<p>?:开机动画在哪一层</p>
</blockquote>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>Eclipse遇到的错误</title>
    <url>/2020/02/06/%E8%BD%A6%E6%9C%BA/Eclipse%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h3 id="Q1-Conversion-to-Dalvik-format-failed-Unable-to-execute-dex-Multiple-dex-files-define-L"><a href="#Q1-Conversion-to-Dalvik-format-failed-Unable-to-execute-dex-Multiple-dex-files-define-L" class="headerlink" title="Q1 Conversion to Dalvik format failed: Unable to execute dex: Multiple dex files define L"></a>Q1 Conversion to Dalvik format failed: Unable to execute dex: Multiple dex files define L</h3><p>A1：添加的jar包重复了，可能名字不同，里面的内容相同。这点就做的不好了，提示不出来哪两个文件相同。</p>
<h3 id="Q2-Unknown-exception-in-parseSdkContent-java-lang-StackOverflowError"><a href="#Q2-Unknown-exception-in-parseSdkContent-java-lang-StackOverflowError" class="headerlink" title="Q2 Unknown exception in parseSdkContent. java.lang.StackOverflowError"></a>Q2 Unknown exception in parseSdkContent. java.lang.StackOverflowError</h3><p>A2:主工程A  Lib (B C) BC之间相互依赖</p>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>代码中获得系统分区</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/%E4%BB%A3%E7%A0%81%E4%B8%AD%E8%8E%B7%E5%BE%97%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<blockquote>
<p>前言:在最近的工作中涉及到从u盘拷贝大量数据到车机,偶尔有失效的情况,后面发现是sdcard存储空间不足,因此想在代码中展示出当前系统分区.查看系统分区在adb中为adb shell df </p>
</blockquote>
<h5 id="我们用如下方法可执行任意的adb-shell命令-在此仅用”df”举例"><a href="#我们用如下方法可执行任意的adb-shell命令-在此仅用”df”举例" class="headerlink" title="我们用如下方法可执行任意的adb shell命令,在此仅用”df”举例"></a>我们用如下方法可执行任意的adb shell命令,在此仅用”df”举例</h5><ul>
<li>代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] doRuntimeCmmd(String command) &#123;</span><br><span class="line">       Log.d(TAG, <span class="string">&quot;doRuntimeCmmd:&quot;</span> + command);</span><br><span class="line">       Process process = <span class="keyword">null</span>;</span><br><span class="line">       BufferedReader mOutReader = <span class="keyword">null</span>;</span><br><span class="line">       BufferedReader mErrorReader = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">           process = Runtime.getRuntime().exec(command);</span><br><span class="line">           Log.d(TAG, <span class="string">&quot;process exec: &quot;</span> + process);</span><br><span class="line">           </span><br><span class="line">           mOutReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">           <span class="keyword">int</span> mOutread;</span><br><span class="line">      <span class="keyword">char</span>[] outBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4096</span>];</span><br><span class="line">           StringBuffer output = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">           <span class="keyword">while</span> ((mOutread = mOutReader.read(outBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               output.append(outBuffer, <span class="number">0</span>, mOutread);</span><br><span class="line">           &#125;   </span><br><span class="line">           mErrorReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getErrorStream()));</span><br><span class="line">           <span class="keyword">int</span> mErrorread;</span><br><span class="line">           <span class="keyword">char</span>[] errorBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4096</span>];</span><br><span class="line">           StringBuffer error = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">             <span class="keyword">while</span> ((mErrorread = mErrorReader.read(errorBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               error.append(errorBuffer, <span class="number">0</span>, mErrorread);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           process.waitFor();</span><br><span class="line">         String[] mResult = &#123; output.toString(), error.toString() &#125;;</span><br><span class="line">           Log.d(TAG, command +<span class="string">&quot; Result:&quot;</span> + mResult[<span class="number">0</span>]);</span><br><span class="line">           Log.d(TAG, command+ <span class="string">&quot; Error:&quot;</span> + mResult[<span class="number">1</span>]);</span><br><span class="line">           <span class="keyword">return</span> mResult;</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           String[] mResult = &#123; <span class="string">&quot;error&quot;</span>, <span class="string">&quot;error&quot;</span> &#125;;</span><br><span class="line">           Log.d(TAG, command + <span class="string">&quot;  Result = &quot;</span> + mResult[<span class="number">0</span>] + <span class="string">&quot;   Error = &quot;</span> + mResult[<span class="number">1</span>]);</span><br><span class="line">           <span class="keyword">return</span> mResult;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (mOutReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mOutReader.close();</span><br><span class="line">               &#125;</span><br><span class="line">         <span class="keyword">if</span> (mErrorReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   mErrorReader.close();</span><br><span class="line">               &#125;</span><br><span class="line">           <span class="keyword">if</span> (process != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   Log.d(TAG, <span class="string">&quot;process destroy: &quot;</span> + process);</span><br><span class="line">                   process.destroy();</span><br><span class="line">               &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">               &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>我们在代码中按如下使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] runtimeCmmd = doRuntimeCmmd(<span class="string">&quot;df&quot;</span>);</span><br><span class="line">MySortViewOfCMD textView = <span class="keyword">new</span> MySortViewOfCMD(getActivity());</span><br><span class="line">textView.setCurrentString(runtimeCmmd[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<p>用此方法得到的文本结果,并不像adb命令行中格式化的,需要自定义控件</p>
<ul>
<li>自定义view实现排版<code>仅供参考</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySortViewOfCMD</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String text;</span><br><span class="line">	<span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">	<span class="keyword">private</span> ArrayMap&lt;Integer, String[]&gt; charByMap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth = <span class="number">900</span>;<span class="comment">// px</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> mHeight = <span class="number">660</span>;</span><br><span class="line">	<span class="keyword">private</span> Scroller mScroller;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lastPointX;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lastPointY;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MySortViewOfCMD</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context);</span><br><span class="line">		initPaint(context);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MySortViewOfCMD</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(context, attrs);</span><br><span class="line">		initPaint(context);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		paint.setColor(context.getResources().getColor(R.color.white));</span><br><span class="line">		paint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,</span><br><span class="line">				<span class="number">18</span>, context.getResources().getDisplayMetrics()));</span><br><span class="line">		mScroller = <span class="keyword">new</span> Scroller(context);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">		<span class="keyword">int</span> width = measureDimension(mWidth, widthMeasureSpec);</span><br><span class="line">		<span class="keyword">int</span> height = measureDimension(mHeight, heightMeasureSpec);</span><br><span class="line">		setMeasuredDimension(width, height);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> result = defaultSize;</span><br><span class="line">		<span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">		<span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">	    <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">			result = specSize;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">			result = Math.min(defaultSize, specSize);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = defaultSize;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charByMap.size(); i++) &#123;<span class="comment">//绘制行</span></span><br><span class="line">	    String[] strings = charByMap.get(i);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strings.length; j++) &#123;<span class="comment">//绘制列</span></span><br><span class="line">				<span class="keyword">if</span> (j == <span class="number">1</span>) &#123;<span class="comment">//针对第二列做特殊处理,防止与第一列重影</span></span><br><span class="line">					canvas.drawText(strings[j], j * (mWidth / <span class="number">3</span>) + <span class="number">60</span>,</span><br><span class="line">							i * <span class="number">30</span> + <span class="number">25</span>, paint);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				canvas.drawText(strings[j], j * (mWidth / <span class="number">3</span>), i * <span class="number">30</span> + <span class="number">25</span>,</span><br><span class="line">						paint);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">		<span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line"></span><br><span class="line">			lastPointX = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">			lastPointY = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> mXMove = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">			 <span class="keyword">int</span> scrolledX = (<span class="keyword">int</span>) (lastPointX - mXMove);</span><br><span class="line">	 <span class="keyword">if</span>(getScrollX() + scrolledX &lt; <span class="number">0</span>)&#123;<span class="comment">//左边界</span></span><br><span class="line">				 scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">				 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			 &#125;</span><br><span class="line">		<span class="keyword">if</span> (getScrollX() + getWidth() + scrolledX &lt; (mWidth / <span class="number">3</span>) * <span class="number">5</span>)<span class="comment">//小于右边界</span></span><br><span class="line">				mScroller.startScroll(getScrollX(), <span class="number">0</span>,</span><br><span class="line">						lastPointX - (<span class="keyword">int</span>) event.getX(), <span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">			invalidate();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 平滑滚动        </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class="line">			scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class="line">			invalidate();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentString</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.text = text;</span><br><span class="line">		charByMap = saveCharByMap(text);</span><br><span class="line">		invalidate();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据传进来的string保存每一行的字符</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">	 *            -显示的字符串 eg: file size use \n filedddd size use \n</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	 <span class="keyword">private</span> ArrayMap&lt;Integer, String[]&gt; saveCharByMap(String string) &#123;</span><br><span class="line">		String[] lineString = string.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		ArrayMap&lt;Integer, String[]&gt; charMap = <span class="keyword">new</span> ArrayMap&lt;Integer, String[]&gt;();</span><br><span class="line">		lineCount = lineString.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lineCount; i++) &#123;</span><br><span class="line">			String[] charItem = lineString[i].split(<span class="string">&quot;\\s+&quot;</span>);<span class="comment">// 按空格切出字符</span></span><br><span class="line"></span><br><span class="line">			charMap.put(i, charItem);</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">return</span> charMap;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<code>感谢android,感谢开源</code></li>
</ul>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>制作开机动画</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/%E5%88%B6%E4%BD%9C%E5%BC%80%E6%9C%BA%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<blockquote>
<p>前言:产品爆出开机动画不流畅的bug,于是和美工切了108个罗汉来,接下来就要看一下如何制作开机动画了</p>
</blockquote>
<h3 id="1-建立三个文件夹"><a href="#1-建立三个文件夹" class="headerlink" title="1. 建立三个文件夹"></a>1. 建立三个文件夹</h3><p><img src="http://upload-images.jianshu.io/upload_images/2226681-f13665665d3c9040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="temp_bootanimation.png"><br>part1中放所有的图片,part2中放播放完成后定格的图片<br>打开desc.txt<br>480 800 24 —————–这里的480代表图片的像素（大小）宽度，800代表图片的像素（大小）高度，24代表帧数,part1里面有多少图片就填多少；<br> p 1 0 part1 —————–这里的p代表标志符，1代表循环次数为1次，0代表阶段间隔时间为0，part1代表对应的文件夹名；<br>p 0 0 part2 —————–这里的p代表标志符，0代表循环次数为0次，10代表阶段间隔时间为10，part2代表对应的文件名</p>
<h3 id="2-三个都选中-右键压缩"><a href="#2-三个都选中-右键压缩" class="headerlink" title="2.三个都选中,右键压缩"></a>2.三个都选中,右键压缩</h3><p><img src="http://upload-images.jianshu.io/upload_images/2226681-f7d7987206d8737f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="temp_zip.png"><br>压缩格式选zip,压缩方式:存储</p>
<h3 id="3-制作好XX-zip"><a href="#3-制作好XX-zip" class="headerlink" title="3 .制作好XX.zip"></a>3 .制作好XX.zip</h3><p>push到system/media目录<br>执行adb shell XX 可进行预览动画</p>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>告别USB数据线,使用wifi调试</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/%E5%91%8A%E5%88%ABUSB%E6%95%B0%E6%8D%AE%E7%BA%BF,%E5%88%A9%E7%94%A8wifi%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>前言:目前在车机开发多媒体的U盘播放功能,每次插U盘就不能调试,调试就不能插U盘很不方便.有了远程调试程序,终于方便多了,唯一的缺点是wifi不稳定容易连接超时</p>
</blockquote>
<h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>使用USB数据线成功连接(抱一下大腿先)程序.打开cmd,输入<br><code>adb tcpip 5555</code><br>看到<img src="http://upload-images.jianshu.io/upload_images/2226681-a657793cd1ff5b96.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tcp_success"><br>即表示成功.</p>
<h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>打开手机wifi查看当前IP<br><code>adb connect IP:5555</code><br>此时就算拔掉USB,可以看到Eclipse还是连接着设备</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>使用adb的时候容易遇到一个错误<br><code>ADB server didn&#39;t ACK</code><br>一般情况下是端口号被360手机助手等等软件占用了</p>
<ul>
<li>解决办法<br>在cmd窗口中<br><code>adb nodaemon server</code><br>查看一下哪个端口被占用了(比如我的 5037)<br>然后<br><code>netstat -ano | findstr &quot;5037&quot;</code><br>找到被占用的端口,在任务管理器中将其结束掉</li>
</ul>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>源的理解</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/%E6%BA%90%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>源的理解</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">源的理解</h1>
        <div class="show-content">
          <h1>源是什么</h1><p>在车机开发中，最重要的一个方面就是源的处理。首先我们要知道源是什么。</p><p>学习一样新东西的时候，我喜欢类比已知的东西来“找你妹”</p><p>在应用开发中，我们播放声音使用的是请求音频焦点，一般是请求AudioManager.STREAM_MUSIC来播放音乐。然后注册一个回调来监听焦点的变化。</p><p>在车机中，因为有收音机，倒车等等独立于手机的模块。为了方便控制，定义了每一种声音播放的一种类型。相当于内部定义了一系列的焦点。一样有源改变的回调接口。在需要哪种类型的声音播放的时候，就请求对应的源，其他应用收到源改变的回调后在做相应的处理。</p><p>另外在车机开发中，常用的版本是android4.4，cpu计算能力比手机反应慢点，所以我们在开发中，因时刻注意性能的问题。</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>车机(序)</title>
    <url>/2021/02/06/%E8%BD%A6%E6%9C%BA/%E8%BD%A6%E6%9C%BA%EF%BC%88%E5%BA%8F%EF%BC%89/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>车机（序）</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">车机（序）</h1>
        <div class="show-content">
          <p>今年刚进入一家车机行业开发android，发现和互联网有很多不一样的地方。</p><p>首先第一点车机有点像平板，相对于手机来说很笨重</p><p>第二点来说，之前设计应用比较单一，不必考虑复杂的系统逻辑。对车机来说，考虑到音源切换的处理（处理不好容易混音），蓝牙连接问题，系统的返回键处理逻辑，倒车图像等等。</p><p>总体来说，车机开发也是安卓，只是涉及到android的framework层较多一点。开发应用的转车机开发入门也相对容易。</p><p>后面将再此记录在车机开发中遇到的问题。希望能见证自己的成长</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>车机</category>
      </categories>
  </entry>
  <entry>
    <title>100个基本</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/100%E4%B8%AA%E5%9F%BA%E6%9C%AC/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>100个基本</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">100个基本</h1>
        <div class="show-content">
          <p>1.不再有依赖心理</p><p> 不知什么时候起，自己的人生总想高人指点迷津。因为做选择好难啊，我怎么知道哪个才是正确的选择呢？以后会不会后悔？但是自己真正喜欢什么都不知道，别人又如何知道呢？</p><p>2.面对需求时，不要有匮乏心态，照顾好同伴</p><p>之前下了个小蓝单车，所以心里想的只能用小蓝，上次和同事一起出门，都看中了同一辆，我说你找辆小黄吧，我只下了小蓝。后面想起来做的太幼稚了，没考虑他人的感受。这种情况还有很多，一定要反省。</p><p>3.别让爱的人,因你肆无忌惮的嘴受伤</p><p>4.说话注意语气</p><p>5.每天清晨给当日设定计划</p><p>6.别进入别人给你设的怪圈</p><p>有时候想想当时气的不行的事，其实都是芝麻小事，为啥当时就会很愤怒甚至做出过激行为呢。原来是人与人之间互动之中，会自然而然的进入彼此营造的氛围中，此时若是开心的事还好，愤怒就是一触即发。</p><p>所以我的观念是在此时，把对方想成萝卜头，同意他所说的。后面再回想就不这么后悔当初做的事情了，反而崇拜起自己来～</p><p>7.相信世间的不完美</p><p>不完美的才是人生</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/Markdown%E6%8F%92%E5%85%A5%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>前言:之前一直用富文本的编辑模式,但是对代码的支持不友好,因此练习了一下markdown,记录下来,对自己有个提醒,也希望能帮助到大家<a href="https://segmentfault.com/markdown">更多技巧</a></p>
</blockquote>
<hr>
<p>#1.标题</p>
<p>#标题   —-&gt;  #标题<br>##标题   —-&gt;  ##标题<br>###标题   —-&gt;  ###标题<br>####标题   —-&gt;  ####标题<br>#####标题   —-&gt;  #####标题<br>######标题   —-&gt;  ######标题<br>目前支持六种标题大小<br>#2.引用<br>输入大于号后跟上文本,就像上面前言中显示的样式.eg: &gt;你好</p>
<blockquote>
<p>你好</p>
</blockquote>
<ul>
<li><h1 id="程序员版本"><a href="#程序员版本" class="headerlink" title="程序员版本"></a>程序员版本</h1><p>##3.1插入一行代码<br>首先我们另起一行,然后在行首连续输入两个”tab”键,跟上代码即可(<code>一定要另起一行</code>) tabtab db.addColumn(x.class,”test”);//新增的字段</p>
<p>  db.addColumn(x.class,”test”);//新增的字段<br>##3.2插入代码块<br>连续插入代码,我们需要连续输入三个符号 ```,后面可以跟上语言种类如java,然后代码块输入完毕,换行,在输入三个符号表示代码块结束 <code>键盘esc下面,波浪号的那个键</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//```java(某种编程语言)</span></span><br><span class="line"><span class="comment">//代码段</span></span><br><span class="line"><span class="comment">//```</span></span><br><span class="line"><span class="keyword">for</span> (Element e : c) &#123;</span><br><span class="line">    doSomething(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//before JDK1.5</span></span><br><span class="line"><span class="keyword">for</span> (Iterator i = c.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">    doSomething((Element) i.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面基本上可以满足程序员的基本要求了<br>##4.插入链接<br>在简书中的用法是<img src="https://upload-images.jianshu.io/upload_images/2226681-dca0142cb829876a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="链接语法.png"><br><a href="https://www.jianshu.com/p/829ed0e6010e">DDMS性能调优</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E4%B8%8A%E7%8F%AD%E8%BF%98%E6%98%AF%E5%88%9B%E4%B8%9A/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>上班还是创业</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">上班还是创业</h1>
        <div class="show-content">
          <p>上班：朝九晚五还好，整天看老板颜色，听领导安排，固定资产，涨不过房价</p><p>创业：风餐露宿，未来不确定，但是有充分的自由，一朝一夕自己当老板，风险大，收益高</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
  </entry>
  <entry>
    <title>与爱情有关</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/%E4%B8%8E%E7%88%B1%E6%83%85%E6%9C%89%E5%85%B3/</url>
    <content><![CDATA[<h4 id="故事一"><a href="#故事一" class="headerlink" title="故事一"></a>故事一</h4><p> 我的下铺是一个五十多岁的中年男子，在公司为我们做饭。每天下班他都会和家里的小朋友视频，看着真是疼爱极了。但是我们每每周末回家的时候他都待在宿舍，一年半载也不回家一次。有天无意中提起他的婚姻，他笑着说：我已经离婚了。很突然，很意外。于是我问到，怎么会呢，你们看起来这么恩爱，这么顾家，什么原因导致的呢？</p>
<p>他说，我那个婆娘，一天到晚拿我跟别个老公比，终于有一天我也成别人老公了。</p>
<p> 也许在心中有了比较，彼此在心中的位置就空出来了吧</p>
<h4 id="故事二"><a href="#故事二" class="headerlink" title="故事二"></a>故事二</h4>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>加油的人</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E5%8A%A0%E6%B2%B9%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>加油的人</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">加油的人</h1>
        <div class="show-content">
          <p>孤独，体无完肤。</p><p>热闹，不如孤独。</p><p>每个人相处下来都有或多或少的小脾气</p><p>与人相处就是不断忍耐的过程。</p><p>一个加油的人，看得淡别人的自私。</p><p>一个加油的人,放得下自己的杂念.</p><p>我希望我是一个加油的人。</p><p>加油</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>如何鉴别女友是不是处女</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E5%A6%82%E4%BD%95%E9%89%B4%E5%88%AB%E5%A5%B3%E5%8F%8B%EF%BC%9A%EF%BD%9E%EF%BC%9A%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E5%A4%84%E5%A5%B3/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>如何鉴别女友：～：：是不是处女</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">如何鉴别女友：～：：是不是处女</h1>
        <div class="show-content">
          <blockquote>很多朋友都有<i>。</i>处女情结，尤其是中国的传统文化。以前我专门研究过女生走路来判断是0不是处女的，如果走路跨步八字，合不拢腿就可能被雨露均沾了。后来大点了发现并不是这样，走路姿势是不能判断出一个女生是不是处女的。有些女生天生走路外八字，好多女优自然走“路优雅。</blockquote><p>重点来了…</p><p>前提在你了解你女友套路不深的时候</p><p>判断标准一：</p><p>不知洞在何处</p><p>是不是这啊…怎么进</p><p>我不自导啊。。</p><p>判断标准二：</p><p>如意金箍棒</p><p>哎呀，别弄了，一会又来了</p><p>嘻嘻，挺好玩的，可大可小也 我在拨拨</p><p>判断标准三：</p><p>呆</p><p>你别啥也不做啊    </p><p>你说我该怎么做</p><p>判断……</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>恕与忍</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/%E6%81%95%E4%B8%8E%E5%BF%8D/</url>
    <content><![CDATA[<p>恕他人,忍自己</p>
<p>而今常态,忍他人,恕自己</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>我眼中的刘备不是正人君子</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%88%98%E5%A4%87%E4%B8%8D%E6%98%AF%E6%AD%A3%E4%BA%BA%E5%90%9B%E5%AD%90/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>我眼中的刘备不是正人君子</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">我眼中的刘备不是正人君子</h1>
        <div class="show-content">
          <p>人们常说，时势造英雄。而我看三国演义以来，明白古代老百姓有一种病根，目光短浅，容易忘记伤痛，明白是不是英雄已经从娘胎儿就定下来的了。</p><p>刘备要是师出无名，他一生下来不是刘皇叔，关羽张飞会和素未谋面的白面书生桃园三结义吗？</p><p>都说物以类聚，人以群分。关羽张飞倒是有点性格上的相似，可谓之急性子，而刘备应该是所谓的慢性子。明明性格不合却要与之结义，可见刘备知人识人确实是个能手。</p><p>在某一回中，刘备被曹操追杀，被迫与队伍失散躲进村中。村中居民识得是刘皇叔想好好款待他。无奈战乱祸害，居民尚不能饱食。于是一村民杀死妻子来喂主，谎称为狼肉。第二天刘备启程与张飞会合，无意中看到倒在血泊中的一具尸体，遂明白昨日吃的是人肉。待自己安全抵达军营后，行赏一百金与其村。</p><p>可见君子迫于形势，也有无奈之举。我们也当更全面的了解一个人，不要他顶着光环，就认为他不能有一点点的人性，多多谅解，毕竟人在江湖飘，如果他不小心没顺你的意，也要知道，他也是人，不是神</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>朋友,不是你好就够了</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E6%9C%8B%E5%8F%8B%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%BD%A0%E5%A5%BD%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>朋友，不是你好就够了</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">朋友，不是你好就够了</h1>
        <div class="show-content">
          <p>我是大家公认的好人。</p><p>五个人坐车，我会主动去坐地铁</p><p>一帮朋友吃饭，我会悄悄去结帐</p><p>高中好不容易鼓起勇气表白，却被告知，你真的很好，但不适合我</p><p>我不好，真的不好，这么好，你怎么不接受我呢</p><p>大学时我去了离家很远的地方上学，沈阳工业大学。后来接到了一通电话，竟是她打来的，她说她也选择了沈阳…</p><p>开学那天我去接了她，但是少了一种感觉。以前没觉得她皮肤黑啊，现在也觉得略微有点胖了…</p><p>后来简单寒暄逛了校园后，我就回自己学校了，从此大学四年再也没见过…</p><p>在我大学毕业的时候，又接到了她的电话，她说，高中时要是没拒绝你，现在会不会不这样…</p><p>这个问题，我当时沉默了好久，后来说了句，一切都是最好的安排…</p><p>我不为做过的决定后悔，不管是自己的还是他人的</p><p>我只为遇见更好的她而努力</p><p>现在，遇见了</p><p>朋友，不是你不够好，而是他人觉得你不好。现在的你，已经是以前最好的你了 永远怀抱期待，明天会来的</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>猪与命</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/%E7%8C%AA%E4%B8%8E%E5%91%BD/</url>
    <content><![CDATA[<p>人世间真的有命数吗?</p>
<p>一只猪再怎么拼命挣扎,努力奋斗也逃不过被人宰割的命运吧,可是当初它为什么选择猪圈呢?猪圈里的猪又生小猪猪,让小猪猪以为他们的命运也是如此,吃饱睡,睡饱吃,很安逸的一个圈,殊不知等待他们的都是同一个命运.</p>
<p>逃出这个舒适圈,跑到野地里去,要不了多久就会长出猎人也害怕的獠牙吧,纵使没有獠牙,也有一股难以屈服,拒绝任人宰割的野性吧</p>
<p>每个认为现在安逸环境的人身处的环境,难道不是一个圈吗?待到被命运宰割的时候,怎么嚎叫也无能为力.</p>
<p>可我们有自省和选择的权力,看清身边的处境,待命运之手来临时,狠狠的咬他一口,去他妈的命!!!</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>老板领导与员工</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/%E8%80%81%E6%9D%BF,%E9%A2%86%E5%AF%BC%E4%B8%8E%E5%91%98%E5%B7%A5/</url>
    <content><![CDATA[<p>老板:不需要在场证明<br>领导:不在场证明—开会<br>员工:详述论证一下不在场的证据,以证明这个锅不是你的</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>腾讯大王卡防坑指南</title>
    <url>/2020/02/06/%E9%9A%8F%E7%AC%94/%E8%85%BE%E8%AE%AF%E5%A4%A7%E7%8E%8B%E5%8D%A1%E9%98%B2%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>最近各种免流争相上市,出于要换号的考虑入手一张腾讯大王卡(联通),踩坑之路由此开始</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/2226681-6da2ee755e612872.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="腾讯大王卡各套餐.jpg"><br>我选择的是19元/月的腾讯大王卡,刚过了一个月卡里的100元(首充50送50)余额不足了,于是下载了联通助手查询了下扣费,触目惊心</p>
<ul>
<li>坑一 流量<br>最大的坑之一<br>套外一元八百兆不是按月计算,而是按天计算<br>什么意思呢,看图说话</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/2226681-d9cf2ec0d82a1aa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2226681-a65d2ce09c2f7c44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>一天超出几kb,不超过10兆的流量都是收0.1元/兆,约20兆的流量就收了0.9元<br>手机里哪怕不装非腾讯系的应用,也保不齐系统应用走的流量,每天一毛一个月就多了三块,每天一块一个月就多给了30块,加上月租一个月就是约50块了,一天超出八百兆,流量还额外扣费,无形之中话费就没了</p>
<ul>
<li>坑二 使用微信依然扣费</li>
</ul>
<p>现在的业务基本上都是资源整合的产品,微信里面的业务有的是接入的其他公司的流量,如”发现”当中的”看一看”,”钱包”里面的”第三方服务”等,这些内容走出来的流量依然要计费的</p>
<ul>
<li>坑三 不知晓的扣费<br>1号刚充了50,2号查看就少了5元,查询了一下联通的实时扣费,<br>如4G服务费,本地拨打本地电话费,国内本地流量费…属于消费者不知情的扣费项</li>
</ul>
<hr>
<p>#防坑心经</p>
<ul>
<li>现在的手机基本上能设置应用访问网络的权限,除了必须用的支付宝等,给其它应用设置为仅wifi下访问网络</li>
<li>使用腾讯系的产品也不要掉以轻心,因为你不知道访问的资源是腾讯的还是其他公司整合的,好在现在使用免流的应用会弹出提示”腾讯大王卡已为你免流”,如果你在使用腾讯系过程中没有看到类似的字眼,则要谨慎了</li>
<li>平时手机不用时将数据流量关闭,谨防系统应用或其它应用消耗流量</li>
<li>办理全国免流套餐吧,图便宜结果使用一个应用战战兢兢,如履薄冰,想哭哭不出来</li>
<li>有一点优势是免费入驻腾讯视频vip,相当于月租每月再交vip</li>
<li>#办理全国流量包重中之重,花了20办理了40G全国流量,腰也不酸了头也不疼了</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>西游团队的核心你以为是唐僧麽？</title>
    <url>/2021/02/06/%E9%9A%8F%E7%AC%94/%E8%A5%BF%E6%B8%B8%E5%9B%A2%E9%98%9F%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BD%A0%E4%BB%A5%E4%B8%BA%E6%98%AF%E5%94%90%E5%83%A7%E9%BA%BD%EF%BC%9F/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>西游团队的核心你以为是唐僧麽？</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">西游团队的核心你以为是唐僧麽？</h1>
        <div class="show-content">
          <p>小时候经常看六小龄童老师演的西游记，长大了才有想法看一看原著，颠覆了很多观念。比如大慈大悲的观世音菩萨，其实是心狠手辣之人，猪八戒加入团队是为了暗杀某人…</p><p>首先聊一下主题吧，为什么唐僧不是团队的核心。作为西游的主导者，大唐皇帝御弟，第十世如来坐下弟子转世的金蝉子，怎么算都是队伍的关键吧。其实不然，转世转世，如今也只是一个凡人。大家都记得孙悟空刚逃出五指山遇到老虎那一回吧。唐僧马上准备逃跑，吓得心惊胆战。更别说一路上歪瓜劣枣的妖怪了。书上多处说的是唐僧遇到长得丑的妖怪，吓得跌倒马下，脚不自已。。全凭悟空在旁打气，“师父放心，我能摆平”。唐僧才能勉强淡定。</p><p>书中多处也描写到唐僧被抓走后，整日哭哭啼啼，语无伦次。呆子总想散伙，悟空又站出来鼓舞士气，坚定目标…沙僧说二师兄，就听大师兄的吧！</p><p>所以综上所述，悟空才是西游团队最核心的一股东。</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Android基础进阶之EffectiveJava翻译系列(第九章-并发)</title>
    <url>/2020/02/06/Android%E6%97%A5%E8%AE%B0/Android%E5%9F%BA%E7%A1%80%E8%BF%9B%E9%98%B6%E4%B9%8BEffectiveJava%E7%BF%BB%E8%AF%91%E7%B3%BB%E5%88%97(%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E5%B9%B6%E5%8F%91)/</url>
    <content><![CDATA[<pre><code>线程允许多个任务同时执行.并发编程比单线程难,因为很多事情一起处理容易出错,也很难减少错误,但是你不能避免并发.这章帮助你编写简洁的,正确的,良好阅读性的并发编程
</code></pre>
<h5 id="Item66-同步共享的可变数据"><a href="#Item66-同步共享的可变数据" class="headerlink" title="Item66 同步共享的可变数据"></a>Item66 同步共享的可变数据</h5><p>​     synchronized 关键字可以保证一次只有一个线程访问代码块,许多开发者认为同步就是一种互斥,防止对象在另一个线程修改时处于不一致的状态.在这种观点中,对象处于一种正确的状态,因为访问它的方法锁住了.这些方法确保对象的状态由一种状态安全的转移到另一种状态.</p>
<p>​    这种观点只正确了一半,不同步的话,一个线程的改变对其它线程是不可见的.通过相同的锁,同步不仅阻止线程在不一致状态下观察对象，而且确保每个进入同步方法或块的线程都能看到所有一致性的效果.</p>
<p>​    考虑一下从一个线程停止另一个线程,Java lib提供了Thread.stop方法,但是这个方法被遗弃了,因为它是不安全的—将导致数据损坏.一种建议方法是获取到第一个线程的boolean变量,一些人可能会这么写:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (!stopRequested)</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		backgroundThread.start();</span><br><span class="line">		TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		stopRequested = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​    你可能期望这个程序运行大约一秒，然后主线程设置stopRequested为true，从而导致后台线程的循环终止 .然而在我的机器上，程序永远不会停：子线程永远在循环！</p>
<p>​    问题在于，在没有同步的情况下，无法保证后台线程何时会看到主进程所做的修改. 在没有同步的情况下，虚拟机转换成以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!done)</span><br><span class="line">	i++;</span><br><span class="line"><span class="comment">//转换</span></span><br><span class="line"><span class="keyword">if</span> (!done)</span><br><span class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">		i++;</span><br></pre></td></tr></table></figure>
<p>修复方式如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> stopRequested;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">requestStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		stopRequested = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">stopRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> stopRequested;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	<span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (!stopRequested())</span><br><span class="line">					i++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		backgroundThread.start();</span><br><span class="line">		TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		requestStop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    <strong>注意:读和写都是同步的,光对写方法同步,同步会失效</strong></p>
<p>还可以使用volatile关键字修复为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stopRequested;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">			Thread backgroundThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">while</span> (!stopRequested)</span><br><span class="line">						i++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			backgroundThread.start();</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">			stopRequested = <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但使用volatile关键字要小心,考虑如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> nextSerialNumber = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">generateSerialNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> nextSerialNumber++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>乍看之下没有什么问题,但是”++”操作不是原子性的,包含了两个操作,一个是读旧值,另一个是在旧值的基础上加一,在赋值.修复方式为加上synchronized关键字:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//good</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> nextSerialNumber = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">generateSerialNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> nextSerialNumber++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>​    避免此类问题最好的方式是不要共享可变数据.要么共享不可变的数据,要么就不共享.换句话说,**在一个线程中定义可变数据.**如果采用此策略，则必须将其文档化，以便程序维护此原则</p>
<blockquote>
<p>总之,当多个线程共享数据时，读取或写入数据的每个线程都必须执行同步.没有同步,无法保证一个线程的修改对另一个线程可见.这将会导致程序安全问题,而且很难调试.如果你只需要内部间的线程通信而不考虑互斥, volatile 关键字可以替代synchronized,但是volatile很难被正确使用</p>
</blockquote>
<hr>
<h5 id="Item-67-避免过度同步"><a href="#Item-67-避免过度同步" class="headerlink" title="Item 67: 避免过度同步"></a>Item 67: 避免过度同步</h5><p>Item66警示了不使用同步的危险性,Item 67讨论完全相反的一面.在某种情况下,过度使用同步会导致性能下降,死锁或者不可预期的行为</p>
<p>为了避免重复和安全故障，千万不要在同步方法或块内控制客户端.换句话说,不要再同步方法中调用需要重写的方法或者从客户端提供的对象方法(这种方法被称为”外星人”).因为同步块不知道这个方法是干什么的也不能控制这个客户端,调用它将会导致异常或者数据损坏</p>
<p>考虑如下的”外星人”代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad Broken - invokes alien method from synchronized block!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">ForwardingSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ObservableSet</span><span class="params">(Set&lt;E&gt; set)</span> </span>&#123; <span class="keyword">super</span>(set); &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SetObserver&lt;E&gt;&gt; observers = </span><br><span class="line">                    <span class="keyword">new</span> ArrayList&lt;SetObserver&lt;E&gt;&gt;();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(SetObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">  	  <span class="keyword">synchronized</span>(observers) &#123;</span><br><span class="line">		  observers.add(observer);</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeObserver</span><span class="params">(SetObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">synchronized</span>(observers) &#123;</span><br><span class="line">		  <span class="keyword">return</span> observers.remove(observer);</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">synchronized</span>(observers) &#123;</span><br><span class="line">		<span class="keyword">for</span> (SetObserver&lt;E&gt; observer : observers)</span><br><span class="line">			observer.added(<span class="keyword">this</span>, element);</span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> added = <span class="keyword">super</span>.add(element);</span><br><span class="line">	<span class="keyword">if</span> (added)</span><br><span class="line">		notifyElementAdded(element);</span><br><span class="line">	<span class="keyword">return</span> added;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (E element : c)</span><br><span class="line">		result |= add(element); </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>observers通过addObserver/removeObserver 订阅/取消订阅,但是SetObserver<E> observer被传递进来了:</E></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SetObserver</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// Invoked when an element is added to the observable set</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;E&gt; set, E element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在测试运行时,上述代码似乎运行良好,如打印0~99:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	ObservableSet&lt;Integer&gt; set =</span><br><span class="line">		<span class="keyword">new</span> ObservableSet&lt;Integer&gt;(<span class="keyword">new</span> HashSet&lt;Integer&gt;());</span><br><span class="line">	set.addObserver(<span class="keyword">new</span> SetObserver&lt;Integer&gt;() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;Integer&gt; s, Integer e)</span> </span>&#123;</span><br><span class="line">		System.out.println(e)</span><br><span class="line">	&#125;&#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">		set.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在我们来做一点改变:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set.addObserver(<span class="keyword">new</span> SetObserver&lt;Integer&gt;() &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">added</span><span class="params">(ObservableSet&lt;Integer&gt; s, Integer e)</span> </span>&#123;</span><br><span class="line">		System.out.println(e);</span><br><span class="line">		<span class="keyword">if</span> (e == <span class="number">23</span>) s.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们会期望打印出0-23,实际上会发生什么呢,打印出0~23后接着会报ConcurrentModificationException.因为我们正在移除集合中的元素,此时notifyElementAdded正在遍历集合</p>
<p>解决方法是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//good 将&quot;外星人&quot;代码移除同步块</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	List&lt;SetObserver&lt;E&gt;&gt; snapshot = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">synchronized</span>(observers) &#123;</span><br><span class="line">		snapshot = <span class="keyword">new</span> ArrayList&lt;SetObserver&lt;E&gt;&gt;(observers);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (SetObserver&lt;E&gt; observer : snapshot)</span><br><span class="line">		observer.added(<span class="keyword">this</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上,有一种更好的方式移除同步代码中的外星人代码,在JDK1.5之后,Java提供了一系列并发集合,如 CopyOnWriteArrayList刚好可以解决上面的问题,很适合于观察者模式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//good Thread-safe observable set with CopyOnWriteArrayList</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SetObserver&lt;E&gt;&gt; observers = </span><br><span class="line">	<span class="keyword">new</span> CopyOnWriteArrayList&lt;SetObserver&lt;E&gt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(SetObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">	observers.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeObserver</span><span class="params">(SetObserver&lt;E&gt; observer)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> observers.remove(observer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyElementAdded</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (SetObserver&lt;E&gt; observer : observers)</span><br><span class="line">		observer.added(<span class="keyword">this</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一部分讨论了正确性,现在我们看看性能.在多核时代,过度同步的开销并不在CPU获取锁身上,真正的开销在于平行执行的机会和多个核心CPU保持一致的内存记忆模型.过度同步另一个隐藏的开销是减少了虚拟机优化代码块的执行</p>
<p>并发使用的前提是保证可变对象线程安全,我们仅仅需要在需要同步的地方同步,而不是将整个对象同步.因为这个原因,在1.5的版本,StringBuffer被StringBuild替代了,不要将整个对象同步,而仅仅告知它是非线程安全对象,然后客户端调用的时候在做适当处理</p>
<blockquote>
<p>总之,为了避免死锁和数据损坏,不要写”外星人”代码,尽量减少同步块中的工作量.在多核时代,更重要的是不使用同步.当你需要设计一个可变类的时候,好好想想在该同步的地方同步,不要过度</p>
</blockquote>
<hr>
<h5 id="Item-68-使用Java或者Android平台提供好的线程工具类"><a href="#Item-68-使用Java或者Android平台提供好的线程工具类" class="headerlink" title="Item 68:使用Java或者Android平台提供好的线程工具类"></a>Item 68:使用Java或者Android平台提供好的线程工具类</h5><p>不要直接使用thread,因为它控制不住</p>
<p>在JDK1.5中,java.util.concurrent提供了基于接口的任务类框架Executor,创建了一种更好的工作流方式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line">executor.execute(runnable);<span class="comment">//执行</span></span><br><span class="line">executor.shutdown();<span class="comment">//优雅的通知停止</span></span><br></pre></td></tr></table></figure>


<p>你可以用ExecutorService做很多事情,比如你可以等待特定任务完成,可以等待任务停止(用awaitTermination方法)等等</p>
<p>如果你想多个线程做任务队列里的工作,可以通过线程池创建不同的ExecutorService.  java.util.concurrent.Executors提供了很多你需要的静态工厂方法,你也可以直接使用 ThreadPoolExecutor.</p>
<p>对特定的任务选择合适的线程池.如果你想写一个小的轻量级的加载服务,用Executors.newCachedThreadPool是一个很好的选择.但是这个线程池不适合做很重的操作,Executors.newFixedThreadPool是一个很好的选择,内部维护了一个固定数量的线程.</p>
<p>完整的Executor介绍超出了本书的内容,有兴趣可以参考<Java concurrency in practice></Java></p>
<hr>
<h5 id="Item-69-使用并发工具类代替wait和notify"><a href="#Item-69-使用并发工具类代替wait和notify" class="headerlink" title="Item 69: 使用并发工具类代替wait和notify"></a>Item 69: 使用并发工具类代替wait和notify</h5><p>随着1.5版本的诞生,wait和notify使用越来越少了,因为Java平台提供了高效的并发工具类</p>
<p>在java.util.concurrent提供了三种工具类</p>
<p>1.前面介绍的Executor框架</p>
<p>2.并发集合</p>
<p>3.同步器</p>
<p>并发集合提供了基于标准集合接口(如List,Queue,Map)的高性能并发,为了实现高并发,这些接口管理内部的同步.因此在不需要并发的情况下不要使用这些集合,因为访问锁的原因减慢了程序运行</p>
<p>这意味着客户端不能原子性的使用并发集合组合方法,因此有一些接口集成了基于状态修改的操作来提供原子性.如,ConcurrentMap 集成 Map并添加了自己的方法如putIfAbsent(key,value)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未优化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, String&gt; map = </span><br><span class="line">	<span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intern</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	String previousValue = map.putIfAbsent(s, s);</span><br><span class="line">	<span class="keyword">return</span> previousValue == <span class="keyword">null</span> ? s : previousValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>事实上,有一种更好的方式,ConcurrentHashMap优化过检索操作,如get.因此:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化后,运行更快</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intern</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startNanos = System.nanoTime();</span><br><span class="line">	String result = map.get(s);</span><br><span class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">		result = map.putIfAbsent(s, s);</span><br><span class="line">		<span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">			result = s;</span><br><span class="line">	&#125;</span><br><span class="line">    Log.d(<span class="string">&quot;time&quot;</span>,<span class="string">&quot;spend &quot;</span>+System.nanoTime() - startNanos);</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于间隔计时来说,建议使用System.nanoTime(),它比 System.currentTimeMillis更精确,而且不受系统时间调整的影响</p>
<p>虽然你总是应该使用并发工具,但是你可能有时会用到wait和notify.标准的调用wait方法模板如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The standard idiom for using the wait method</span></span><br><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">	<span class="keyword">while</span> (&lt;condition does not hold&gt;)</span><br><span class="line">		obj.wait(); <span class="comment">// (Releases lock, and reacquires on wakeup)</span></span><br><span class="line">	... <span class="comment">// Perform action appropriate to condition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>永远在循环内部调用wait方法</strong>,循环会在wait之前或之后检查条件是否成立</p>
<p>相关问题是是否应使用“notify”或“notifyAll”来唤醒等待线程.（重复调用notify只会唤醒一个等待的线程,notifyAll会唤醒所有的等待线程.).有一个合理的，保守的建议说你应该始终使用NotifyAll,它总是会产生正确的结果，因为它保证唤醒线程,可能也会唤醒其他线程，但这不会影响程序的正确性.这些线程将检查它们等待的条件，发现不满足，将继续等待</p>
<p>作为一种优化来讲,你应该选择notify.如果所有的线程都在等待同一个条件,notify保证同一时间只有一个线程的条件为真</p>
<blockquote>
<p>总之,直接使用wait和notify的情况已经很少了,如果需要用的话请参考上面的模板并确保线程间的一致性</p>
</blockquote>
<hr>
<h5 id="Item-70-Document-thread-safety"><a href="#Item-70-Document-thread-safety" class="headerlink" title="Item 70: Document thread safety"></a>Item 70: Document thread safety</h5><p>文档注释清楚线程安全性</p>
<p>一个类的行为怎么样,有很重要一部分取决于客户端.如果你没有声明清楚一个类的方法,用这个类的程序员将会被迫做出一些假设.如果这些假设是错误的,结果不言自明.</p>
<p><strong>线程安全等级有很多种,一个类必须注释好它支持的线程安全等级</strong></p>
<p>以下列出了部分线程安全等级:</p>
<ul>
<li><p>immutable-不可变的,这个类的实例输出常量,没有必要在外部同步,如String,BigInteger</p>
</li>
<li><p>unconditional thread-safe-无条件线程安全,这个类的实例是可变的,但是内部处理了用于并发的同步,所以也没有必要外部同步,如Random,ConcurrentHashMap</p>
</li>
<li><p>conditionally thread-safe-同无条件线程安全一样,除非一些方法为了并发需要外部同步.如Collections.synchronized返回的集合使用iterators需要外部同步</p>
</li>
<li><p>not thread-safe-线程不安全,这个类的实例是可变的.并发使用的情况下调用端需要对每个方法都同步.如ArrayList,HashMap</p>
</li>
<li><p>thread-hostile-线程敌对,很少使用.即使使用了外部同步依然是线程不安全的.如System.runFinalizersOnExit(已经被遗弃)</p>
</li>
</ul>
<p>文档注释条件线程安全类需要小心.你必须声明哪些调用序列需要外部同步,调用序列都需要哪些锁对象.很典型的情况锁对象是实例本身,但是也有例外.如果一个对象持有了另一个view的引用,调用端需要对返回的对象同步,防止对象对view做修改.例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;K, V&gt; m = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;K, V&gt;());</span><br><span class="line">...</span><br><span class="line">Set&lt;K&gt; s = m.keySet(); <span class="comment">// 不需要放在同步块中</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">synchronized</span>(m) &#123; <span class="comment">// 同步m 而不是s</span></span><br><span class="line">	<span class="keyword">for</span> (K key : s)</span><br><span class="line">		key.f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当一个类提交使用一个可公开访问的锁时，它使客户端能够执行一系列的方法修改，但是这种灵活性是要付出代价的.它不兼容高性能的并发集合排序控制,如ConcurrentHashMap或ConcurrentLinkedQueue.此外，客户端可以通过长期持有公开访问锁制造”服务拒绝”攻击. 这可以是偶然的,也可以是有意的.</p>
<p>为了防止”服务拒绝”攻击,你应该使用私有对象锁来代替同步块:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();<span class="comment">//避免&quot;服务拒绝&quot;攻击</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">	...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意lock是用final修饰的,防止修改了锁的内容</p>
<p>值得重申的是,私有对象锁只能用于无条件线程安全类,因为条件线程安全类需要在调用方法的时候声明需要获取的锁对象.</p>
<blockquote>
<p>总之,每一个类应该文档注释它的线程安全属性</p>
</blockquote>
<hr>
<h5 id="Item-71-Use-lazy-initialization-judiciously"><a href="#Item-71-Use-lazy-initialization-judiciously" class="headerlink" title="Item 71: Use lazy initialization judiciously"></a>Item 71: Use lazy initialization judiciously</h5><p>明智地使用延迟初始化</p>
<p>延迟初始化是为了在需要用到值的地方初始化.如果这个值从不需要,这个实例也从不会初始化.延迟初始化是一种优化策略,也可以用来打破实例初始化的有害循环.</p>
<p>对大部分的优化来说,最好的建议是<strong>不要优化,除非你不得不做</strong></p>
<p>,延迟初始化是一把双刃剑.它降低了初始化一个类的代价,却增加了访问这种字段的代价.如下情况会损害性能:需要延迟加载字段在类当中使用占比,用于初始化的代价有多大,访问有多频繁.</p>
<p>也就是说,延迟初始化有其用途.如果一个字段仅在类实例的一小部分上被访问,并且初始化该字段的代价很高,那么延迟初始化可能是值得的.唯一确定的方法是测量有和没有延迟初始化的类的性能.</p>
<p>在大多数的文章中,都<strong>建议使用普通初始化</strong>.下面是典型的普通初始化声明:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FieldType field = computeFieldValue();</span><br></pre></td></tr></table></figure>
<p>如果你想使用延迟初始化来中断初始化循环,使用synchronized关键字:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lazy initialization of instance field - synchronized accessor</span></span><br><span class="line"><span class="keyword">private</span> FieldType field;</span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (field == <span class="keyword">null</span>)</span><br><span class="line">		field = computeFieldValue();</span><br><span class="line">	<span class="keyword">return</span> field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当你需要使用延迟初始化来提高性能,有如下三种模型</p>
<ul>
<li>静态字段,使用延迟初始化holder模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Lazy initialization holder class idiom for static fields</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldHolder</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> FieldType field = computeFieldValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> FieldHolder.field; &#125;</span><br></pre></td></tr></table></figure>
<p>当getField()方法第一次被调用,它会读FieldHolder.field</p>
<p>,导致FieldHolder类初始化.这种模式的美妙之处在于getField()不需要同步修饰而且只执行字段访问,所以延迟初始化不会增加访问的开销.</p>
<ul>
<li>实例字段,使用双重检查模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"><span class="function">FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	FieldType result = field;</span><br><span class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123; <span class="comment">// First check (no locking)</span></span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			result = field;</span><br><span class="line">			<span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="comment">// Second check (with locking)</span></span><br><span class="line">				field = result = computeFieldValue();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码可能看起来有点复杂.特别是对局部变量结果可能不明确.此变量所做的是确保字段在它已经初始化的情况下只读取一次.虽然这并不是绝对必要的,但它可能会提高性能,并且按照适用于低级别并发编程的标准来说更加优雅.在我的机器上,上面的方法比没有局部变量的版本明显快25%。</p>
<p>在JDK1.5之前,双重检查模型不能很好的工作,因为volatile关键字不够强壮来支撑它.之后的版本修复了这个问题.当然你也可以用这种方式来延迟初始化静态实例,但holder模型对于静态实例是最好的选择</p>
<ul>
<li>实例字段,不介意重复初始化,使用单检查模型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Single-check idiom - can cause repeated initialization!</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> FieldType field;</span><br><span class="line"><span class="function"><span class="keyword">private</span> FieldType <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	FieldType result = field;</span><br><span class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) </span><br><span class="line">		field = result = computeFieldValue();</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上不仅仅可以用于实例,也可以用于Object</p>
<blockquote>
<p>总之,你应该正常地初始化大多数字段,而不是延迟加载.如果必须延迟初始化字段以实现性能目标,或打破有害的初始化循环.有如上三种模型做参考.</p>
</blockquote>
<hr>
<h5 id="Item-72-Don’t-depend-on-the-thread-scheduler"><a href="#Item-72-Don’t-depend-on-the-thread-scheduler" class="headerlink" title="Item 72: Don’t depend on the thread scheduler"></a>Item 72: Don’t depend on the thread scheduler</h5><p>不要依赖线程调度</p>
<p>当许多线程运行时,线程调度决定哪些线程要运行,以及运行多长时间.任何合理的操作系统都将试图公平地做出这种判断,但是策略可以不同.因此,编写好的程序不应该取决于策略细节.任何依赖线程调度器进行正确性或性能的程序很可能是不可移植的</p>
<p>写一个强健的,响应快的,可移植的程序最好的方式是确保可运行的线程数量不明显超过处理器的数量.这样程序的行为在不同的策略下也没有太大变化.注意,可运行线程的数量不等同于线程总数.处于wait状态下的线程是非运行线程.</p>
<p>减少可运行线程数量的主要技术是让每个线程做一些有用的工作,然后等待更多的线程.如果线程没有做有用的工作,它们就不应该运行.在Executor Framework(Item68)中,这意味着适当地调整线程池的大小,并保持任务相当小且相互独立.任务不应该太小否则调度开销会损害性能</p>
<blockquote>
<p>总之,不要依赖线程调度来确保程序的正确性.也不要依赖Thread.yield或线程优先级.线程优先级可能被谨慎地用于提高已经工作的程序的服务质量,但是绝不能用来”修复”无法工作的程序.</p>
</blockquote>
<hr>
<h5 id="Item-73-Avoid-thread-groups"><a href="#Item-73-Avoid-thread-groups" class="headerlink" title="Item 73: Avoid thread groups"></a>Item 73: Avoid thread groups</h5><p>避免使用线程组</p>
<p>线程组并没有提供很多有用的功能,而且它们提供的许多功能都存在缺陷.线程组最好被看作是一个失败的实验.你应该忽略它们的存在.如果你设计了一个处理逻辑线程组的类,那么你应该使用线程池来替代</p>
<hr>
<blockquote>
<p>?为什么xml布局中,使用了layout_weight=”1”,会提示将宽/高设为0dp?</p>
</blockquote>
<p>本章完<br><a href="https://www.jianshu.com/p/009327a97ae9">第八章:异常</a>   </p>
]]></content>
      <categories>
        <category>Android日记</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/06/Android%E6%97%A5%E8%AE%B0/xUtils3%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>xUtils3用法</title>
    <style type="text/css" media="all">
      body {
        margin: 0;
        font-family: "Helvetica Neue", Helvetica, Arial, "Hiragino Sans GB", sans-serif;
        font-size: 14px;
        line-height: 20px;
        color: #777;
        background-color: white;
      }
      .container {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
      }

      .post {
        font-family: Georgia, "Times New Roman", Times, "SimSun", serif;
        position: relative;
        padding: 70px;
        bottom: 0;
        overflow-y: auto;
        font-size: 16px;
        font-weight: normal;
        line-height: 25px;
        color: #515151;
      }

      .post h1{
        font-size: 50px;
        font-weight: 500;
        line-height: 60px;
        margin-bottom: 40px;
        color: inherit;
      }

      .post p {
        margin: 0 0 35px 0;
      }

      .post img {
        border: 1px solid #D9D9D9;
      }

      .post a {
        color: #28A1C5;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="post">
        <h1 class="title">xUtils3用法</h1>
        <div class="show-content">
          <p>转载自:<a href="http://blog.csdn.net/smartbetter/article/details/51866792" target="_blank">http://blog.csdn.net/smartbetter/article/details/51866792</a></p><p>1.先来认识一下xUtils3<br></p><p><b>1）xUtils3简介</b></p><p>xUtils是目前功能比较完善的一个<a href="http://lib.csdn.net/base/android" target="_blank">Android</a>开源框架，最近又发布了xUtil3.0，在增加新功能的同时又提高了框架的性能，下面来看看官方（<a href="https://github.com/wyouflf/xUtils3" target="_blank">https://github.com/wyouflf/xUtils3</a>）对xUtils3的介绍：</p><p>xUtils包含了很多实用的android工具；</p><p>xUtils支持超大文件(超过2G)上传，更全面的http请求协议支持(11种谓词)，拥有更加灵活的ORM，更多的事件注解支持且不受混淆影响；</p><p>xUtils 最低兼容Android 4.0 (api level 14)；</p><p>xUtils3变化较多所以建立了新的项目不在旧版(github.com/wyouflf/xUtils)上继续维护, 相对于旧版本：</p><p>HTTP实现替换HttpClient为UrlConnection, 自动解析回调泛型, 更安全的断点续传策略；</p><p>支持标准的Cookie策略, 区分domain, path；</p><p>事件注解去除不常用的功能, 提高性能；</p><p>数据库api简化提高性能, 达到和greenDao一致的性能；</p><p>图片绑定支持gif(受系统兼容性影响, 部分gif文件只能静态显示), webp; 支持圆角, 圆形, 方形等裁剪, 支持自动旋转。</p><p><b>2）在我们的项目中快速配置xUtils3</b></p><p>xUtils3的配置十分的简单：</p><p>2-1）使用Gradle构建时添加一下依赖即可</p><p>compile'org.xutils:xutils:3.3.36'</p><p>如果使用eclipse可以点击下面链接下载aar文件， 然后用zip解压，取出jar包和so文件。</p><p>Github下载：<a href="https://github.com/wyouflf/xUtils3" target="_blank">https://github.com/wyouflf/xUtils3</a></p><p>JCenter下载：<a href="http://jcenter.bintray.com/org/xutils/xutils/" target="_blank">http://jcenter.bintray.com/org/xutils/xutils/</a></p><p>Maven下载1：<a href="http://central.maven.org/maven2/org/xutils/xutils/" target="_blank">http://central.maven.org/maven2/org/xutils/xutils/</a></p><p>Maven下载2：<a href="http://repo1.maven.org/maven2/org/xutils/xutils/" target="_blank">http://repo1.maven.org/maven2/org/xutils/xutils/</a></p><p>2-2）加入权限</p><p><br></p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-76a3f0cd863ecd63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-76a3f0cd863ecd63.png?imageMogr2/auto-orient/strip" data-image-slug="76a3f0cd863ecd63" data-width="542" data-height="49"><br><div class="image-caption"></div>
</div><p>2-3）创建Application</p><p>public class MyApp extends Application{</p><p>@Override public void onCreate() {</p><p>super.onCreate();       </p><p> x.Ext.init(this);       </p><p> x.Ext.setDebug(false);//输出debug日志，开启会影响性能</p><p>}}</p><p>2-4）在AndroidManifest文件中注册MyApp</p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-b0f05958b6cea057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-b0f05958b6cea057.png?imageMogr2/auto-orient/strip" data-image-slug="b0f05958b6cea057" data-width="217" data-height="94"><br><div class="image-caption"></div>
</div><p>xUtils3主要包含注解模块、网络模块、图片模块和<a href="http://lib.csdn.net/base/mysql" target="_blank">数据库</a>模块，下面将做一一说明。</p><p><a href target="_blank">2.xUtils3注解模块的使用</a></p><p>xUtils3注解模块在实际开发中的使用如下：</p><p><b>1）Activity的注解的使用如下：</b></p><p><br></p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-832d7201c174dd27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-832d7201c174dd27.png?imageMogr2/auto-orient/strip" data-image-slug="832d7201c174dd27" data-width="418" data-height="246"><br><div class="image-caption"></div>
</div><p><b>2）Fragment的注解的使用如下：</b></p><p><br></p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-41f09c1fbd9e13b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-41f09c1fbd9e13b2.png?imageMogr2/auto-orient/strip" data-image-slug="41f09c1fbd9e13b2" data-width="594" data-height="246"><br><div class="image-caption"></div>
</div><p><b>3）为按钮设置点击事件</b></p><p>方法必须私有限定,</p><p>方法参数形式必须和type对应的Listener接口一致.</p><p>注解参数value支持数组: value={id1, id2, id3}</p><p><br></p><div class="image-package">
<img src="http://upload-images.jianshu.io/upload_images/2226681-d6e88ae27bf1ec47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" data-original-src="http://upload-images.jianshu.io/upload_images/2226681-d6e88ae27bf1ec47.png?imageMogr2/auto-orient/strip" data-image-slug="d6e88ae27bf1ec47" data-width="570" data-height="324"><br><div class="image-caption"></div>
</div><p>强调：使用注解模块一定要注意初始化视图注解框架。</p><p><a href target="_blank">3.xUtils3网络模块的使用</a></p><p>xUtils3网络模块大大方便了在实际开发中网络模块的开发，xUtils3网络模块大致包括GET请求、POST请求、如何使用其他请求方式、上传文件、下载文件、使用缓存等功能，下面将做一一说明：</p><p><b>1）GET请求</b></p><p><br></p><p>下面我们来看下带有缓存的GET请求，POST请求和其他请求方式类似，后面就不再赘述：</p><p><b>带有缓存的GET请求：</b></p><p>RequestParams params =newRequestParams(url);params.addQueryStringParameter("username","abc");params.addQueryStringParameter("password","123");// 默认缓存存活时间, 单位:毫秒（如果服务器没有返回有效的max-age或Expires则参考）params.setCacheMaxAge(1000*60);x.http().get(params,newCallback.CacheCallback() {privatebooleanhasError =false;privateString result =null;@OverridepublicbooleanonCache(String result) {//得到缓存数据, 缓存过期后不会进入this.result = result;returntrue;//true: 信任缓存数据, 不再发起网络请求; false不信任缓存数据}@OverridepublicvoidonSuccess(String result) {//如果服务返回304或onCache选择了信任缓存,这时result为nullLog.i("JAVA","开始请求");if(result !=null) {this.result = result;        }    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {        hasError =true;        Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();if(exinstanceofHttpException) {//网络错误HttpException httpEx = (HttpException) ex;intresponseCode = httpEx.getCode();            String responseMsg = httpEx.getMessage();            String errorResult = httpEx.getResult();//...}else{//其他错误//...}    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {if(!hasError &amp;&amp; result !=null) {//成功获取数据Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();        }    }});</p><p><br></p><p>上面onCache方法中需要注意的几点：</p><p>a）如果服务端没有返回过期时间，参考params.setCacheMaxAge(maxAge)方法。</p><p>b）客户端会根据服务端返回的header中max-age或expires来确定本地缓存是否给onCache方法。如果服务端没有返回max-age或expires，那么缓存将一直保存，除非这里自己定义了返回false，那么xUtils将请求新数据, 来覆盖它。</p><p>c）如果信任该缓存返回true，将不再请求网络。返回false继续请求网络，但会在请求头中加上ETag,Last-Modified等信息。如果服务端返回304，则表示数据没有更新，不继续加载数据。</p><p><b>2）POST请求</b></p><p>RequestParamsparams=newRequestParams(url);params.addBodyParameter("username","abc");params.addParameter("password","123");params.addHeader("head","android");//为当前请求添加一个头x.http().post(params,newCallback.CommonCallback() {    @OverridepublicvoidonSuccess(String result) {//解析result}    @OverridepublicvoidonError(Throwable ex, boolean isOnCallback) {    }    @OverridepublicvoidonCancelled(CancelledException cex) {    }    @OverridepublicvoidonFinished() {    }});</p><p><br></p><p><b>3）其他网络请求方式</b></p><p>RequestParams params =newRequestParams(url);params.addParameter("username","abc");x.http().request(HttpMethod.PUT, params,newCallback.CommonCallback() {@OverridepublicvoidonSuccess(String result) {//解析result}@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }});</p><p><br></p><p><br></p><p><b>4）上传文件</b></p><p>String path="/mnt/sdcard/Download/icon.jpg";RequestParams params =newRequestParams(url);params.setMultipart(true);params.addBodyParameter("file",newFile(path));x.http().post(params,newCallback.CommonCallback() {@OverridepublicvoidonSuccess(String result) {    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }});</p><p><br></p><p><b>5）下载文件</b></p><p>这里以下载apk为例进行说明，apk下载完成后，自动调用系统的安装方法。</p><p>url ="http://127.0.0.1/server/abc.apk";RequestParams params =newRequestParams(url);//自定义保存路径，Environment.getExternalStorageDirectory()：SD卡的根目录params.setSaveFilePath(Environment.getExternalStorageDirectory()+"/myapp/");//自动为文件命名params.setAutoRename(true);x.http().post(params,newCallback.ProgressCallback() {@OverridepublicvoidonSuccess(File result) {//apk下载完成后，调用系统的安装方法Intent intent =newIntent(Intent.ACTION_VIEW);        intent.setDataAndType(Uri.fromFile(result),"application/vnd.android.package-archive");        getActivity().startActivity(intent);    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }//网络请求之前回调@OverridepublicvoidonWaiting() {    }//网络请求开始的时候回调@OverridepublicvoidonStarted() {    }//下载的时候不断回调的方法@OverridepublicvoidonLoading(longtotal,longcurrent,booleanisDownloading) {//当前进度和文件总大小Log.i("JAVA","current："+ current +"，total："+total);     }});</p><p><br></p><p><a href target="_blank">4.xUtils3图片模块的使用</a></p><p>xUtils3图片模块，重点在于加载图片的4个bind方法，loadDrawable与loadFIle用法和ImageOptions用法，需多加练习。</p><p><b>1）xUtils3 ImageOptions：</b></p><p>//通过ImageOptions.Builder().set方法设置图片的属性ImageOptions imageOptions=newImageOptions.Builder().setFadeIn(true).build();//淡入效果//ImageOptions.Builder()的一些其他属性：.setCircular(true)//设置图片显示为圆形.setSquare(true)//设置图片显示为正方形.setCrop(true).setSize(200,200)//设置大小.setAnimation(animation)//设置动画.setFailureDrawable(Drawable failureDrawable)//设置加载失败的动画.setFailureDrawableId(intfailureDrawable)//以资源id设置加载失败的动画.setLoadingDrawable(Drawable loadingDrawable)//设置加载中的动画.setLoadingDrawableId(intloadingDrawable)//以资源id设置加载中的动画.setIgnoreGif(false)//忽略Gif图片.setParamsBuilder(ParamsBuilder paramsBuilder)//在网络请求中添加一些参数.setRaduis(intraduis)//设置拐角弧度.setUseMemCache(true)//设置使用MemCache，默认true</p><p><br></p><p><b>2）xUtils3 bind方法：</b></p><p>// assets filex.image().bind(imageView,"assets://test.gif", imageOptions);// local filex.image().bind(imageView,newFile("/sdcard/test.gif").toURI().toString(), imageOptions);x.image().bind(imageView,"/sdcard/test.gif", imageOptions);x.image().bind(imageView,"file:///sdcard/test.gif", imageOptions);x.image().bind(imageView,"file:/sdcard/test.gif", imageOptions);x.image().bind(imageView, url, imageOptions,newCallback.CommonCallback() {@OverridepublicvoidonSuccess(Drawable result) {    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }</p><p><br></p><p><br></p><p><b>3）xUtils3 loadDrawable方法：</b></p><p>x.image().loadDrawable(url, imageOptions,newCallback.CommonCallback() {@OverridepublicvoidonSuccess(Drawable result) {        imageView.setImageDrawable(result);    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }});</p><p><br></p><p><b>4）xUtils3 loadFile方法：</b></p><p>当我们通过bind()或者loadDrawable()方法加载了一张图片后，它会保存到本地文件中，那当我需要这张图片时，就可以通过loadFile()方法进行查找。</p><p>x.image().loadFile(url,imageOptions,newCallback.CacheCallback(){@OverridepublicbooleanonCache(File result) {//在这里可以做图片另存为等操作Log.i("JAVA","file："+result.getPath()+result.getName());returntrue;//相信本地缓存返回true}@OverridepublicvoidonSuccess(File result) {    }@OverridepublicvoidonError(Throwable ex,booleanisOnCallback) {    }@OverridepublicvoidonCancelled(CancelledException cex) {    }@OverridepublicvoidonFinished() {    }});</p><p><br></p><p><a href target="_blank">4.xUtils3数据库模块的使用</a></p><p><b>1）初始化配置和创建实体类</b></p><p>首先在项目Application中进行初始化配置DaoConfig（与onCreate方法同级目录下）：</p><p>/**</p><p>* 初始化DaoConfig配置</p><p>*/DbManager.DaoConfig daoConfig =newDbManager.DaoConfig()//设置数据库名，默认xutils.db.setDbName("myapp.db")//设置数据库路径，默认存储在app的私有目录.setDbDir(newFile("/mnt/sdcard/"))//设置数据库的版本号.setDbVersion(2)//设置数据库打开的监听.setDbOpenListener(newDbManager.DbOpenListener() {@OverridepublicvoidonDbOpened(DbManager db) {//开启数据库支持多线程操作，提升性能，对写入加速提升巨大db.getDatabase().enableWriteAheadLogging();            }        })//设置数据库更新的监听.setDbUpgradeListener(newDbManager.DbUpgradeListener() {@OverridepublicvoidonUpgrade(DbManager db,intoldVersion,intnewVersion) {            }        })//设置表创建的监听.setTableCreateListener(newDbManager.TableCreateListener() {@OverridepublicvoidonTableCreated(DbManager db, TableEntity table){                Log.i("JAVA","onTableCreated："+ table.getName());            }        });//设置是否允许事务，默认true//.setAllowTransaction(true)DbManager db = x.getDb(daoConfig);</p><p><br></p><p>然后创建数据库表ChildInfo的实体类：</p><p>/**</p><p>* onCreated = "sql"：当第一次创建表需要插入数据时候在此写sql语句</p><p>*/@Table(name ="child_info",onCreated ="")publicclassChildInfo{/**</p><p>* name = "id"：数据库表中的一个字段</p><p>* isId = true：是否是主键</p><p>* autoGen = true：是否自动增长</p><p>* property = "NOT NULL"：添加约束</p><p>*/@Column(name ="id",isId =true,autoGen =true,property ="NOT NULL")privateintid;@Column(name ="c_name")privateString cName;publicChildInfo(String cName) {this.cName = cName;    }//默认的构造方法必须写出，如果没有，这张表是创建不成功的publicChildInfo() {    }publicintgetId() {returnid;    }publicvoidsetId(intid) {this.id = id;    }publicStringgetcName() {returncName;    }publicvoidsetcName(String cName) {this.cName = cName;    }@OverridepublicStringtoString() {return"ChildInfo{"+"id="+id+",cName='"+cName+'\''+'}';    }}</p><p><br></p><p>之后就能进行创建和删除数据库的操作了：</p><p><b>2）创建数据库</b></p><p>//用集合向child_info表中插入多条数据ArrayList childInfos =newArrayList&lt;&gt;();childInfos.add(newChildInfo("zhangsan"));childInfos.add(newChildInfo("lisi"));childInfos.add(newChildInfo("wangwu"));childInfos.add(newChildInfo("zhaoliu"));childInfos.add(newChildInfo("qianqi"));childInfos.add(newChildInfo("sunba"));//db.save()方法不仅可以插入单个对象，还能插入集合db.save(childInfos);</p><p><br></p><p><b>3）删除数据库</b></p><p>db.dropDb();</p><p><br></p><p><b>4）删除表</b></p><p>db.dropTable(ChildInfo.class);</p><p><br></p><p><b>5）新增表中的数据</b></p><p>ChildInfo childInfo =newChildInfo("zhangsan123");db.save(childInfo);</p><p><br></p><p><b>6）删除表中的数据</b></p><p>//第一种写法：db.delete(ChildInfo.class);//child_info表中数据将被全部删除//第二种写法，添加删除条件：WhereBuilder b = WhereBuilder.b();b.and("id","&gt;",2);//构造修改的条件b.and("id","&lt;",4);db.delete(ChildInfo.class, b);</p><p><br></p><p><b>7）修改表中的数据</b></p><p>//第一种写法：ChildInfo first = db.findFirst(ChildInfo.class);first.setcName("zhansan2");db.update(first,"c_name"); //c_name：表中的字段名//第二种写法：WhereBuilder b = WhereBuilder.b();b.and("id","=",first.getId()); //构造修改的条件KeyValue name = new KeyValue("c_name","zhansan3");db.update(ChildInfo.class,b,name);//第三种写法：first.setcName("zhansan4");db.saveOrUpdate(first);</p><p><br></p><p><b>8）查询表中的数据</b></p><p>//查询数据库表中第一条数据ChildInfo first = db.findFirst(ChildInfo.class);Log.i("JAVA",first.toString());//添加查询条件进行查询List all = db.selector(ChildInfo.class).where("id","&gt;",2).and("id","&lt;",4).findAll();for(ChildInfo childInfo :all){    Log.i("JAVA",childInfo.toString());}</p><p><br></p><p><a href target="_blank">5.xUtils3提供的其他一些方法</a></p><p><b>1）UI异步执行</b></p><p>x.task().run(newRunnable() {@Overridepublicvoidrun() {//异步代码}});</p><p><br></p><p><b>2）UI同步执行</b></p><p>x.task().post(newRunnable() {@Overridepublicvoidrun() {//同步代码}});</p>
        </div>
      </div>
    </div>
  </body>
</html>
]]></content>
  </entry>
</search>
